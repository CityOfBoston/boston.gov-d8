<project name="setup"
         default="setup"
         description="Setup tasks for various containers.">

<!-- Define the default task for the setup project. -->
  <target name="setup"
          description="Install dependencies, builds docroot, installs Drupal."
          depends="setup:drupal, setup:drupal:newdb">
    <echo message="For a full list of available Phing targets, run:"/>
    <echo message="from host: lando phing -l"/>
    <echo message="from container: phing -l"/>
  </target>

  <!-- Define the build task for normal developer local builds. -->
  <target name="setup:docker:drupal-local"
          description="Creates a drupal environment in docker for local development."
          depends="setup:drupal, setup:drupal:newdb, setup:drush:local-config">
    <phingcall target="build:info" description="display the welcome screen."/>
    <echo message="The admin account is: ${drupal.account.name} and password is ${drupal.account.password}" level="warning"/>
    <exec output='${project.basedir}/.uli' command="${drush.cmd} uli" description="Login the admin user" logoutput="true"/>
  </target>

  <!-- Define the build task used by travis. -->
  <target name="setup:docker:drupal-travis"
          description="Creates a drupal environment in docker (command run by travis)."
          depends="build:info">
  </target>

  <!-- Define the build task used by terraform-->
  <target name="setup:docker:drupal-terraform"
          description="Creates a drupal environment in docker (command run by terraform)."
          depends="build:info">
  </target>

<!-- Define the Drupal setup task -->
  <target name="setup:drupal"
          description="Uses Composer to install drupal in the container.">
    <if>
      <not>
        <available file="${project.basedir}/docroot/core/lib/Drupal.php" />
      </not>
      <then>
        <echo message="Using Composer to install Drupal" />
        <exec command="composer install" dir="${project.basedir}/" description="when ready, use update:drupal:composer:install" logoutput="true"/>
      </then>
      <else>
        <echo message="Drupal is already installed."/>
        <echo message="To update all drupal core and contributed modules, use: "/>
        <echo message="   lando phing update:drupal:composer"/>
        <echo message="or"/>
        <echo message="   lando composer update."/>
        <echo message="to update all drupal custom and features modules."/>
        <echo message="   lando git pull."/>
      </else>
    </if>
  </target>

<!-- Define the task to create a new Drupal 8 Database. -->
  <target name="setup:drupal:newdb"
          description="Uses Composer to install drupal in the container attaching to database in Lando-controlled container.">
    <if>
      <available file="${project.basedir}/docroot/core/lib/Drupal.php"/>
      <then>

        <echo message="Creating the default database for initial Drupal modules."/>

        <phingcall target="setup:drupal:local_settings_php:delete"
                   description="Remove any pre-existing local.settings.php file."/>
        <phingcall target="setup:drupal:local_settings_php:write"
                   description="Recreate the local.settings.php file from default and load DB and any other settings."/>

        <exec description="Creates a working database using the profile specified and modules in the docroot Drupal installation."
              dir="${docroot}"
              command="${drush.cmd} si ${project.profile.name}
                --db-url=${lando.db.type}://${lando.db.username}:${lando.db.password}@${lando.db.host}:${lando.db.port}/${lando.db.database}
                --site-name=${lando.name}
                --site-mail=${drupal.account.mail}
                --account-name=${drupal.account.name}
                --account-pass=${drupal.account.password}
                --account-mail=${drupal.account.mail}
                -y
                "
              logoutput="true"/>

        <phingcall target="update:config:updatedb"
                   description="Run any database updates."/>
        <phingcall target="update:config:export"
                   description="Export configurations files from database."/>

      </then>
      <else>
        <echo message="Drupal is already installed."/>
        <echo message="Database was not imported, use update:drupal:db to update the database."/>
      </else>
    </if>
  </target>

<!-- Define a task to delete the local local.settings.php file. -->
  <target name="setup:drupal:local_settings_php:delete"
          description="Deletes any existing local.settings.php file.">
    <delete file="${local.settings.file}" failonerror="false" quiet="true"/>
  </target>

<!-- Define a task to copy a new local.settings.php file and append initial settings. -->
  <target name="setup:drupal:local_settings_php:write"
          description="Sets the database and any other default values into the local.settings.php file.">
      <if>
        <not>
          <available file="${local.settings.file}"/>
        </not>
        <then>
          <copy file="${docroot}/sites/${drupal.multisite.name}/settings/default.local.settings.php" tofile="${local.settings.file}" haltonerror="false" overwrite="false" verbose="true"/>
          <echo message="${line.separator}$databases['default']['default'] = array (${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="'driver' => 'mysql',${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="'database' => '${lando.db.database}',${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="'username' => '${lando.db.username}',${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="'password' => '${lando.db.password}',${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="'host' => getenv('DRUPAL_DATABASE_HOST') ? getenv('DRUPAL_DATABASE_HOST') : 'localhost',${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="'port' => '${lando.db.port}',${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message=");${line.separator}${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="$config_directories['sync'] = '${project.basedir}${project.sync}';${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="$settings['install_profile'] = '${project.profile.name}';${line.separator}${line.separator}" append="true" file="${local.settings.file}"/>
        </then>
        <else>
          <echo message="local.settings.php already exists, ignoring."/>
        </else>
      </if>

      <echo level="warning" message="Using settings file ${local.settings.file}"/>
      <echo level="warning" message='Using ${lando.db.type} "${lando.db.database}" database on "${lando.db.host}:${lando.db.port}" in container "${lando.db.container}"'/>

  </target>

  <target name="setup:drush:local-config"
          description="Creates a drush.yml file to default drush commands to the local site.">
    <echo message="Update the drush config to the container url"/>
    <echo message="options:${line.separator}" append="true" file="${docroot}/sites/all/drush/drush.yml"/>
    <echo message="uri: 'http://boston.lndo.site:8000'${line.separator}" append="true" file="${docroot}/sites/all/drush/drush.yml"/>
    <echo message="root: '/app/docroot'${line.separator}" append="true" file="${docroot}/sites/all/drush/drush.yml"/>
  </target>

</project>
