<project name="tests" default="tests:info">

  <target name="tests:info"
          description="Tests project conatins all PHPUnit and Behat testing for CI."
          depends="build:info"/>

  <echo message="Building ${custom.phing.dir}/tasks/tests.xml" level="verbose"/>

  <target name="tests:all" description="Runs all tests, including Behat, PHPUnit, and Security Update check."
          depends="tests:security-updates, tests:behat, tests:phpunit"/>

  <!-- If you experience 'Maximum function nesting level' errors in your PHP
       error log, set 'xdebug.max_nesting_level=1000' in php.ini. -->
  <target name="tests:behat" depends="tests:run-server, tests:phantomjs:launch" description="Executes Behat all behat tests in behat.paths.">
    <mkdir dir="${reports.localDir}/behat"/>
    <phingcall target="tests:behat:execute"/>
    <!--<phingcall target="tests:phantomjs:kill"/>-->
  </target>

  <target name="tests:behat:execute" description="Executes behat tests against specific path.">
    <!-- Run behat. Any settings in behat.yml or local.yml will be used. -->
    <behat executable="${composer.bin}/behat"
           config="${behat.config}"
           profile="${behat.profile}"
           verbose="true"
           strict="true"
           haltonerror="false"
           returnProperty="behatFail"
           out="std,${reports.localDir}"
           format="pretty,junit"
           tags="${behat.tags}"
    />

    <if>
      <istrue value="${behatFail}"/>
      <then>
        <fail message="One ore more Behat tests failed." />
      </then>
    </if>
  </target>

  <!-- Execute PHPUnit tests. -->
  <target name="tests:phpunit" description="Executes PHPUnit tests against custom code.">
    <delete dir="${reports.localDir}/phpunit" quiet="true"/>
    <mkdir dir="${reports.localDir}/phpunit"/>

    <phpunit printsummary="true" failureproperty="phpunit.failures" errorproperty="phpunit.errors">
      <formatter type="plain" usefile="false"/>
      <formatter type="xml" todir="${reports.localDir}/phpunit"/>
      <batchtest>
        <fileset dir="${repo.root}/tests/phpunit">
          <include name="**/*Test*.php"/>
        </fileset>
      </batchtest>
    </phpunit>
    <phpunitreport infile="${reports.localDir}/phpunit/testsuites.xml" format="noframes" todir="${reports.localDir}/phpunit" />
    <property name="reports.phpunit.file" value="${reports.localDir}/phpunit/phpunit-noframes.html"/>
    <echo>PHPUnit Report is available at ${reports.phpunit.file}</echo>

    <if>
      <or>
        <equals arg1="${phpunit.failures}" arg2="true"/>
        <equals arg1="${phpunit.errors}" arg2="true"/>
      </or>
      <then>
        <fail message="PHPUnit Failed. See report for details."/>
      </then>
    </if>
  </target>

  <!-- Ensure Drupal doesn't have any modules requiring security updates. -->
  <!-- Intentionally removed checkreturn="true" so that this does not cause failure. -->
  <target name="tests:security-updates"
          description="Check local Drupal installation for security updates.">
    <exec dir="${docroot}"
          command="! ${drush.cmd} -n ups --check-disabled --security-only 2>/dev/null | grep 'SECURITY UPDATE'"
          logoutput="true"
          passthru="true"/>
  </target>

</project>
