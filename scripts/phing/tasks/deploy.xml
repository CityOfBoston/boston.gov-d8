<project name="deploy" default="deploy:repo">

  <target name="deploy:artifact:add-remote" description="*Adds a git remote and checks out deploy branch from upstream.">
    <!-- Generate and md5 sum of the remote URL to use as remote name. -->
    <exec command="echo ${deploy.remote} | openssl md5 | cut -d' ' -f 2"
          outputProperty="remoteName"/>

    <echo message="Add remote ${remoteName}." level="info"/>
    <exec command="git remote add ${remoteName} ${deploy.remote}"
          dir="${deploy.dir}" passthru="true"/>

    <!-- Create the new branch. -->
    <echo message="Create and checkout the branch ${deploy.branch} in new repo." level="info"/>
    <exec command="git checkout -b ${deploy.branch}"
          dir="${deploy.dir}" passthru="true"/>

    <echo message="Fetch from remote." level="info"/>
    <exec command="git fetch ${remoteName}"
          dir="${deploy.dir}" passthru="true"/>

    <!-- Pull the latest updates (if available). -->
    <echo message="Merge the branch from remote into empty repo." level="info"/>
    <exec command="git merge ${remoteName}/${deploy.branch}"
          dir="${deploy.dir}" passthru="true"/>
  </target>

  <target name="deploy:artifact:add-remotes" description="*Add remotes and fetch upstream refs.">
    <echo message="Add remote(s) to the new repo (in deploy directory)." level="info"/>
    <foreach list="${deploy.remotes}" param="deploy.remote" target="deploy:artifact:add-remote"/>
  </target>

  <target name="deploy:artifact:commitd8" description="*Commits deployment files to repo.">

    <echo message="Add modified files to git (git add --all)." level="info"/>
    <exec command="git add --all" dir="${deploy.dir}" logoutput="true" passthru="true"/>

    <echo message="Commit files to git (git commit)." level="info"/>
    <exec command="git commit -m '${deploy.commitMsg}' --quiet" dir="${deploy.dir}" logoutput="true" passthru="true"/>

    <echo message="Git repo now ready to deploy to Acquia." level="info"/>

  </target>

  <target name="deploy:artifact:copy" description="*Copy required files from docroot/sites to deploy/docroot/sites.">
    <!-- @todo Replace with -include-from=<file> with file defining patterns rather than specific files. -->
    <echo message="Copy (filtered set) files from ${repo.root} into ${deploy.dir}." level="info"/>
    <exec command="rsync -rlDW --inplace --delete --exclude-from=${deploy.excludes-file} --files-from=${deploy.includes-file} ${repo.root}/ ${deploy.dir}/"
          logoutput="true"/>
    <echo message="Copy (filtered set) files from ${repo.root} into ${deploy.dir}." level="info"/>
  </target>

  <target name="deploy:artifact:prepare-dir" description="*Delete the existing deploy directory and re-initialize as an empty git repository.">
    <delete dir="${deploy.dir}" failonerror="false" quiet="true" />
    <echo message="Create the deploy directory (${deploy.dir}) - if necessary." level="info"/>
    <mkdir dir="${deploy.dir}"/>
    <echo message="Initialize new git repo in deploy directory." level="info"/>
    <exec command="git init"
          dir="${deploy.dir}" logoutput="true" passthru="true"/>
  </target>

  <target name="deploy:artifact:push-all" description="*Push to all registered remotes.">
    <echo message="Push (deploy) to all remotes." level="info"/>
    <exec command="rm -f .git/gc.log"
          dir="${deploy.dir}" logoutput="true" passthru="true"/>
    <exec command="git prune"
          dir="${deploy.dir}" logoutput="true" passthru="true"/>
    <exec command="git config gc.pruneExpire 3.days.ago"
          dir="${deploy.dir}" logoutput="true" passthru="true"/>
    <foreach list="${deploy.remotes}" param="deploy.remote" target="deploy:artifact:push-remote"/>
    <echo message="Push complete. Code now deployed to all remotes." level="info"/>
  </target>

  <target name="deploy:artifact:push-remote" description="*Pushes to a git remote.">
    <exec command="echo ${deploy.remote} | openssl md5 | cut -d' ' -f 2"
          outputProperty="remoteName"/>
    <echo message="Push ${deploy.branch} to ${remoteName} (${deploy.remote})" level="info"/>
    <exec command="git push ${remoteName} ${deploy.branch}"
          dir="${deploy.dir}" logoutput="true"
          outputProperty="deploy.push.output"
          checkreturn="true"/>
    <echo message="Deployed ${deploy.branch} to ${remoteName}" level="info"/>
    <echo message="Note: target remote will now have the code built from ${deploy.branch}." level="info"/>
    <echo message="Note: Acquia hooks will now run." level="info"/>
    <exec command="export DEPLOY_UPTODATE=$(echo '${deploy.push.output}' | grep --quiet 'Everything up-to-date')"/>
  </target>

  <target name="deploy:artifact:sanitize" description="Removes sensitive files from the deploy docroot.">
    <delete>
      <fileset dir="${deploy.dir}/docroot">
        <include name="CHANGELOG.txt"/>
        <include name="COPYRIGHT.txt"/>
        <include name="INSTALL.txt"/>
        <include name="INSTALL.*.txt"/>
        <include name="LICENSE.txt"/>
        <include name="MAINTAINERS.txt"/>
        <include name="PATCHES.txt"/>
        <include name="README.txt"/>
        <include name="UPGRADE.txt"/>
      </fileset>
    </delete>
  </target>

  <!-- New Drupal8 Travis-based composer deployment. -->
  <target name="deploy:artifact:drupal8" description="*Runs a modified Drupal 8 deployment.">

    <echo message="Deploying to Acquia ... " level="info"/>

    <exec command="echo ${deploy.${TRAVIS_BRANCH}.dir}" outputProperty="deploy.dir"/>
    <exec command="echo ${deploy.${TRAVIS_BRANCH}.remotes}" outputProperty="deploy.remotes"/>
    <exec command="echo ${deploy.${TRAVIS_BRANCH}.deploy-branch}" outputProperty="deploy.branch"/>
    <exec command="echo ${deploy.${TRAVIS_BRANCH}.travis-drush-path}" outputProperty="travis.drush"/>
    <exec command="echo ${deploy.${TRAVIS_BRANCH}.drush-alias}" outputProperty="drush.alias"/>
    <exec command="echo ${deploy.${TRAVIS_BRANCH}.commit-message}" outputProperty="deploy.commitMsg"/>
    <!-- This property sync.db controls whether the database is copied (from staging) during post-deploy. -->
    <exec command="echo ${deploy.${TRAVIS_BRANCH}.copy-db}" outputProperty="deploy.copy-db"/>
    <exec command="echo ${deploy.${TRAVIS_BRANCH}.drush-db-source}" outputProperty="drush.db-source"/>
    <exec command="echo ${deploy.${TRAVIS_BRANCH}.dry-run}" outputProperty="deploy.dry-run"/>

    <!-- Delete the existing deploy directory and re-initialize as an empty git repository. -->
    <phingcall target="deploy:artifact:prepare-dir"
               description="Creates the deployment directory, and initialzes git."/>

    <!-- Prepare the existing local repo - assign acquia remote(s). -->
    <phingcall target="deploy:artifact:add-remotes"
               description="Add remotes and fetch upstream refs.
                            Checkout local branch tracking tracking upstream branch, if it exists.
                            Otherwise create new branch locally."/>

    <!-- Copy the existing repo to new location for deployment. -->
    <phingcall target="deploy:artifact:copy"
               description="Copy the entire built artifact to the deploy folder."/>

    <!--Sanitize the existing repo - not needed, the eclude file should cope with this. -->
    <!--<phingcall target="deploy:artifact:sanitize"-->
               <!--description="Deletes (sensitive/unwanted) files not excluded in copy"/>-->


    <!-- Push up changes to remotes. -->
    <if>
      <isfalse value="${deploy.dry-run}"/>
      <then>
        <echo message="DRY RUN: Creating build artifact, will not be deployed."/>
      </then>
      <else>
        <phingcall target="deploy:artifact:commitd8"
                   description="Commit copied files into the the repo."/>
        <phingcall target="deploy:artifact:push-all"
                   description="Push the updated repo branch to Acquia servers."/>
        <phingcall target="deploy:artifact:post-deploy"
                   description="Sync database, import configs, run update hooks, reset permissions and clear external caches."/>
      </else>
    </if>

    <echo message="Deploy Complete" level="info"/>

  </target>

  <!-- Execute drush commands to finish DB integration and update on remote.-->
  <target name="deploy:artifact:post-deploy" description="*Run commands on the server to complete the deploy.">

    <echo message="Finishing deployment to Acquia ... " level="info"/>

    <echo message="Check Drush status on remote (deploy target)." level="info"/>
    <echo message="Using drush command ${travis.drush} ${drush.alias}." level="info"/>
    <if><istrue value="${deploy.copy-db}"/>
      <then>
        <echo message="Sync'ing database ... " level="info"/>
        <exec dir="${docroot}" passthru="true"
              description="Copy the database from staging."
              command="${travis.drush} ${drush.alias} sql-sync ${drush.db-source} @self"/>
        <echo message="Note: This will cause Acquia hooks to run." level="info"/>
      </then>
      <else>
        <echo message="Note: Database on target remote not overwritten. " level="info"/>
      </else>
    </if>
    <echo message="Import config files into DB on deploy target." level="info"/>
    <exec dir="${docroot}" passthru="true"
          description="Import the configurations."
          command="${travis.drush} ${drush.alias} cim -y"/>
    <echo message="Update DB with un-executed hook_updates on deploy target." level="info"/>
    <exec dir="${docroot}" passthru="true"
          description="Run update.php to import update hooks."
          command="${travis.drush} ${drush.alias} updb -y"/>
    <echo message="Update existing entities on deploy target (poss. redundant)." level="info"/>
    <exec dir="${docroot}" passthru="true"
          description="Update any entities."
          command="${travis.drush} ${drush.alias} entup -y"/>
    <echo message="Rebuild user content access permissions on deploy target." level="info"/>
    <exec dir="${docroot}" passthru="true"
          description="Rebuild content access permissions."
          command="${travis.drush} ${drush.alias} drush php-eval 'node_access_rebuild()' -y"/>
    <echo message="Run cron now on deploy target (poss. redundant)." level="info"/>
    <exec dir="${docroot}" passthru="true"
          description="Run cron for good measure."
          command="${travis.drush} ${drush.alias} cron"/>
  </target>

</project>
