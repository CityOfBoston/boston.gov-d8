<project name="setup"
         default="setup"
         description="Setup tasks for various containers.">

  <echo message="Building ${custom.phing.tasks.dir}/setup.xml" level="verbose"/>

  <!-- Define the default task for the setup project. -->
  <target name="setup"
          description="Install dependencies, builds docroot, installs Drupal."
          depends="setup:drupal:download-modules, setup:drupal:site-install">
    <echo message="For a full list of available Phing targets, run:"/>
    <echo message="from host: lando phing -l"/>
    <echo message="from container: phing -l"/>
  </target>

  <!-- Define the build task for normal developer local builds. -->
  <target name="setup:docker:drupal-local"
          description="Creates a Drupal environment in Docker Containers for local development."
          depends=" setup:drupal:download-modules,
                    setup:drupal:set_dev_config,
                    setup:drupal:site-install,
                    setup:drush:local-config,
                    setup:drupal:clone_private_repo,
                    update:database:update,
                    setup:drupal:reset_config">
    <echo message="The user-1 account (${drupal.account.name}) is created with password '${drupal.account.password}'." level="warning"/>
    <echo message="${line.separator}To access the site off-line, add the following to your hosts file:${line.separator}    127.0.0.1 ${lando.name}.lndo.site${line.separator}"
          file="${project.basedir}/setup/uli.log" append="true"/>
  </target>

  <!-- Define the build task used by travis. -->
  <target name="setup:docker:drupal-travis"
          description="Creates a drupal environment in docker (command run by travis)."
          depends="build:info">
  </target>

  <!-- Define the build task used by terraform-->
  <target name="setup:docker:drupal-terraform"
          description="Creates a drupal environment in docker (command run by terraform)."
          depends=" setup:drupal:set_prod_config,
                    setup:drupal:reset_config">
    <exec description="Enable the limit-apache-children module for terraform."
        command="a2enconf limit-apache-children" dir="${repo.root}" logoutput="true"/>
  </target>

<!-- Define the Drupal setup task -->
  <target name="setup:drupal:download-modules"
          description="Uses Composer to install drupal in the container. (logs to /app/setup/composer.log)">
      <if>
          <equals arg1="${acquia.site_environment}" arg2="dev"/>
          <then>
              <echo message="Creates DEVELOPMENT (${acquia.site_environment}) build"/>
              <property name="flag.dev" value="--dev" description="Sets default dev flag for composer command." />
          </then>
          <else>
              <exec command='echo "Creates ${acquia.site_environment} build"' passthru="true"/>
              <property name="flag.dev" value="--no-dev" description="Sets default dev flag for composer command." />
          </else>
      </if>
    <if>
        <available file="${docroot}/core/lib/Drupal.php" />
        <then>
            <fail message="Drupal is already installed."/>
        </then>
        <else>
            <echo message="Using Composer to install Drupal core and the required contrib modules." level="info"/>
            <echo message=" -> see ${project.basedir}/setup/composer.log for output." level="warning"/>
            <echo message="${line.separator} > composer install ${flag.dev}"
                  file="${project.basedir}/setup/composer.log" append="true"/>
            <exec description="Installs the modules per composer.lock (or composer.json if no .lock file)."
                  command="composer install ${flag.dev} >> ${project.basedir}/setup/composer.log"
                  dir="${project.basedir}/"
                  logoutput="true"/>
            <echo message="${line.separator} > composer drupal:scaffold"
                  file="${project.basedir}/setup/composer.log" append="true"/>
            <exec description="Installs the drupal scaffold files, and logs to composer.log"
                  command="composer drupal:scaffold >> ${project.basedir}/setup/composer.log"
                  dir="${project.basedir}/"
                  logoutput="true"/>

            <exec description="Establish drupal command in path."
                command="if [ ! -e  /usr/local/bin/drupal ]; then ln -s ${LANDO_MOUNT}/vendor/drupal/console/bin/drupal /usr/local/bin/; fi"
                logoutput="true"
                passthru="true"
            />

        </else>
    </if>
  </target>

<!-- Define the task to build a new Drupal 8 Database. -->
  <target name="setup:drupal:site-install"
          description="Uses Drush to install Drupal in the container attaching to database in Lando-controlled container.">

    <if>
      <available file="${docroot}/core/lib/Drupal.php"/>
      <then>

        <echo message="Preparing to setup the Drupal database."/>

        <phingcall target="setup:drupal:local_settings_php"
                   description="Recreate the local.settings.php file from default and load DB and any other settings."/>

        <echo level="warning" message="Build is now using settings file ${local.settings.file}"/>
        <echo level="warning" message='... with "${lando.db.database}" database (${lando.db.type}) at "${lando.db.host}:${lando.db.port}" in container "${lando.db.container}"'/>

        <exec command="echo '${line.separator}\033[0;32m(resuming) > setup:drupal:site-install\033[0m${line.separator}'" logoutput="true" passthru="true"/>
        <echo message="Install the Drupal 8 database."/>
        <echo message=" -> see ${project.basedir}/setup/drush_site_install.log for output." level="warning"/>

        <resolvepath propertyName="install_config_abs" file="${docroot}/${project.config.sync}"/>
        <if>
            <available filepath="${docroot}/${project.config.sync}" file="system.site.yml"/>
            <then>
                <property name="si_install_profile" value="${project.profile.install_profile}"
                          description="Directs si to use the config_installer profile."/>
                <property name="si_flag_install"
                        value="config_installer_sync_configure_form.sync_directory=${install_config_abs}"
                        description="Sets the location of a previous installation Drupal configs to import to this installation."/>
                <property name="si_site_profile" value="${project.profile.name}"
                        description="Defines the profile to be applied after the import is performed."/>
                <echo level="info" message="Build is importing configs from ${install_config_abs} during install (takes a while)."/>
            </then>
            <else>
              <property name="si_install_profile" value="${project.profile.name}"/>
              <property name="si_site_profile" value="${project.profile.name}"/>
              <echo message="${install_config.abs}/system.site.yml does not exist, normal profile-based install performed."/>
            </else>
        </if>

        <property name="si.command" value="${drush.cmd} si ${si_install_profile} ${si_flag_install}
          --db-url=${lando.db.type}://${lando.db.username}:${lando.db.password}@${lando.db.host}:${lando.db.port}/${lando.db.database}
          --site-name=${lando.name}
          --site-mail=${drupal.account.mail}
          --account-name=${drupal.account.name}
          --account-pass=${drupal.account.password}
          --account-mail=${drupal.account.mail}
          --sites-subdir=${drupal.multisite.name}
          -vvv -y"/>
        <echo file="${project.basedir}/setup/drush_site_install.log" message="exec: ${si.command}"/>
        <exec description="Creates a working database using the profile specified and modules in the docroot Drupal installation."
              dir="${docroot}"
              command="${si.command} >> ${project.basedir}/setup/drush_site_install.log "
              logoutput="true"/>

      </then>
      <else>
        <echo message="Drupal core is not found."/>
        <fail message="Setup is incomplete." status="1"/>
      </else>
    </if>
  </target>

<!-- Define a task to copy a new local.settings.php file and append initial settings. -->
  <target name="setup:drupal:local_settings_php"
          description="Deletes, recreates and sets the database and any other default values into the local.settings.php file.">

      <!-- Firstly delete the local settings file -->
      <echo message="Delete the ${local.settings.file} file (if exists)."/>
      <delete file="${local.settings.file}" failonerror="false" quiet="true"/>

      <!-- Now recreate the settings file -->
      <echo message="Recreate the ${local.settings.file} file with build settings."/>
      <if>
        <not>
          <available file="${local.settings.file}"/>
        </not>
        <then>

          <copy file="${docroot}/sites/${drupal.multisite.name}/settings/default.local.settings.php" tofile="${local.settings.file}" haltonerror="false" overwrite="false" verbose="true"/>
          <copy file="${docroot}/sites/${drupal.multisite.name}/default.services.yml" tofile="${local.services.file}" haltonerror="false" overwrite="false" verbose="true"/>

          <echo description="Adds local settings to settings.local.php file."
                message="${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="/*${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="  Content added by Phing &lt;setup:drupal:local_settings_php&gt;${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="*/${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="$config_directories['sync'] = '${project.config.sync}';${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="$settings['install_profile'] = '${project.profile.name}';${line.separator}${line.separator}" append="true" file="${local.settings.file}"/>
        </then>
        <else>
          <echo message="The local.settings.php already exists, did not update with local settings."/>
        </else>
      </if>

      <if>
        <not>
          <available file="${settings.file}"/>
        </not>
        <then>
          <echo message="&lt;?php${line.separator}${line.separator}" append="true" file="${settings.file}"/>
        </then>
      </if>

      <!-- Remove unwanted and confusing template config files. -->
      <delete file="${docroot}/sites/default/default.settings.php" quiet="true"/>
      <delete file="${docroot}/sites/example.settings.local.php" quiet="true"/>
      <delete file="${docroot}/sites/example.sites.php" quiet="true"/>
      <delete file="${docroot}/sites/default/default.services.yml" quiet="true"/>
      <delete file="${docroot}/sites/development.services.yml" quiet="true"
              description="Redundant file as we have this in the sites/default folder."/>

      <!-- Append code to (fresh) settings.php file -->
      <echo description="Adds default settings to settings.php and directve to include the settings.local.php file."
            message="${line.separator}" append="true" file="${settings.file}"/>
      <echo message="/*${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  Content added by Phing &lt;setup:drupal:local_settings_php&gt;${line.separator}" append="true" file="${settings.file}"/>
      <echo message="*/${line.separator}" append="true" file="${settings.file}"/>
      <echo message="$settings['update_free_access'] = FALSE;${line.separator}" append="true" file="${settings.file}"/>
      <echo message="$settings['container_yamls'][] = $app_root . '/' . $site_path . '/services.yml';${line.separator}" append="true" file="${settings.file}"/>
      <echo message="$settings['file_scan_ignore_directories'] = [${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'node_modules',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'bower_components',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="];${line.separator}" append="true" file="${settings.file}"/>
      <echo message="$settings['entity_update_batch_size'] = 50;${line.separator}" append="true" file="${settings.file}"/>
      <echo message="$databases['default']['default'] = array (${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'driver' => 'mysql',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'database' => '${lando.db.database}',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'username' => '${lando.db.username}',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'password' => '${lando.db.password}',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'host' => '${lando.db.host}',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'port' => '${lando.db.port}',${line.separator}" append="true" file="${settings.file}"/>
      <echo message=");${line.separator}" append="true" file="${settings.file}"></echo>
      <echo message="if (file_exists('${local.settings.file}')) {${line.separator}" append="true" file="${settings.file}"/>
      <echo message="   include '${local.settings.file}';${line.separator}" append="true" file="${settings.file}"/>
      <echo message="}${line.separator}${line.separator}" append="true" file="${settings.file}"/>
      <echo message="/* End of additions. */${line.separator}" append="true" file="${settings.file}"/>

  </target>

  <!-- Define a task to include files from a private repo (defined in phing-boston.yml). -->
  <!--
       Usage Note: The file structure in the private repo, must exactly mirror the main
       repo to enable files to copy across to the correct locations.
       Use .gitignore files in the private repo folders to ignore copied files in
       the main repo.
  -->
  <target name="setup:drupal:clone_private_repo"
          description="Clones the private repo, and moves files around (i.e. installs) as needed.">

    <if>
      <isset property="git.private_repo.repo"/>
      <then description="If the Private Repo flag is set, then allow loading of the private settings file.">

      <!-- Define local variables. -->
      <property description="Location of settings files for this Drupal intallation."
                name="private.docroot.settings"
                value="${docroot}/${git.private_repo.settings_file}"/>

      <echo message="> Merging the private repo from ${git.private_repo.repo} (${git.private_repo.branch})." level="warning"/>

        <!-- Clone the private repo. -->
        <delete description="Completely delete folder at private repo target. (won't run if doesn't exist)."
                includeemptydirs="true" dir="${git.private_repo.local_dir}" failonerror="false" quiet="true"/>
        <mkdir dir="${git.private_repo.local_dir}" />
        <exec description="Clone a private repo which has confidential settings (passwords etc)."
              command="git clone ${git.private_repo.repo} ${git.private_repo.local_dir} -q --depth 1 -b ${git.private_repo.branch} >> ${project.basedir}/setup/drush_site_install.log"
              dir="${git.private_repo.local_dir}"
              returnProperty="repoOK" logoutput="false" passthru="true"/>

        <!-- Move files from private repo into main repo, and add include directive so it is loaded on bootstrap. -->
        <if>
          <available file="${git.private_repo.local_dir}/.git/config"/>
          <then>
            <delete description="Remove .git so folder is no longer a repo (and doesn't get copied)."
                    dir="${git.private_repo.local_dir}/.git"
                    quiet="true" verbose="false" failonerror="false" includeemptydirs="true"/>
            <exec description="Remove markdown files so they dont get copied."
                    command="rm -f ${git.private_repo.local_dir}/*.md"
                    passthru="true" logoutput="false" checkreturn="false"/>
            <exec description="Move the private repo files to the docroot folder."
                  command="rsync -a ${git.private_repo.local_dir}/ ${repo.root}/"
                  passthru="true" logoutput="false" checkreturn="false"/>
            <exec description="Delete the private repo files."
                  command="rm -rf ${git.private_repo.local_dir}"
                  passthru="true" logoutput="false" checkreturn="false"/>
          </then>
        </if>

        <if>
          <available file="${private.docroot.settings}"/>
          <then>
            <echo description="Adds a directive to settings file to include contents of settings file in repo."
                  message="${line.separator}/* Adds a directive to settings file to include contents of settings file in repo */${line.separator}"
                  append="true" file="${local.settings.file}"/>
            <echo message="if (file_exists('${private.docroot.settings}')) {${line.separator}" append="true" file="${local.settings.file}"/>
            <echo message="   include '${private.docroot.settings}';${line.separator}" append="true" file="${local.settings.file}"/>
            <echo message="}${line.separator}${line.separator}" append="true" file="${local.settings.file}"/>
            <echo message="/* End of additions. */${line.separator}" append="true" file="${local.settings.file}"/>
          </then>
        </if>

      </then>
    </if>
  </target>

  <target name="setup:drush:local-config"
          description="Creates a drush.yml file to default drush commands to the local site.">
    <echo message="Update the drush config with the container url"/>
    <echo message="# Docs at https://github.com/drush-ops/drush/blob/master/examples/example.drush.yml${line.separator}" append="true" file="${repo.root}/drush/drush.yml"/>
    <echo message="${line.separator}options:${line.separator}" append="true" file="${repo.root}/drush/drush.yml"/>
    <echo message="  uri: '${lando.url.url}'${line.separator}" append="true" file="${repo.root}/drush/drush.yml"/>
    <echo message="  root: '${lando.url.localpath}'${line.separator}" append="true" file="${repo.root}/drush/drush.yml"/>
  </target>

  <target name="setup:cleanup"
            description="Final cleanup after the install process.">
        <resolvepath propertyName="install_config_abs" file="${docroot}/${project.config.sync}"/>
        <delete description="Removes the config files used during installation."
                dir="${install_config_abs}" failonerror="true" includeemptydirs="true" />
        <exec description="Exports the configs into the config folder.."
                dir="${docroot}" command="${drush.cmd} cex -y" logoutput="true"/>
    </target>

    <!-- Development Modules Strategy -->
    <!--
        - Config_split module is used to maintain a set of configurations suitable to development environments
        only.  Any config-export activities for modules defined in the "development" 'Configuration Split Setting'
        (at /admin/config/development/configuration/config-split/development/edit) will be exported to app/config/develop.
        - The "development" settings are marked active so that development environments will import configs from the
        config/develop folder on build and export configs to that folder on drush config-export etc.
        - local.settings.php has a switch to make the "development" settings active/inactive based on the AH_ENVIROMENT
        variables, but this is only implemented after the site is installed...
        .. Therefore, when installing on non-dev environments the contents of the ../config/develop folder need to be
        removed.
     -->
    <target name="setup:drupal:set_prod_config"
            description="Disables the develop configs from non-dev environments.">
        <resolvepath propertyName="install_config_abs" file="${project.config.sync}" dir="${docroot}"/>
        <echo message="Disabling development-only config settings." level="info"/>
        <exec description="Rename the config_split yml file which contains the modules to be implemented only in development."
              command="mv config_split.config_split.development.yml config_split.config_split.development.yml.disabled"
              dir="${install_config_abs}"
              passthru="true"
              logoutput="true"/>
        <if>
          <available file="${install_config_abs}/config_split.config_split.production.yml.disabled"/>
          <then>
            <echo message="Enabling production-only config settings." level="info"/>
              <exec description="Ensure the config_split yml file which contains the modules to be implemented only in production is available."
                    command="mv config_split.config_split.production.yml.disabled config_split.config_split.production.yml"
                    dir="${install_config_abs}"
                    passthru="true"
                    logoutput="true"/>
          </then>
        </if>
    </target>

    <!-- Production-only Modules Strategy -->
    <!--
        - Config_split module is used to maintain a set of configurations suitable to production environments
        only.  Any config-export activities for modules defined in the "production" 'Configuration Split Setting'
        (at /admin/config/development/configuration/config-split/production/edit) will be exported to app/config/prod.
        - The "production" settings are marked active so that development environments will import configs from the
        config/prod folder on build and export configs to that folder on drush config-export etc.
        - local.settings.php has a switch to make the "production" settings active/inactive based on the AH_ENVIROMENT
        variables, but this is only implemented after the site is installed...
        .. Therefore, when installing on non-dev environments the contents of the ../config/prod folder need to be
        removed.
     -->
    <target name="setup:drupal:set_dev_config"
            description="Disables the production configs from non-prod environments.">
        <resolvepath propertyName="install_config_abs" file="${project.config.sync}"  dir="${docroot}"/>
        <echo message="Disabling production-only config settings." level="info"/>
        <exec description="Rename the config_split yml file which contains the modules to be implemented only in production."
            command="mv config_split.config_split.production.yml config_split.config_split.production.yml.disabled"
            dir="${install_config_abs}"
            passthru="true"
            logoutput="true"/>
        <if>
          <available file="${install_config_abs}/config_split.config_split.development.yml.disabled"/>
          <then>
            <echo message="Enabling development-only config settings." level="info"/>
            <exec description="Ensure the config_split yml file which contains the modules to be implemented only in development is available."
                command="mv config_split.config_split.development.yml.disabled config_split.config_split.development.yml"
                dir="${install_config_abs}"
                passthru="true"
                logoutput="true"/>
          </then>
        </if>
    </target>

  <target name="setup:drupal:reset_config"
          description="Re-enables the configs from both environments.">
    <resolvepath propertyName="install_config_abs" file="${project.config.sync}"  dir="${docroot}"/>
    <echo message="Enabling config_split settings." level="info"/>
    <if>
      <available file="${install_config_abs}/config_split.config_split.development.yml.disabled"/>
      <then>
        <exec description="Ensure the config_split yml file which contains the modules to be implemented only in development is available."
              command="mv config_split.config_split.development.yml.disabled config_split.config_split.development.yml"
              dir="${install_config_abs}"
              passthru="true"
              logoutput="true"/>
      </then>
    </if>
    <if>
      <available file="${install_config_abs}/config_split.config_split.production.yml.disabled"/>
      <then>
        <exec description="Ensure the config_split yml file which contains the modules to be implemented only in production is available."
              command="mv config_split.config_split.production.yml.disabled config_split.config_split.production.yml"
              dir="${install_config_abs}"
              passthru="true"
              logoutput="true"/>
      </then>
    </if>
    <if>
      <and>
        <equals arg1="${acquia.site_environment}" arg2="dev" casesensitive="true"/>
        <available file="${install_config_abs}/config_split.config_split.production.yml"/>
      </and>
      <then>
        <echo message="Imports prod config."/>
        <property name="cfg.php" value="\Drupal::service(&quot;config.factory&quot;)->getEditable(&quot;config_split.config_split.production&quot;)->set(&quot;status&quot;, false)->save();"/>
        <resolvepath propertyName="cfg.prod" file="${project.config.prod}"  dir="${docroot}"/>
        <exec description="Use drupal console to re-import the production yml config_split file."
              dir="${docroot}"
              command="drupal config:import:single --file=/app/config/default/config_split.config_split.production.yml"
              logoutput="true"/>
        <exec description="Sets the active status for the settings."
              dir="${docroot}"
              command="${drush.cmd} eval '${cfg.php}'"
              logoutput="true"/>
        <exec description="Make git ignore the changes to the config/prod folder because we did not use the production config."
              dir="${cfg.prod}"
              command="git update-index --assume-unchanged $(git ls-files | tr '\n' ' ')"
              logoutput="true"/>
      </then>
    </if>
  </target>

</project>

