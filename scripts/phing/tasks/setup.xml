<project name="setup"
         default="setup"
         description="Setup tasks for various containers.">

  <echo message="Building ${custom.phing.tasks.dir}/setup.xml" level="verbose"/>

  <!-- Define the default task for the setup project. -->
  <target name="setup"
          description="Install dependencies, builds docroot, installs Drupal."
          depends="setup:drupal:download-modules, setup:drupal:site-install">
    <echo message="For a full list of available Phing targets, run:"/>
    <echo message="from host: lando phing -l"/>
    <echo message="from container: phing -l"/>
  </target>

  <!-- Define the build task for normal developerreset_config local builds. -->
  <target name="setup:docker:drupal-local"
          description="Creates a Drupal environment in Docker Containers for local development.">

    <!-- Map build-specifc properties. -->
    <property name="build.type" value="${build.local.type}"/>
    <property name="build.type.long" value="development"/>
    <property name="composer.mode" value=""/>
    <property name="build.config.site-uuid" value="${build.local.config.site-uuid}"/>
    <property name="build.config.sync" value="${build.local.config.sync}"/>
    <property name="build.config.develop" value="${build.local.config.develop}"/>
    <property name="build.config.prod" value="${build.local.config.prod}"/>
    <property name="build.database.source" value="${build.local.database.source}"/>
    <property name="build.database.drush-alias" value="${build.local.database.drush-alias}"/>

    <!-- Build. -->
    <phingcall target="setup:type" />
    <phingcall target="setup:drupal:download-modules" />
    <phingcall target="setup:drupal:clone_private_repo"/>
    <phingcall target="setup:drupal:site-install"/>
    <phingcall target="setup:drush:local-config"/>

    <symlink link="${project.basedir}/docroot/sites/default/files/setup" target="${project.basedir}/setup" overwrite="true"/>
    <exec command="echo '\033[1;33mThe user-1 account (${drupal.account.name}) is created with password `${drupal.account.password}`.\033[0m'" logoutput="true"/>
    <echo
            message="${line.separator}To access the site off-line, add the following to your hosts file:${line.separator}    127.0.0.1 ${lando.name}.lndo.site${line.separator}"
            file="${project.basedir}/setup/uli.log" append="true"/>
  </target>

  <!-- Define the build task used by travis. -->
  <target name="setup:docker:drupal-travis"
          description="Creates a drupal environment in docker (command run by travis).">

    <!-- Map build-specifc properties. -->
    <property name="build.type" value="${build.travis.type}"/>
    <property name="build.type.long" value="production"/>
    <property name="composer.mode" value="--dev"/>
    <property name="build.config.site-uuid" value="${build.travis.config.site-uuid}"/>
    <property name="build.config.sync" value="${build.travis.config.sync}"/>
    <property name="build.config.develop" value="${build.travis.config.develop}"/>
    <property name="build.config.prod" value="${build.travis.config.prod}"/>
    <property name="build.database.source" value="${build.travis.database.source}"/>
    <property name="build.database.drush-alias" value="${build.travis.database.drush-alias}"/>
    <!-- Builds using the deploy branch of the private-repo. -->
    <property name="git.private_repo.branch" value="${git.private_repo.deploy-branch}"/>

    <!-- Build. -->
    <phingcall target="setup:type" inheritRefs="true" inheritAll="true"/>
    <!--<phingcall target="setup:drupal:download-modules" />-->
    <phingcall target="setup:drupal:clone_private_repo"/>
    <phingcall target="setup:drupal:site-install"/>
    <phingcall target="setup:drush:local-config"/>

  </target>

  <!-- Define the build task used by terraform-->
  <target name="setup:docker:drupal-terraform"
          description="Creates a drupal environment in docker (command run by terraform).">

    <!-- Map build-specifc properties. -->
    <property name="build.type" value="${build.terraform.type}"/>
    <property name="build.type.long" value="development"/>
    <property name="composer.mode" value="--dev"/>
    <phingcall target="setup:type"/>
    <property name="build.config.site-uuid" value="${build.local.config.site-uuid}"/>
    <property name="build.config.sync" value="${build.local.config.sync}"/>
    <property name="build.config.develop" value="${build.local.config.develop}"/>
    <property name="build.config.prod" value="${build.local.config.prod}"/>
    <property name="build.database.source" value="${build.terraform.database.source}"/>
    <property name="build.database.drush-alias" value="${build.local.database.drush-alias}"/>

    <exec command="echo 'Build Mode: ${build.database.source}'" logoutput="true"/>
    <!-- Work out what sort of database handling is to be done. -->
    <if>
      <not><isset property="build.database.source"/></not>
      <then>
        <property description="will be one of 'sync', 'build' or 'dump'."
          name="build.database.source" value="build"/>
      </then>
    </if>

    <!-- Download any missing drupal files -->
    <if>
      <not>
        <available description="This file only exists if core has been downloaded, and therefore composer has been run."
                   file="${docroot}/core/lib/Drupal.php"/>
      </not>
      <then>
        <phingcall description="Use composer to download files" target="setup:drupal:download-modules"/>

        <!-- Import the private settings repo contents -->
        <if>
          <not>
            <available description="This file only exists if the private repo has been cloned already."
                       file="${project.basedir}/.private"/>
          </not>
          <then>
            <phingcall description="Import the private repo" target="setup:drupal:clone_private_repo"/>
          </then>
        </if>

        <!-- Create the correct settings files. -->
        <phingcall description="Update settings files" target="setup:drush:local-config"/>

      </then>
    </if>

    <if>
      <!-- Only run the build process if ${build.database.source} is not "none" -->
      <not><equals arg1="${build.database.source}" arg2="none" casesensitive="true"/></not>
      <then>

        <!-- If in auto or recovery mode, then try to fetch a previous database dump -->
        <if>
          <or>
            <equals arg1="${build.database.source}" arg2="auto" casesensitive="true"/>
            <equals arg1="${build.database.source}" arg2="restore" casesensitive="true"/>
          </or>
          <then>
            <!-- Set default dump location if necessary. -->
            <if>
              <not>
                <isset property="dbdump.path"/>
              </not>
              <then>
                <property name="dbdump.path" value="/tmp/dump.sql"/>
              </then>
            </if>
            <!-- Fetch a previous dump -->
            <exec description="Attempts to retrieve a previously stashed database."
                  dir="${project.basedir}/scripts/doit"
                  command="doit stash-db fetch"
                  passthru="true"
                  logoutput="true"/>
            <!-- Check if dump was fetched OK. -->
            <available file="${dbdump.path}" property="dbdump.found"/>

            <!-- Switch auto mode -->
            <if>
              <equals arg1="${build.database.source}" arg2="auto" casesensitive="true"/>
              <then>
                <if>
                  <isset property="dbdump.found"/>
                  <then><property name="${build.database.source}" value="restore"/></then>
                  <else><property name="${build.database.source}" value="sync"/></else>
                </if>
              </then>
            </if>
          </then>
        </if>

        <!-- Build, Restore or sync the database. -->
        <switch value="${build.database.source}" caseinsensitive="true">

          <!-- Restore database. -->
          <case value="restore">
            <!-- Restore the database. -->
            <phingcall description="restore database" target="update:database:restore"/>
            <!-- Import the current configs -->
            <phingcall description="Import Configs" target="update:config:import"/>
            <!-- Run any module update routines -->
            <phingcall description="Update database" target="update:database:update"/>
          </case>

          <!-- Sync database with remote server. -->
          <case value="sync">
            <!-- Sync with remote -->
            <phingcall description="restore database" target="update:database:sync"/>
            <!-- Import the current configs -->
            <phingcall description="import configs" target="update:config:import"/>
            <!-- Run any module update routines -->
            <phingcall description="Update database" target="update:database:update"/>
          </case>

          <!-- Build a new database. -->
          <case value="build">
            <!-- Manage configs. -->
            <phingcall description="Disable production-only modules" target="setup:drupal:set_dev_config"/>
            <!-- Build the new database -->
            <phingcall description="Install drupal" target="setup:drupal:site-install"/>
            <phingcall description="Update database" target="update:database:update"/>
            <!-- Manage configs -->
            <phingcall description="Reset configs" target="setup:drupal:reset_config"/>
          </case>
        </switch>

      </then>
    </if>

    <!-- Change owner of ../config tree -->
    <chown user="www-data" description="Ensure configs tree is available." quiet="true" verbose="false">
      <fileset dir="${project.basedir}/config">
        <include name="**/*"></include>
      </fileset>
    </chown>

    <!-- Change owner of site/default/settings tree -->
    <chown user="www-data" description="Ensure configs tree is available." quiet="true" verbose="false">
      <fileset dir="${project.basedir}/docroot/sites/default">
        <include name="files/*"/>
        <include name="settings.php"/>
        <include name="settings.local.php"/>
      </fileset>
    </chown>

    <!-- Change owner of site/default/settings tree -->
    <chown user="www-data" file="${project.basedir}/.ssh"
           description="Ensure ssh folder is available to www-data." quiet="true" verbose="false"/>
    <chown user="www-data" description="Ensure ssh keys are available to www-data." quiet="true" verbose="false">
      <fileset dir="${project.basedir}/.ssh">
        <include name="*"/>
      </fileset>
    </chown>

    <!-- Change permissions on the actual settings files -->
    <chmod mode="0777" description="Change permissions on settings" verbose="false" quiet="true">
      <fileset dir="${project.basedir}/docroot/sites/default">
        <include name="*settings*.php"/>
        <include name="**/*settings*.php"/>
      </fileset>
    </chmod>

    <!-- Create symbolic links for tooling -->
    <symlink link="/usr/local/bin/drush" target="${project.basedir}/vendor/bin/drush" overwrite="true" />
    <symlink link="/usr/local/bin/phing" target="${project.basedir}/vendor/bin/phing" overwrite="true" />
    <chmod mode="755" verbose="false" quiet="true">
      <fileset dir="/usr/local/bin">
        <include name="drush"/>
        <include name="phing"/>
      </fileset>
    </chmod>

    <!-- Need to upgrade the memory allocation. -->
    <echo
      message="// Terraform Addition.${line.separator}ini_set('memory_limit', '512M');${line.separator}"
      append="true" file="${local.settings.file}"/>

  </target>

  <!-- Do some preparatory steps. -->
  <target name="setup:type" description="Determines which build type - defaults to Development">
    <switch value="${build.type}">
      <case value="prod">
        <echo message="Creates PRODUCTION build"/>
        <property name="build.type.long" value="production" override="true"/>
        <property name="composer.mode" value="--dev" override="true"/>
      </case>
      <default>
        <echo message="Creates DEVELOPMENT build"/>
        <property name="build.type.long" value="development" override="true"/>
        <property name="composer.mode" value="--dev" override="true"/>
      </default>
    </switch>
  </target>

  <!-- Define the Drupal setup task -->
  <target name="setup:drupal:download-modules"
          description="Uses Composer to install drupal in the container. (logs to /app/setup/composer.log)">
    <if><not><available file="${project.basedir}/setup"/></not><then><mkdir dir="${project.basedir}/setup"/></then></if>

    <if>
      <not><isset property="composer.mode"/></not>
      <then><property name="composer.mode" value="--dev"
                      description="Always default to downloading require-dev packages."/></then>
    </if>

    <if>
      <available file="${docroot}/core/lib/Drupal.php"/>
      <then>
        <echo message="WARNING: Drupal is already installed.  This will not be a 'clean' build. "/>
        <echo message =" -> Composer Install will still run and may update existing files."/>
      </then>
    </if>

    <echo message="Using Composer to install Drupal core and the required contrib modules."
          level="info"/>
    <if>
      <not><isset property="env.LANDO_APP_NAME"/></not>
      <then><property name="lando.url.url" value=""/></then>
    </if>

    <exec command="echo '\033[1;33m -> see ${lando.url.url}/sites/default/files/setup/composer.log for output.\033[0m'" logoutput="true"/>
    <echo message="Executes: > composer install ${composer.mode} --no-suggest${line.separator}${line.separator}"
          file="${project.basedir}/setup/composer.log" append="true"/>
    <echo message="composer install ${composer.mode} --no-suggest --prefer-dist"/>
    <!-- Install composer (using lock file fif present) -->
    <exec description="Installs the modules per composer.lock (or composer.json if no .lock file)."
          command="composer install ${composer.mode} --no-suggest --prefer-dist >> ${project.basedir}/setup/composer.log"
          dir="${project.basedir}/" outputProperty="composer.result" checkreturn="true"
          logoutput="true"/>
    <echo message="${line.separator} > composer drupal:scaffold"
          file="${project.basedir}/setup/composer.log" append="true"/>
    <exec description="Installs the drupal scaffold files, and logs to composer.log"
          command="composer drupal:scaffold >> ${project.basedir}/setup/composer.log"
          dir="${project.basedir}/" checkreturn="true"
          logoutput="true"/>
    <!-- Create a symlink for usr/local/bin/drupal when building locally. -->
    <if>
      <and>
        <equals arg1="${build.type}" arg2="dev"/>
        <available file="/usr/local/bin"/>
      </and>
      <then>
        <symlink link="${project.basedir}/vendor/drupal/console/bin/drupal" target="/usr/local/bin/drupal" overwrite="false"/>
      </then>
    </if>

    <echo message="Done." level="info"/>
  </target>

  <!-- Define the task to build a new Drupal 8 Database. -->
  <target name="setup:drupal:site-install"
          description="Uses Drush to install Drupal in the container attaching to database in Lando-controlled container.">

    <if>
      <available file="${docroot}/core/lib/Drupal.php"/>
      <then>

        <!-- Send some messages to console. -->
        <if>
          <not>
            <isset property="no-settings"/>
          </not>
          <then>
            <echo message="Preparing to setup the Drupal database."/>
            <phingcall target="setup:drupal:local_settings_php"
                  description="Update and install all drupal settings.php files."/>
            <exec command="echo '\033[1;33m\nBuild is now using settings file ${local.settings.file}\033[0m'" logoutput="true"
                  passthru="true"/>
            <exec command="echo '\033[1;33m... with `${lando.db.database}` database (${lando.db.type}) at `${lando.db.host}:${lando.db.port}` in container `${lando.db.container}`\033[0m'" logoutput="true"
                  passthru="true"/>
            <exec command="echo '${line.separator}\033[0;32m(resuming) > setup:drupal:site-install\033[0m${line.separator}'" logoutput="true"
                  passthru="true"/>
          </then>
        </if>

        <echo message="Install the Drupal 8 database."/>
        <exec command="echo '\033[1;33m -> see ${lando.url.url}/sites/default/files/setup/drush_site_install.log for output.\033[0m'" logoutput="true"/>
        <resolvepath propertyName="install_config_abs"
                     file="${docroot}/${build.config.sync}"/>

        <!-- Run the drush si command and check output. -->
        <property name="si.command" value="${drush.cmd} si ${project.profile.name} --db-url=${lando.db.type}://${lando.db.username}:${lando.db.password}@${lando.db.host}:${lando.db.port}/${lando.db.database} --site-name=${lando.name} --site-mail=${drupal.account.mail} --account-name=${drupal.account.name} --account-pass=${drupal.account.password} --account-mail=${drupal.account.mail} --sites-subdir=${drupal.multisite.name} -vvv -y"/>
        <echo file="${project.basedir}/setup/drush_site_install.log"
              message="==== Installing Drupal ====${line.separator}"  append="true"/>
        <echo file="${project.basedir}/setup/drush_site_install.log"
              message="Executing: ${si.command}${line.separator}${line.separator}" append="true"/>
        <exec description="Creates a working database using the profile specified and modules in the docroot Drupal installation."
              dir="${docroot}" level="warning"
              command="${si.command} >> ${project.basedir}/setup/drush_site_install.log"
              logoutput="true" returnProperty="install.output"/>
        <if>
          <and>
            <isset property="install.output"/>
            <not><equals arg1="${install.output}" arg2="0" /></not>
          </and>
          <then>
            <echo message="Build Failed." level="error"/>
            <exec command="cat ${project.basedir}/setup/drush_site_install.log"
                  passthru="true" logoutput="true"/>
            <fail message="Fail - Site install failure"/>
          </then>
          <else>
            <echo message="Success: Site is now freshly installed with a default database."/>
          </else>
        </if>

        <!-- If sync'ing DB then do so now -->
        <echo message="phing-boston.yml setting build:database:source = '${build.database.source}'."/>
        <if>
          <equals arg1="${build.database.source}" arg2="sync"/>
          <then>
              <phingcall target="update:database:sync" description="Sync the database"/>
          </then>
          <else>
          <echo message=" -> DB was not synchronized from Acquia - site is using a fresh database with no content."/>
        </else>
        </if>

        <!-- If the site UUID is specified, and a system.site.yml exits then check they match here and fix. -->
        <if>
          <and>
            <isset property="build.config.site-uuid"/>
            <available file="${project.sync}/system.site.yml"/>
          </and>
          <then>
            <exec command='${drush.cmd} cget "system.site" uuid | grep -Eo "\s[0-9a-h\-]*"' outputProperty="db.uuid"/>
            <exec command='cat ${project.sync}/system.site.yml | grep "uuid:" | grep -Eo "\s[0-9a-h\-]*"' outputProperty="yml.uuid"/>
            <propertyregex property="db.uuid" match="$1" pattern="\s([0-9a-h\-]*)" subject="${db.uuid}" override="true"/>
            <propertyregex property="yml.uuid" match="$1" pattern="\s([0-9a-h\-]*)" subject="${yml.uuid}" override="true"/>
            <if>
              <not><equals arg1="${db.uuid}" arg2="${yml.uuid}"/></not>
              <then>
                <echo message="Setting uuid in database to match uuid in config files."/>
                <exec command='${drush.cmd} cset "system.site" uuid "${yml.uuid}" -y'
                      checkreturn="true"/>
              </then>
            </if>
          </then>
          <else>
            <echo message="No ${project.sync}/system.site.yml or ${build.config.site-uuid}"/>
          </else>
        </if>

        <!-- Import the configs now. -->
        <phingcall target="update:config:import" description="Import yml configs into DB"/>

        <switch value="${build.type}">
          <case value="prod"><phingcall target="update:config:import-prod"/></case>
          <default><phingcall target="update:config:import-dev"/></default>
        </switch>

        <!-- Update the database. -->
        <phingcall target="update:database:update" description="Update the database (run hook updates)"/>

      </then>

      <else>
        <echo message="Drupal core is not found." level="error"/>
        <fail message="Setup is incomplete." status="1"/>
      </else>
    </if>
    <echo message="Success - Site installed." level="info"/>
  </target>

  <!-- Define a task to copy a new local.settings.php file and append initial settings. -->
  <target name="setup:drupal:local_settings_php"
          description="! Deletes, recreates and sets the database and any other default values into the local.settings.php file.">

    <!-- Resource names -->
    <property name="private.docroot.settings" value="${docroot}/${git.private_repo.settings_file.rel}"/>

    <echo message="Customize settings."/>

    <!-- First if there is no settings.local.php file, then rename the default. -->
    <if>
      <not><available file="${local.settings.file}"/></not>
      <then>
        <copy file="${docroot}/sites/${drupal.multisite.name}/settings/default.local.settings.php"
              tofile="${local.settings.file}" haltonerror="false" overwrite="false"
              verbose="false" />
      </then>
    </if>

    <!-- Second, add in the require to the private repo file if exists. -->
    <echo message="/*${line.separator} * Content added by Phing &lt;setup:drupal:local_settings_php&gt;.${line.separator} */${line.separator}"
          append="true" file="${local.settings.file}"/>
    <if>
      <available file="${private.docroot.settings}"/>
      <then>
        <echo description="Adds a directive to settings file to include contents of settings file in repo."
              message="${line.separator}// Adds a directive to include contents of settings file in repo. ${line.separator}"
              append="true" file="${local.settings.file}"/>
        <echo message='if (file_exists(DRUPAL_ROOT . "/${git.private_repo.settings_file.rel}")) {${line.separator}'
              append="true" file="${local.settings.file}"/>
        <echo message='  include DRUPAL_ROOT . "/${git.private_repo.settings_file.rel}";${line.separator}'
              append="true" file="${local.settings.file}"/>
        <echo message="}${line.separator}${line.separator}"
              append="true" file="${local.settings.file}"/>
      </then>
    </if>

    <!-- Third, add in config sync directory from yml. -->
    <echo message="$config_directories['sync'] = '${build.config.sync}';${line.separator}"
          append="true" file="${local.settings.file}"/>
    <echo message="$settings['install_profile'] = '${project.profile.name}';${line.separator}"
          append="true" file="${local.settings.file}"/>
    <echo message="/* End of additions. */${line.separator}"
          append="true" file="${local.settings.file}"/>

    <!-- Fourth copy default.service.yml to service.yml if not present. -->
    <copy file="${docroot}/sites/${drupal.multisite.name}/default.services.yml"
          tofile="${local.services.file}" haltonerror="false" overwrite="false"
          verbose="false"/>

    <!-- Remove unwanted and confusing template config files. -->
    <delete file="${docroot}/sites/example.settings.local.php" quiet="true" verbose="false"/>
    <delete file="${docroot}/sites/example.sites.php" quiet="true" verbose="false"/>

    <echo message="Success - done." level="info"/>

  </target>

  <!-- Define a task to include files from a private repo (defined in phing-boston.yml). -->
  <!--
       Usage Note: The file structure in the private repo, must exactly mirror the main
       repo to enable files to copy across to the correct locations.
       Use .gitignore files in the private repo folders to ignore copied files in
       the main repo.
  -->
  <target name="setup:drupal:clone_private_repo"
          description="Clones the private repo, and moves files around (i.e. installs) as needed.">

    <if>
      <not>
        <!-- git.priavte_repo.name comes from -D option on calling phing CLI -->
        <!-- Should be in the format gitusername:token -->
        <isset property="git.private_repo.user"/>
      </not>
      <then>
        <property description="Set the default value of the git repo if not provided as argument from CLI."
                  name="git.private_repo.user" value="git@github.com:" />
      </then>
    </if>

    <if>
      <isset property="git.private_repo.repo"/>
      <then
              description="If the Private Repo flag is set, then allow loading of the private settings file.">

        <exec command="echo '\033[1;33m> Merging the private repo from ${git.private_repo.user}@${git.private_repo.repo} (${git.private_repo.branch}).\033[0m'" logoutput="true"/>

        <!-- Clone the private repo. -->
        <delete description="Completely delete folder at private repo target. (won't run if doesn't exist)."
                includeemptydirs="true" dir="${git.private_repo.local_dir}"
                failonerror="false" quiet="true"/>
        <mkdir dir="${git.private_repo.local_dir}"/>
        <echo message="Clone the repo."/>
        <exec description="Clone a private repo which has confidential settings (passwords etc)."
              command="git clone ${git.private_repo.user}${git.private_repo.repo} ${git.private_repo.local_dir} -q --depth 1 -b ${git.private_repo.branch} >> ${project.basedir}/setup/drush_site_install.log"
              dir="${git.private_repo.local_dir}"
              returnProperty="repoOK" logoutput="false" passthru="true"/>

        <!-- Move files from private repo into main repo, and add include directive so it is loaded on bootstrap. -->
        <if>
          <available file="${git.private_repo.local_dir}/.git/config"/>
          <then>
            <!-- TODO: Use includes and excludes files to filter rsync and simplify all this ...-->
            <exec description="Ensure the master branch is pulled and up to date."
                  command="git fetch >> ${project.basedir}/setup/drush_site_install.log"
                  dir="${git.private_repo.local_dir}"
                  logoutput="true" passthru="true"/>
            <delete description="Remove .git so folder is no longer a repo (and doesn't get copied)."
                    dir="${git.private_repo.local_dir}/.git"
                    quiet="true" verbose="false" failonerror="false"
                    includeemptydirs="true"/>
            <delete description="Remove .gitignore on root (so doesn't get copied)."
                    file="${git.private_repo.local_dir}/.gitignore"
                    quiet="true" verbose="false" failonerror="false"
                    includeemptydirs="true"/>
            <exec description="Rename any ..gitignore files to .gitignore so the contents arent saved in main repo"
                  dir="${git.private_repo.local_dir}"
                  command="find . -iname '*..gitignore' -exec rename 's/\.\.gitignore/\.gitignore/' '{}' \; "
                  passthru="true" logoutput="true" checkreturn="false"/>
            <exec description="Remove markdown files so they dont get copied."
                  command="rm -f ${git.private_repo.local_dir}/*.md"
                  passthru="true" logoutput="false" checkreturn="false"/>
            <echo message="Move private repo files into the main repo."/>
            <exec description="Move the private repo files to the docroot folder."
                  command="rsync -aE ${git.private_repo.local_dir}/ ${repo.root}/ >> ${project.basedir}/setup/drush_site_install.log"
                  passthru="true" logoutput="false" checkreturn="false"/>
            <exec description="Delete the private repo files."
                  command="rm -rf ${git.private_repo.local_dir} >> ${project.basedir}/setup/drush_site_install.log"
                  passthru="true" logoutput="false" checkreturn="false"/>
          </then>
          <else>
            <exec command="echo '\033[1;33mPrivate repo was not cloned.  Build process will continue.\033[0m'" logoutput="true"/>
            <echo message="Private repo was not cloned.  Build process will continue."
                  level="warning" append="true"
                  file="${project.basedir}/setup/drush_site_install.log"/>
          </else>
        </if>

      </then>
    </if>
    <echo message="Done." level="info"/>

  </target>

  <target name="setup:drush:local-config"
          description="Creates a drush.yml file to default drush commands to the local site.">
    <echo message="Update the drush config with the container url"/>
    <delete file="${repo.root}/drush/drush.yml" failonerror="false" quiet="true"/>
    <echo
            message="# Docs at https://github.com/drush-ops/drush/blob/master/examples/example.drush.yml${line.separator}"
            append="true" file="${repo.root}/drush/drush.yml"/>
    <echo message="${line.separator}options:${line.separator}" append="true"
          file="${repo.root}/drush/drush.yml"/>
    <echo message="  uri: '${lando.url.url}'${line.separator}" append="true"
          file="${repo.root}/drush/drush.yml"/>
    <echo message="  root: '${lando.url.localpath}'${line.separator}"
          append="true" file="${repo.root}/drush/drush.yml"/>
    <echo message="Done." level="info"/>
  </target>

  <target name="setup:cleanup"
          description="! Final cleanup after the install process.">
    <resolvepath propertyName="install_config_abs"
                 file="${docroot}/${build.config.sync}"/>
    <delete description="Removes the config files used during installation."
            dir="${install_config_abs}" failonerror="true"
            includeemptydirs="true"/>
    <exec description="Exports the configs into the config folder.."
          dir="${docroot}" command="${drush.cmd} cex -y" logoutput="true"/>
  </target>

  <target name="setup:wait-prompt">
    <propertyprompt propertyName="someprop" defaultValue="n"
                    promptText="OK to continue y/n"/>
    <if>
      <equals arg1="${someprop}" arg2="y" casesensitive="true"/>
      <then/>
      <else>
        <fail message="Cancelled ${someprop}" status="0"/>
      </else>
    </if>
  </target>

  <target name="test">
    <echo message="Testing." level="info"/>
  </target>


</project>

