<project name="setup"
         default="setup"
         description="Setup tasks for various containers.">

  <echo message="Building ${custom.phing.tasks.dir}/setup.xml" level="verbose"/>

<!-- Define the default task for the setup project. -->
  <target name="setup"
          description="Install dependencies, builds docroot, installs Drupal."
          depends="setup:drupal, setup:drupal:newdb">
    <echo message="For a full list of available Phing targets, run:"/>
    <echo message="from host: lando phing -l"/>
    <echo message="from container: phing -l"/>
  </target>

  <!-- Define the build task for normal developer local builds. -->
  <target name="setup:docker:drupal-local"
          description="Creates a drupal environment in docker for local development."
          depends="setup:drupal, setup:drupal:newdb, setup:drush:local-config, update:config:updatedb">
    <phingcall target="build:info" description="display the welcome screen."/>
    <echo message="The admin account is: ${drupal.account.name} and password is ${drupal.account.password}" level="warning"/>
    <exec description="Login the admin user." output='${project.basedir}/setup/.uli'  logoutput="true"
            dir="${docroot}" command="${drush.cmd} uli"/>
    <exec description="Allow users outside the container access to the .uli file." logoutput="true"
            dir="${docroot}" command="chmod 777 ${project.basedir}/setup/.uli"/>
  </target>

  <!-- Define the build task used by travis. -->
  <target name="setup:docker:drupal-travis"
          description="Creates a drupal environment in docker (command run by travis)."
          depends="build:info">
  </target>

  <!-- Define the build task used by terraform-->
  <target name="setup:docker:drupal-terraform"
          description="Creates a drupal environment in docker (command run by terraform)."
          depends="build:info">
  </target>

<!-- Define the Drupal setup task -->
  <target name="setup:drupal"
          description="Uses Composer to install drupal in the container. (logs to /app/setup/composer.log)">
      <if>
          <equals arg1="${acquia.site_environment}" arg2="dev"/>
          <then>
              <echo message="Creates DEVELOPMENT (${acquia.site_environment}) build"/>
              <property name="flag.dev" value="--dev" description="Sets default dev flag for composer command." />
          </then>
          <else>
              <exec command='echo "Creates ${acquia.site_environment} build"' passthru="true"/>
              <property name="flag.dev" value="--no-dev" description="Sets default dev flag for composer command." />
          </else>
      </if>
    <if>
      <not>
        <available file="${docroot}/core/lib/Drupal.php" />
      </not>
      <then>
        <echo message="Using Composer to install Drupal core and the required contrib modules." level="info"/>
        <echo message=" -> see ${project.basedir}/setup/composer.log for output." level="warning"/>
        <exec command="composer install ${flag.dev} > ${project.basedir}/setup/composer.log"
              dir="${project.basedir}/"
              description="when ready, use update:drupal:composer:install"
              logoutput="true"/>
      </then>
      <else>
        <fail message="Drupal is already installed."/>
      </else>
    </if>
  </target>

<!-- Define the task to create a new Drupal 8 Database. -->
  <target name="setup:drupal:newdb"
          description="Uses Composer to install drupal in the container attaching to database in Lando-controlled container.">

    <if>
      <available file="${docroot}/core/lib/Drupal.php"/>
      <then>

        <echo message="Preparing to setup the Drupal database."/>

        <phingcall target="setup:drupal:local_settings_php:delete"
                   description="Remove any pre-existing local.settings.php file."/>
        <phingcall target="setup:drupal:local_settings_php:write"
                   description="Recreate the local.settings.php file from default and load DB and any other settings."/>

        <echo level="warning" message="Build is now using settings file ${local.settings.file}"/>
        <echo level="warning" message='... with "${lando.db.database}" database (${lando.db.type}) at "${lando.db.host}:${lando.db.port}" in container "${lando.db.container}"'/>

        <exec command="echo '${line.separator}\033[0;32m(resuming) > setup:drupal:newdb\033[0m${line.separator}'" logoutput="true" passthru="true"/>
        <echo message="Install the Drupal 8 database."/>
        <echo message=" -> see ${project.basedir}/setup/drush_site_install.log for output." level="warning"/>

        <resolvepath propertyName="install_config_abs" file="${docroot}/${project.config.sync}"/>
        <if>
            <available filepath="${docroot}/${project.config.sync}" file="system.site.yml"/>
            <then>
                <property name="si_install_profile" value="${project.profile.install_profile}"
                          description="Directs si to use the config_installer profile."/>
                <property name="si_flag_install"
                        value="config_installer_sync_configure_form.sync_directory=${install_config_abs}"
                        description="Sets the location of a previous installation Drupal configs to import to this installation."/>
                <property name="si_site_profile" value="${project.profile.name}"
                        description="Defines the profile to be applied after the import is performed."/>
                <echo level="info" message="Build is migrating configs from ${install_config_abs} during install (takes a while)."/>
            </then>
            <else>
              <property name="si_install_profile" value="${project.profile.name}"/>
              <property name="si_site_profile" value="${project.profile.name}"/>
              <echo message="${install_config.abs}/system.site.yml does not exist, normal profile-based install performed."/>
            </else>
        </if>

        <property name="si.command" value="${drush.cmd} si ${si_install_profile} ${si_flag_install}
          --db-url=${lando.db.type}://${lando.db.username}:${lando.db.password}@${lando.db.host}:${lando.db.port}/${lando.db.database}
          --site-name=${lando.name}
          --site-mail=${drupal.account.mail}
          --account-name=${drupal.account.name}
          --account-pass=${drupal.account.password}
          --account-mail=${drupal.account.mail}
          --sites-subdir=${drupal.multisite.name}
          --verbose -y"/>
        <echo file="${project.basedir}/setup/drush_site_install.log" message="exec: ${si.command}"/>
        <exec description="Creates a working database using the profile specified and modules in the docroot Drupal installation."
              dir="${docroot}"
              command="${si.command} >> ${project.basedir}/setup/drush_site_install.log "
              logoutput="true"/>

      </then>
      <else>
        <echo message="Drupal core is not found."/>
        <fail message="Setup is incomplete." status="1"/>
      </else>
    </if>
  </target>

<!-- Define a task to delete the local local.settings.php file. -->
  <target name="setup:drupal:local_settings_php:delete"
          description="Deletes any existing local.settings.php file.">
      <echo message="Delete the ${local.settings.file} file (if exists)."/>
      <delete file="${local.settings.file}" failonerror="false" quiet="true"/>
  </target>

<!-- Define a task to copy a new local.settings.php file and append initial settings. -->
  <target name="setup:drupal:local_settings_php:write"
          description="Sets the database and any other default values into the local.settings.php file.">

      <echo message="Recreate the ${local.settings.file} file with build settings."/>
      <if>
        <not>
          <available file="${local.settings.file}"/>
        </not>
        <then>
          <copy file="${docroot}/sites/${drupal.multisite.name}/settings/default.local.settings.php" tofile="${local.settings.file}" haltonerror="false" overwrite="false" verbose="true"/>
          <copy file="${docroot}/sites/${drupal.multisite.name}/default.services.yml" tofile="${local.services.file}" haltonerror="false" overwrite="false" verbose="true"/>
          <echo message="${line.separator}/*${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="  Content added by Phing &lt;setup:drupal:local_settings_php:write&gt;${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="*/${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="$config_directories['sync'] = '${project.config.sync}';${line.separator}" append="true" file="${local.settings.file}"/>
          <echo message="$settings['install_profile'] = '${project.profile.name}';${line.separator}${line.separator}" append="true" file="${local.settings.file}"/>
        </then>
        <else>
          <echo message="local.settings.php already exists, ignoring."/>
        </else>
      </if>

      <if>
        <not>
          <available file="${settings.file}"/>
        </not>
        <then>
          <echo message="&lt;?php${line.separator}${line.separator}" append="true" file="${settings.file}"/>
        </then>
      </if>

      <echo message="${line.separator}/*${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  Content added by Phing &lt;setup:drupal:local_settings_php:write&gt;${line.separator}" append="true" file="${settings.file}"/>
      <echo message="*/${line.separator}" append="true" file="${settings.file}"/>
      <echo message="$settings['update_free_access'] = FALSE;${line.separator}" append="true" file="${settings.file}"/>
      <echo message="$settings['container_yamls'][] = $app_root . '/' . $site_path . '/services.yml';${line.separator}" append="true" file="${settings.file}"/>
      <echo message="$settings['file_scan_ignore_directories'] = [${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'node_modules',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'bower_components',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="];${line.separator}" append="true" file="${settings.file}"/>
      <echo message="$settings['entity_update_batch_size'] = 50;${line.separator}" append="true" file="${settings.file}"/>
      <echo message="$databases['default']['default'] = array (${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'driver' => 'mysql',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'database' => '${lando.db.database}',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'username' => '${lando.db.username}',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'password' => '${lando.db.password}',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'host' => '${lando.db.host}',${line.separator}" append="true" file="${settings.file}"/>
      <echo message="  'port' => '${lando.db.port}',${line.separator}" append="true" file="${settings.file}"/>
      <echo message=");${line.separator}" append="true" file="${settings.file}"></echo>
      <echo message="if (file_exists('${local.settings.file}')) {${line.separator}" append="true" file="${settings.file}"/>
      <echo message="   include '${local.settings.file}';${line.separator}" append="true" file="${settings.file}"/>
      <echo message="}${line.separator}${line.separator}" append="true" file="${settings.file}"/>
      <echo message="/* End of additions. */${line.separator}" append="true" file="${settings.file}"/>

  </target>

  <target name="setup:drush:local-config"
          description="Creates a drush.yml file to default drush commands to the local site.">
    <echo message="Update the drush config with the container url"/>
    <echo message="options:${line.separator}" append="true" file="${docroot}/sites/all/drush/drush.yml"/>
    <echo message="  uri: '${lando.url.url}'${line.separator}" append="true" file="${docroot}/sites/all/drush/drush.yml"/>
    <echo message="  root: '${lando.url.localpath}'${line.separator}" append="true" file="${docroot}/sites/all/drush/drush.yml"/>
    <echo message="  root: '${lando.db.container}'${line.separator}" append="true" file="${docroot}/sites/all/drush/drush.yml"/>
  </target>

    <target name="setup:cleanup"
            description="Final cleanup after the install process.">
        <resolvepath propertyName="install_config_abs" file="${docroot}/${project.config.sync}"/>
        <delete description="Removes the config files used during installation."
                dir="${install_config_abs}" failonerror="true" includeemptydirs="true" />
        <exec description="Exports the configs into the config folder.."
                dir="${docroot}" command="${drush.cmd} cex -y" logoutput="true"/>
    </target>

</project>

