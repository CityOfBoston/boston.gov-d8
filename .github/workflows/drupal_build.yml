# @file(yaml)
# == GITHUB ACTION ==
# Build artifact workflow for Boston.gov
# Workflow monitors pipeline branchs and is triggered on Pull Requests.
#   This action uses composer to compile all the code required for the site, and then runs PHP code validations.
#
# @see https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md
# @see https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu1804-Readme.md
#
name: "Pipeline: Build & Test"
on:
  push:
    branches:
      - DIG-1078
#  pull_request:
#    branches:
#      - develop
#      - master
  workflow_dispatch:

env:
  RELEASE_CANDIDATE_PATH: ${{ github.workspace }}/release_candidate   # Path where release_candidate is built.
  SCRIPTS_PATH: ${{ github.workspace }}/scripts/actions   # Path to scripts folder.
  UBUNTU_VERSION: '18.04'   # Look for Ubuntu 20.04 or 22.04 soon.
  PHP_VERSION: '8.0'        # Match this to PHP version used on Acquia/Production FORMAT N.N (e.g. 8.1)
  MYSQL_VERSION: '5.7'      # Match this to MySQL version used on Acquia/Production  FORMAT N.N (e.g. 5.7)
                            # (09/2022 this is V14.14 Dist 5.7.38-41)
  # IT IS IMPORTANT TO KEEP THE LOCAL BUILD COMPOSER VERSION THE SAME AS THIS RUNNERS COMPOSER VERSION.
  COMPOSER_VERSION: '2.3'   # MUST* match this to ver used on local dev  FORMAT N.N (e.g. 2.3)
  DB_DATABASE: 'drupal'
  DB_PASSWORD: 'drupal'   # Map the secret to an envar: Just reuse the generic action password.
#  DB_PASSWORD: ${{ secrets.BUILD_PASSWORD }}   # Map the secret to an envar: Just reuse the generic action password.
  MAJOR_VERSION: ${{ secrets.MAJOR_VERSION }}  # Map the secret to an envar: Major version (manually maintained) (e.g. 9.1)
  MINOR_VERSION: ${{ secrets.MINOR_VERSION }}  # Map the secret to an envar: Minor version incremented during deploy
  VERSION: $MAJOR_VERSION.$MINOR_VERSION

permissions:
  contents: read

jobs:
  build:
    name: "Drupal: Build and Test Deploy candidate"
    runs-on: ubuntu-18.04
#    if: ${{ github.ref_type == 'branch' && github.event_name == 'merge' }}

    steps:

      - name: Set version
        # To change the MAJOR_VERSION or MINOR_VERSION, simply update the secret in github for this repo.
        id: set-version
        run: |
          echo 'phpver=$(php -v | grep -m 1 -o "PHP [0-9]*\.[0-9]*") >> $GITHUB_ENV'
          echo 'mysqlver=$(mysql --version  | grep -m 1 -o "Distrib [0-9]*\.[0-9]*" | cut --delimiter=" "  -f2) >> $GITHUB_ENV'
          echo 'composerver=$(composer --version  | grep -o "\s[0-9]*\.[0-9]*") >> $GITHUB_ENV'
          cat $GITHUB_ENV &> out.txt && cat out.txt

      # @see https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md#php
      #  If statement compares the PHP ver installed to the ver we want, and only change if necessary.
      - name: Setup PHP
        # @see https://github.com/shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        if: ${{ env.PHP_VERSION != env.phpver }}
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:${{ env.COMPOSER_VERSION }}
          # Coverage=none b/c wo not need XDebug etc in runner.
          coverage: none

      # Checkout the repo (essentially composer.json & custom modules).
      - name: Checkout the Drupal CoB codebase
        # Checks out the branch being merged.
        #  @see https://github.com/actions/checkout#usage
        uses: actions/checkout@v3

      # Testing 1 = coding standards for custom modules.
      - name: Check coding standards
        # PHPCS should have been installed by composer.
        # Do this early, we only want to test our own custom code. Quit here if PHPCS fails.
        # script-using-phpcs-etc script need to return false if PHPCS fails.
        if: ${{ false }}
        run: |
          $SCRIPTS_PATH/phpcs.sh $GITHUB_WORKSPACE
          ./vendor/bin/phpcs --config-set installed_paths vendor/drupal/coder/coder_sniffer
          ./vendor/bin/phpcs --standard=Drupal,DrupalPractice --extensions=php,module,install,js modules/commerce_product_saleprice

      # Download Drupal core and contrib modules using composer.
      # If statement compares the Composer ver installed to the ver we want, and only change if necessary.
      #  @see https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2004-Readme.md#php (composer ver)

      - name: Check if composer.lock exists in the repo
        id: check_composer_lock
        uses: andstor/file-existence-action@v1
        with:
          files: 'composer.lock'

      - name: Get composer cache directory
        id: composer_config
        if: ${{ steps.check_composer_lock.outputs.files_exists == 'true' }}
        run: echo "::set-output name=composer_cache_dir::$(composer config cache-files-dir)"

      - name: Set up composer dependency caching for faster installs
        # This will cache the contents of the composer cache directory.
        # @see https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
        # This saves the contents of the composer cache with a key based on the composer.lock file hash. If the hash
        #  changes, then the cache is invalidated.
        uses: actions/cache@v3
        if: ${{ steps.check_composer_lock.outputs.files_exists == 'true' }}
        with:
          path: ${{ steps.composer_config.outputs.composer_cache_dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Run composer install
        # Use composer to install the core and contributed drupal modules and dependencies.
        # We already have the CoB Drupal custom modules installed via checking out the repository.
        if: ${{ steps.check_composer_lock.outputs.files_exists == 'true' }}
        run: |
          composer validate --no-check-publish
          composer install --prefer-dist --no-progress --no-interaction


      # Manage MySQL in the container.
      - name: Start the running MySQL Server.
        # Runner ubuntu-20.04 and 22.04 usess MySQL v8.
        # If the installed version is what we want, then just start the MySQL server now.
        #   @see https://github.com/mirromutth/mysql-action#shutdown-the-default-mysql
        #   @see https://ovirium.com/blog/how-to-make-mysql-work-in-your-github-actions/
        if: ${{ env.MYSQL_VERSION == env.mysqlver }}
        run: |
          sudo systemctl start mysql.service
          sleep 10

      - name: Stop the running MySQL Server.
        # Runner ubuntu-20.04 and 22.04 usess MySQL v8. So until Acquia upgrades to MySQL v8 we need to downgrade here.
        # Stop the existing service - in case it is running:
        #   @see https://github.com/mirromutth/mysql-action#shutdown-the-default-mysql
        # When we move to ubuntu-2x04 then we can just start the service here
        #   @see https://ovirium.com/blog/how-to-make-mysql-work-in-your-github-actions/
        if: ${{ env.MYSQL_VERSION != env.mysqlver }}
        run: |
          sudo systemctl stop mysql.service

      - name: Config MySQL Database
        # Runner ubuntu-20.04 and 22.04 uses MySQL v8. So until Acquia upgrades to MySQL v8 we need to downgrade here.
        #   @see https://github.com/mirromutth/mysql-action#mysql-github-action-
        # When we move to ubuntu-2x04 then we can remove this step
        uses: mirromutth/mysql-action@v1.1
#        uses: matheuspiment/mysql-action@538364b69b9afce2a3a893dd1831d574c67c9073
        if: ${{env.MYSQL_VERSION != env.mysqlver }}
        with:
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
#          container name: 'database'
          mysql version: ${{ env.MYSQL_VERSION }}
          mysql database: ${{ env.DB_DATABASE }}
          mysql user: 'drupal'
          mysql password: ${{ env.DB_PASSWORD }}


      # Install Drupal (updates database with no content).
      - name: Install Drupal
        id: drupal-install
        working-directory: ${{ github.workspace }}/docroot
        run: |
          $GITHUB_WORKSPACE/vendor/bin/drush site-install --existing-config --db-url=mysql://drupal:drupal@127.0.0.1:3306/drupal --account-name=admin --account-pass=admin --account-mail=admin@example.com -y

      - name: Import Configurations
        id: import-configs
        working-directory: ${{ github.workspace }}/docroot
        run: |
          $GITHUB_WORKSPACE/vendor/bin/drush cim -y

      - name: Run admin tasks
        id: admin-tasks
        working-directory: ${{ github.workspace }}/docroot
        run: |
          $GITHUB_WORKSPACE/vendor/bin/drush updb -y



      # Testing 2 = unit tests for Drupal site.
      - name: PHPUnit tests
        # PHPUnit should have been installed by composer.
        if: ${{ false }}
        run: |
          $SCRIPTS_PATH/phpUnit.sh $GITHUB_WORKSPACE

      # Create and save release candidate.
      - name: Create deploy candidate
        # Script which makes a release candidate folder copies just the files that would be deployed to Acquia.
        # Make into ${{ github.workspace }}/release_candidate
        run: |
          $SCRIPTS_PATH/release_candidate.sh $GITHUB_WORKSPACE $RELEASE_CANDIDATE_PATH

      - name: Upload deploy candidate artifact.
        # This saves the candidate (which ultimately gets inserted into acquia) for use during the deployment.
        uses: actions/upload-artifact@v3
        with:
          name: release-candidate-$GITHUB_REF_NAME-$VERSION
          path: $RELEASE_CANDIDATE_PATH
