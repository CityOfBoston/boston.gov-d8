<?php

/**
 * @file
 * Provides a test component page entity type.
 */

use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function test_component_page_theme() {
  return [
    'node__test_component_page' => [
      'render element' => 'elements',
      'base_hook' => 'node',
    ],
    'field__node__body__test_component_page' => [
      'base_hook' => 'field',
      'path' => 'modules/custom/bos_content/modules/test_component_page/templates',
    ],
    'region__no_wrapper' => [
      'base_hook' => 'region',
      'path' => 'themes/custom/bos_theme/templates/layout',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function test_component_page_preprocess_page(&$variables) {
  $variables['hide_page_title'] = TRUE;
}

/**
 * Prepares variables for test component page templates.
 *
 * Default template: test-component-page.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the test component page
 *     information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_node__test_component_page(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables["sub_nav"] = _bos_theme_findsvg('subnav-toggle.svg');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function test_component_page_preprocess_field(&$variables) {
  if (!isset($variables["element"]['#bundle'])) {
    return;
  }
  if ($variables["element"]['#bundle'] == 'test_component_page' && $variables["field_type"] == "entity_reference_revisions") {
    $variables["label_hidden"] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function test_component_page_preprocess_field__field_components(&$variables) {

  $variables['#attached']['library'][] = "bos_components/field.style";
  $variables["attributes"]["class"][] = "paragraphs-items-field-components";

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function test_component_page_theme_suggestions_region_alter(array &$suggestions, array $variables) {
  if ($variables["elements"]["#region"] == "content") {
    $active_theme = \Drupal::service('theme.manager')->getActiveTheme();
    if ($active_theme->getName() == "bos_theme") {
      $suggestions[] = "region__no_wrapper";
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function test_component_page_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if ($variables["elements"]["#id"] == "mainpagecontent") {
    $suggestions[] = "block__no_wrapper";
  }
}
