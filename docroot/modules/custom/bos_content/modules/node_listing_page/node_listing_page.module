<?php

/**
 * @file
 * Provides a listing page entity type.
 */

use Drupal\bos_core\BackgroundResponsiveImage;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function node_listing_page_theme() {
  return [
    'node__listing_page' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for event templates.
 *
 * Default template: event.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the event information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_node__listing_page(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  // Handle intro_image if present.
  // Has to happen in this template_preprocess_hook or does not #attach(ed).
  if (isset($variables['content']['field_intro_image'])) {
    $background_image = $variables["elements"]["field_intro_image"];
    switch ($variables["elements"]["#view_mode"]) {
      case "featured_item":
        break;

      default:
        if (isset($background_image["#items"]) && $background_image["#items"]->count()) {
          $photo_id = Html::getUniqueId('hro');
          $variables['paragraph']->_photo_id = $photo_id;
          $variables['photo_id'] = $photo_id;
          $css = BackgroundResponsiveImage::createBackgroundCss($background_image, ".$photo_id");
          $variables['#attached']['html_head'][] = [
            [
              "#tag" => "style",
              "#value" => $css,
              "#weight" => 100,
            ],
            'listing-page-intro-image-css',
          ];
        }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_listing_page_preprocess_page(&$variables) {
  if (!isset($variables["node"]) || (isset($variables["node"]) && is_object($variables['node']) && $variables["node"]->bundle() != "listing_page")) {
    return;
  }

  // Now make and render the Intro_image block.
  $variables['header_image'] = FALSE;
  if (isset($variables['content']['field_intro_image']) && $variables["node"]->get('field_intro_image')->count()) {
    $variables['header_image'] = TRUE;
    _bos_content_fix_attributes($variables);
    $variables["attributes"]->addClass("mn");
    $variables["attributes"]->setAttribute("id", "page");
    $nestedElement = [
      ["div" => "b b--fw b--fw--480"],
      ["div" => $variables['photo_id'] . "hro hro--pt hro--pb"],
    ];
    $variables["content"]["intro_image"] = BackgroundResponsiveImage::createBackgroundFramework($nestedElement);
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_listing_page_preprocess_paragraph__header_text(&$variables) {

}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_listing_page_preprocess_node__listing_page(&$variables) {
  _bos_theme_fix_attributes($variables);
  $variables['attributes']->addClass("desktop-100");
  $variables['attributes']->addClass("clearfix");
  $variables['attributes']->setAttribute("id", "node-" . $variables['elements']['#node']->id());
}
