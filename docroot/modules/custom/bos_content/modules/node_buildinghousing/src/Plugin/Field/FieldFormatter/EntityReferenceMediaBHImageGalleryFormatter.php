<?php

namespace Drupal\node_buildinghousing\Plugin\Field\FieldFormatter;

use Drupal\Core\Url;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\Plugin\Field\FieldFormatter\EntityReferenceFormatterBase;
use phpDocumentor\Reflection\Types\Parent_;

/**
 * Plugin implementation of the 'entity reference Media Building Housing Image Gallery' formatter.
 *
 * @FieldFormatter(
 *   id = "entity_reference_bh_image_gallery",
 *   label = @Translation("Building Housing Image Gallery"),
 *   description = @Translation("Display related Media Images in a Photo Gallery"),
 *   field_types = {
 *     "entity_reference"
 *   }
 * )
 */
class EntityReferenceMediaBHImageGalleryFormatter extends EntityReferenceFormatterBase {

  /**
   * {@inheritdoc}
   *
   * @param array $entities_items
   *   Array of Entities.
   */
  public function prepareView(array $entities_items) {
    // TODO: Change the autogenerated stub.
    parent::prepareView($entities_items);
  }

  /**
   * {@inheritdoc}
   */
  public function viewElements(FieldItemListInterface $items, $langcode) {
    $elements = [];

    $builder = \Drupal::entityTypeManager()->getViewBuilder('media');

    $images = $items->referencedEntities();

    if (!$images) {
      return $elements;
    }

    $imageItems = array_shift($images)->get('image');

    foreach ($images as $delta => $image) {
      $imageItems->appendItem($image->get('image')->getValue()[0]);
    }

    $elements[] = $builder->viewField($imageItems, [
      'type' => 'colorbox',
      'label' => 'hidden',
      'settings' => [
        'colorbox_node_style' => 'hide',
        'colorbox_node_style_first' => 'card_grid_2w_vertical_1x',
        'colorbox_image_style' => 'large',
        'colorbox_gallery' => 'page',
        'colorbox_gallery_custom' => '',
        'colorbox_caption' => 'title',
        'colorbox_caption_custom' => '',
      ],
    ]);

    // array_unshift($elements[0][0], ['#markup' => '<div class="t--subinfo">3</div>']);.

    $mainImage = [
      '#type' => 'container',
      '#attributes' => [
        'class' => [
          'main-photo-container',
        ],
      ],
    ];

    $mainImage['photo'] = $elements[0][0];
    // $mainImage['countOverlay'] = [
    // '#type' => 'html_tag',
    // '#tag' => 'h4',
    // '#value' => t('3+ Photos'),
    // '#attributes' => [
    // 'class' => [
    // 'main-photo-overlay',
    // ],
    // ],
    // ];

    $elements[0][0] = $mainImage;

    return $elements;
  }

  /**
   * {@inheritdoc}
   */
  public static function isApplicable(FieldDefinitionInterface $field_definition) {
    // This formatter is only available for taxonomy terms.
    $isMedia = $field_definition->getFieldStorageDefinition()->getSetting('target_type') == 'media';
    $isNode = $field_definition->getTargetEntityTypeId();
    $isBHProject = $field_definition->getTargetBundle();

    if ($isMedia && $isNode && $isBHProject) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }

}
