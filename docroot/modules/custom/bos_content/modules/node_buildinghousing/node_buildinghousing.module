<?php

/**
 * @file
 * Contains node_buildinghousing.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\NodeType;
use Drupal\views\ViewExecutable;
use Drupal\node_buildinghousing\BuildingHousingUtils;

/**
 * Implements hook_help().
 */
function node_buildinghousing_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the node_buildinghousing module.
    case 'help.page.node_buildinghousing':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Building Housing Entities and Features') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function node_buildinghousing_theme()
{
  return [
    'node_buildinghousing' => [
      'render element' => 'children',
    ],
    'bh_project_type' => [
      'template' => 'snippets/bh-project-type',
      'variables' => [
        "label" => NULL,
        "body" => NULL,
        "icon" => NULL,
        "bgColor" => '#091f2f',
      ],
    ],
    'bh_project_manager_contact' => [
      'template' => 'snippets/bh-project-manager-contact',
      'variables' => [
        "title" => t("Get In Touch"),
        "label" => t("Project Manager"),
        "name" => NULL,
        "email" => NULL,
        "phone" => NULL,
        "classes" => NULL,
      ],
    ],
    'bh_project_meeting_notice' => [
      'template' => 'snippets/bh-project-meeting-notice',
      'variables' => [
        "title" => t("Community Meeting"),
        "dateString" => NULL,
        "detailsLink" => NULL,
        "idForAddToCal" => NULL,
        "classes" => NULL,
      ],
    ],
    'bh_project_timeline' => [
      'template' => 'snippets/bh-project-timeline',
      'variables' => [
        "label" => NULL,
        "body" => NULL,
        "icon" => NULL,
        "bgColor" => '#091f2f',
      ],
    ],
    'bh_project_timeline_moment' => [
      'template' => 'snippets/bh-project-timeline-moment',
      'variables' => [
        "label" => NULL,
        "body" => NULL,
        "icon" => NULL,
        "date" => NULL,
        "currentState" => NULL,
        "bgColor" => '#091f2f',
      ],
    ],
    'bh_project_timeline_meeting' => [
      'template' => 'snippets/bh-project-timeline-meeting',
      'variables' => [
        "label" => NULL,
        "title" => NULL,
        "body" => NULL,
        "icon" => NULL,
        "date" => NULL,
        "time" => NULL,
        "link" => NULL,
        "currentState" => 'present',
        "addToCal" => NULL,
      ],
    ],
    'bh_project_timeline_text' => [
      'template' => 'snippets/bh-project-timeline-text',
      'variables' => [
        "label" => NULL,
        "body" => NULL,
        "icon" => NULL,
        "date" => NULL,
        "currentState" => 'present',
      ],
    ],
    'bh_project_timeline_document' => [
      'template' => 'snippets/bh-project-timeline-document',
      'variables' => [
        "label" => NULL,
        "link" => NULL,
        "icon" => NULL,
        "date" => NULL,
        "currentState" => 'present',
      ],
    ],

    'bh_icons' => [
      'template' => 'snippets/bh-icons.svg',
      'variables' => [
        'type' => 'triple-decker',
        'title' => NULL,
        'width' => NULL,
        'height' => NULL,
        'viewBox' => NULL,
        'fill' => "none",
      ],
    ],
  ];
}

function node_buildinghousing_preprocess_page(array &$variables)
{
  if (isset($variables['node']) && !is_string($variables['node']) && $variables['node']->bundle() == 'bh_project') {
    $variables['#attached']['library'][] = 'node_buildinghousing/buildinghousing_project';
    $variables['attributes']['class'][] = 'mn';
  }
}

/**
 * Implements hook_views_pre_render().
 */
function node_buildinghousing_views_pre_render(ViewExecutable $view)
{
  if (isset($view) && (($view->storage->id() == 'building_housing') || ($view->storage->id() == 'bhmaps'))) {
    $view->element['#attached']['library'][] = 'node_buildinghousing/buildinghousing_views';

    //$variables['attributes']['class'][] = 'mn';

    $cssClass = 'view-id-' . $view->id() . ' view-display-id-' . $view->current_display;
    if ($view->storage->id() == 'bhmaps' && $view->current_display == 'livemap') {
      $cssClass = $cssClass . ' b b--fw';
    }
    if ($view->storage->id() == 'bhmaps' && $view->current_display == 'maplist') {
      $cssClass = $cssClass . '';
    }
    $view->display_handler->setOption('css_class', $cssClass);
  }
}


function node_buildinghousing_entity_presave(Drupal\Core\Entity\EntityInterface $entity)
{
  if ($entity && $entity->getEntityType()->id() == 'node' && $entity->getType() == 'bh_project') {


    $bhUtils = new \Drupal\node_buildinghousing\BuildingHousingUtils();

    $publicStage = $bhUtils->setPublicStage($entity);

    //$streetViewPhoto = $bhUtils->setStreetViewPhoto($entity);


  }


}


/**
 * Implements hook_preprocess_HOOK().
 */
function node_buildinghousing_preprocess_field(&$variables)
{

  if ($variables['element']['#bundle'] == 'bh_project') {
    $fieldName = $variables['field_name'] ?? null;
    $project = $variables['element']['#object'] ?? null;
    $projectType = _node_buildinghousing_get_computed_project_type($project)['label'] ?? null;
    $hidden = false;

    switch ($fieldName) {
      case 'field_bh_total_num_units':
      case 'field_bh_units_for_rent':
      case 'field_bh_units_to_own':
      case 'field_bh_units_affordable':
      case 'field_bh_units_total':
        if ($projectType != 'Housing') {
          $hidden = true;
        }
      case 'field_bh_property_size':

        $value = $variables['items'][0]['content']['#markup'] ?? null;

        if (empty($value)) {
          $value = t('To Be Determined');
        } elseif (is_numeric($value) && $value <= 10 && $value != 0) {
          //@TODO: Change out the language for the selected site language.
          $numberFormatter = new NumberFormatter("en", NumberFormatter::SPELLOUT);
          $value = ucfirst($numberFormatter->format($value));
        }


        if ($fieldDescription = $project->getFieldDefinition($fieldName)->get('description')) {
          //@TODO: Add in the field description as a tooltip to the label, may need to do in a template :/
          //$variables['label'] = '<div>' . $variables['label'] . ' - ' . '<span class="bh-tooltip">' . $fieldDescription . '</span></div>';
        }

        $variables['items'][0]['content']['#markup'] = $value;

        break;
    }

    if ($hidden == true) {
      $variables['items'] = [];
      $variables['label_hidden'] = true;
    }

  }

}

function node_buildinghousing_entity_extra_field_info()
{
  $extraFields = [];

  foreach (NodeType::loadMultiple() as $bundle) {

    if ($bundle->id() == 'bh_project') {
      $extraFields['node'][$bundle->id()]['display']['bh_computed_project_type'] = [
        'label' => t('Computed Project Type'),
        'weight' => 100,
        'visible' => TRUE,
      ];

      $extraFields['node'][$bundle->id()]['display']['bh_project_manager_contact'] = [
        'label' => t('Project Manager Contact Information'),
        'weight' => 100,
        'visible' => TRUE,
      ];

      $extraFields['node'][$bundle->id()]['display']['bh_project_meeting_notice'] = [
        'label' => t('Project Meeting Notice'),
        'weight' => 100,
        'visible' => TRUE,
      ];
    }
  }

  return $extraFields;
}

function node_buildinghousing_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode)
{

  if ($display->getComponent('bh_computed_project_type')) {
    $build['bh_computed_project_type'] = _node_buildinghousing_build_render_computed_project_type($entity);
  }

  if ($display->getComponent('bh_project_manager_contact')) {
    $build['bh_project_manager_contact'] = _node_buildinghousing_build_render_project_manager_contact($entity);

  }

  if ($display->getComponent('bh_project_meeting_notice')) {
    $build['bh_project_meeting_notice'] = _node_buildinghousing_build_render_project_meeting_notice($entity);

  }

}

function _node_buildinghousing_build_render_project_meeting_notice($entity)
{
  $render = [];

  return [];

  $vars = [
    'classes' => [
      'icon' => 'icon-location',
      'label' => 'detail-item--secondary grid-card__title',
      'body' => 'detail-item__body--tertiary',
      'detail' => 'detail-item--middle m-v300 grid-card__title',
    ],
  ];

//  $vars['title'] = t("Community Meeting"); //@TODO: Can this be the Event Type?
  $vars['dateString'] = "Tuesday December 15 2020 | 6-8PM";
  $vars['detailsLink'] = "/events";
  $vars['idForAddToCall'] = "";

  $render = ['#markup' => \Drupal::theme()->render("bh_project_meeting_notice", $vars)];

  return $render;

}


function _node_buildinghousing_build_render_project_manager_contact($entity)
{
  $render = [];

  $vars = [
    'classes' => [
      'icon' => 'icon-location',
      'label' => 'detail-item--secondary grid-card__title',
      'body' => 'detail-item__body--tertiary',
      'detail' => 'detail-item--middle m-v300 grid-card__title',
    ],
  ];

  $vars['name'] = $entity->get('field_bh_project_manager_name')->value;
  $vars['email'] = $entity->get('field_project_manager_email')->value;
  $vars['phone'] = $entity->get('field_bh_project_manger_phone')->value;

  if (empty($vars['name']) || empty($vars['phone']) || empty($vars['email'])) {
    $vars['name'] = t("To inquire about this parcel, contact the Department of Neighborhood Development (DND).");
    $vars['email'] = "dnd email address"; //@TODO: change out with correct email address
    $vars['phone'] = "617-635-3880";
    $vars['label'] = null;
  }


  $render = ['#markup' => \Drupal::theme()->render("bh_project_manager_contact", $vars)];

  return $render;
}

function _node_buildinghousing_build_render_computed_project_type($entity)
{
  $render = [];

  $computedProjectType = _node_buildinghousing_get_computed_project_type($entity);

  if ($computedProjectType) {
    $vars = [
      'classes' => [
        'icon' => 'icon-location',
        'label' => 'detail-item--secondary grid-card__title',
        'body' => 'detail-item__body--tertiary',
        'detail' => 'detail-item--middle m-v300 grid-card__title',
      ],
    ];

    $vars['label'] = $computedProjectType['label'] ?? null;
    $vars['body'] = $computedProjectType['body'] ?? null;
    $vars['title'] = t('What are we building?');
    $vars['bgColor'] = $computedProjectType['bgColor'] ?? '#091f2f';
    $vars['icon'] = $computedProjectType['icon'] ?? null;

    $render = ['#markup' => \Drupal::theme()->render("bh_project_type", $vars)];

    return $render;

  }
}


function _node_buildinghousing_get_computed_project_type($entity)
{
  $data = [];
  $mainType = null;
  $subType = null;

  $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

  if ($dispositionTypeId = $entity->get('field_bh_disposition_type')->target_id) {
    $dispositionTypeParents = $termStorage->loadAllParents($dispositionTypeId);

    $mainType = !empty($dispositionTypeParents) ? array_pop($dispositionTypeParents) : null;
    $subType = !empty($dispositionTypeParents) ? array_pop($dispositionTypeParents) : null;
  }

  if ($projectTypeId = $entity->get('field_bh_project_type')->target_id) {
    $projectTypeParents = $termStorage->loadAllParents($projectTypeId);

    if ($mainType->getName() == 'Housing' || empty($mainType)) {
      $mainType = 'Housing';
      $subType = !empty($projectTypeParents) ? array_pop($projectTypeParents) : null;
    }
  }


  if ($mainType) {
    $data['label'] = is_string($mainType) ? $mainType : $mainType->getName();
  }

  if ($subType) {
    $subType = $subType->getName();
    if ($subType == 'Mixed Use - Assisted' || $subType == 'Mixed Use - Market') {
      $data['body'] = 'Mixed Use';
    } elseif ($subType != 'N/A') {
      $data['body'] = $subType;
    }
  }


  $iconType = 'house';

  //@TODO: Change all of this out for a color field on the Tax Terms
  switch ($data['label']) {
    case "Other":
      $data['bgColor'] = '#FFC608';
      $iconType = 'building';
      break;
    case "Open Space":
      $data['bgColor'] = '#58B754';
      $iconType = 'tree';
      break;
    case "Business":
      $data['bgColor'] = '#45789C';
      if ($subType == 'Parking') {
        $iconType = 'parking';
      } else {
        $iconType = 'shopping';
      }
      break;
    default:
      $iconType = 'house';
      break;

  }

//  $data['icon'] = ['#markup' => \Drupal::theme()->render("bh_icons", ['type' => 'triple-decker'])];
  $data['icon'] = \Drupal::theme()->render("bh_icons", ['type' => $iconType]);

  return $data;
}
