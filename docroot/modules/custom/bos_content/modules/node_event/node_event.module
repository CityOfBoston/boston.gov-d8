<?php

/**
 * @file
 * Provides an node_event entity type.
 */

use Drupal\Core\Render\Markup;
use Drupal\Core\Render\Element;
use Drupal\bos_core\BackgroundResponsiveImage;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme().
 */
function node_event_theme() {
  return [
    'event' => [
      'render element' => 'elements',
    ],
    'node__event' => [
      'render element' => 'elements',
      'base_hook' => 'node',
    ],
    'node__event__featured_item' => [
      'base hook' => 'node',
    ],
    'field__node__field_event_type__event' => [
      'base_hook' => 'field',
    ],
    'detail_item' => [
      'template' => 'snippets/detail-item',
      'variables' => [
        "label" => NULL,
        "body" => NULL,
        "image" => NULL,
        "classes" => NULL,
      ],
    ],
  ];
}

/**
 * Prepares variables for event templates.
 *
 * Default template: event.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the event information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_node__event(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_event_preprocess_page(&$variables) {
  _bos_components_fix_attributes($variables);

  if (function_exists("_bos_theme_has_header")) {
    _bos_theme_has_header($variables);
  }
  elseif (isset($variables['node']) && is_object($variables['node'])) {
    $variables['cob']['header_image'] = ($variables['node']->hasField('field_intro_image')
      && $variables['node']->get('field_intro_image')->count());
  }

  if (NULL != ($node = $variables["node"] ?? NULL)) {
    if (is_numeric($node)) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($node);
    }
    if ($node->bundle() == "event") {
      // Determine if this is an edit page or a display page.
      $pathinfo = Drupal::request()->getPathInfo();
      $pathinfo = explode("/", $pathinfo);
      if (end($pathinfo) != "edit" && end($pathinfo) != "revisions") {
        _bos_components_fix_attributes($variables);
        // Start by adding id page to all nodes.
        $variables["attributes"]->setAttribute("id", "page");
        // Make responsive to menu appearing on right by adding class mn.
        $variables["attributes"]->addClass("mn");
        $variables["attributes"]->addClass("page--wa");

        // If there is a header then add a page class to relocate main body.
        if ($variables['cob']['header_image']) {
          $variables["attributes"]->addClass("page");
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_event_preprocess_node__event(&$variables) {
  _bos_theme_fix_attributes($variables);
  if (!empty($variables['attributes'])) {
    $variables['attributes']->addClass('desktop-100');
  }

  $vars = [
    'classes' => [
      'icon' => 'icon-time',
      'label' => 'detail-item--secondary',
      'body' => 'detail-item__body--tertiary',
      'detail' => 'detail-item--middle',
    ],
  ];
  // Render the time element of the event date into a detail_item.
  if (isset($variables["content"]["field_date_range"]["#object"])) {
    // TODO: test when multiple dates. (in twig node-event.html.twig)
    $event_date = $variables['elements']['#node']->field_date_range[0]->value;
    // All dates stored in UTC in DB.
    $event_date = strtotime($event_date . " +0000");
    $vars["label"] = \Drupal::service('date.formatter')->format($event_date, "date_format_calendar_time", "", drupal_get_user_timezone());

    if (!empty($variables['elements']['#node']->field_date_range[0]->end_value)) {
      $event_end_date = $variables['elements']['#node']->field_date_range[0]->end_value;
      $event_end_date = strtotime($event_end_date . " +0000");
      $vars["label"] .= " - " . \Drupal::service('date.formatter')
        ->format($event_end_date, "date_format_calendar_time", "", drupal_get_user_timezone());
    }
    $variables["content"]["field_event_times"] = Drupal::theme()->render("detail_item", $vars);
  }

  $vars = [
    'classes' => [
      'label' => 'detail-item--left',
      'body' => 'detail-item--secondary',
      'detail' => 'detail-item--secondary',
    ],
  ];

  // Render the cost into a details_item.
  if (isset($variables["content"]["field_cost"]["#title"])) {
    $vars["label"] = $variables["content"]["field_cost"]["#title"] . ":";
    $vars["body"] = $variables["content"]["field_cost"];
    $variables["content"]["cost"] = Drupal::theme()->render("detail_item", $vars);
  }
  else {
    $vars["label"] = "Price:";
    $vars["body"] = Markup::create('<div class="detail-item__body detail-item__body--secondary field-item">FREE</div>');
    $variables["content"]["cost"] = Drupal::theme()->render("detail_item", $vars);
  }

  // Render the event_contact into a details_item.
  if (isset($variables["content"]["field_event_contact"]["#title"])) {
    $vars["label"] = $variables["content"]["field_event_contact"]["#title"] . ":";
    $vars["body"] = $variables["content"]["field_event_contact"];
    $variables["content"]["field_event_contact"] = Drupal::theme()
      ->render("detail_item", $vars);
  }
  else {
    unset($variables["content"]["field_event_contact"]);
  }

  if (!isset($variables["content"]["field_event_type"]["#title"])) {
    unset($variables["content"]["field_event_type"]);
  }

  // Render the published_date into a details_item.
  if (isset($variables["content"]["field_published_date"]["#title"])) {
    $vars["label"] = "Posted:";
    $vars["body"] = $variables["content"]["field_published_date"];
    $variables["content"]["field_published_date"] = Drupal::theme()
      ->render("detail_item", $vars);
  }
  else {
    unset($variables["content"]["field_published_date"]);
  }

  // Render the field_multiple_neighborhoods into a details_item.
  if (isset($variables["content"]["field_multiple_neighborhoods"]["#items"])) {
    $vars["label"] = $variables["content"]["field_multiple_neighborhoods"]["#title"] . ":";
    $vars["body"] = $variables["content"]["field_multiple_neighborhoods"];
    $variables["content"]["field_multiple_neighborhoods"] = Drupal::theme()
      ->render("detail_item", $vars);
  }
  else {
    unset($variables["content"]["field_multiple_neighborhoods"]);
  }

  // Render the downloads (field_links) into a details_item.
  if (isset($variables["content"]["field_links"]["#title"])) {
    $vars["label"] = $variables["content"]["field_links"]["#title"] . ":";
    $vars["body"] = $variables["content"]["field_links"];
    $variables["content"]["field_links"] = Drupal::theme()
      ->render("detail_item", $vars);
  }
  else {
    unset($variables["content"]["field_links"]);
  }

  // Check for cancelled state.
  $node = $variables['elements']['#node'];
  if ($node->hasField("field_cancelled")) {
    $variables["is_cancelled"] = ($node->field_cancelled->value == "1");
  }

  // Now make and render the Intro_image block.
  if (isset($variables["elements"]["field_intro_image"]["#items"]) && $variables["elements"]["field_intro_image"]["#items"]->count()) {
    $background_image = $variables["elements"]["field_intro_image"];
    $background_image[0]["default_responsive_image_style_id"] = "intro_image_fields";
    $photo_id = Html::getUniqueId('hro');
    $css = BackgroundResponsiveImage::createBackgroundCss($background_image, ".$photo_id");
    $variables['#attached']['html_head'][] = [
      [
        "#tag" => "style",
        "#value" => $css,
        "#weight" => 100,
      ],
      'event-intro-image-css',
    ];

    $nestedElement = [
      ["div" => "hero-image b b--fw b--fw--480"],
      ["div" => "hro $photo_id hro--pt hro--pb"],
    ];
    $variables["content"]["intro_image"] = BackgroundResponsiveImage::createBackgroundFramework($nestedElement);

    if (!empty($variables['attributes'])) {
      $variables["attributes"]->addClass("with-hero");
    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_event_preprocess_node__event__featured_item(&$variables) {
  _bos_components_fix_attributes($variables);
  $variables['attributes']->addClass("contextual-region");
  $variables['attributes']->addClass("event-featured-item-wrapper");
  $variables['attributes']->addClass("mobile-1-col");
  $variables['attributes']->addClass("clearfix");
  $variables['attributes']->setAttribute("id", "node-" . $variables['elements']["#node"]->id());
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_event_preprocess_field__field_address(&$variables) {
  // Hide the country field in the address.
  if ($variables["element"]["#bundle"] != "event") {
    return;
  }
  if (isset($variables["items"])) {
    foreach ($variables["items"] as $key => &$item) {
      $item["content"]["country"]["#attributes"]["class"][] = "hidden";
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_event_preprocess_field_multiple_value_form(array &$variables) {
  _bos_core_rename_multiple_button($variables, "event", [
    "field_contacts" => "Add another department",
    "field_related" => "Add more related content",
  ]);
}
