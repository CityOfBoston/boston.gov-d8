<?php

/**
 * @file
 * Provides an node_event entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function node_event_theme() {
  return [
    'event' => [
      'render element' => 'elements',
    ],
    'node__event' => [
      'render element' => 'elements',
      'base_hook' => 'node',
    ],
    'field__node__field_event_type__event' => [
      'base_hook' => 'field',
    ],
    'detail_item' => [
      'template' => 'snippets/detail-item',
      'variables' => [
        "label" => NULL,
        "body" => NULL,
        "image" => NULL,
        "classes" => NULL,
      ],
    ],
  ];
}

/**
 * Prepares variables for event templates.
 *
 * Default template: event.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the event information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_node__event(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_event_preprocess_node__event(&$variables) {
  _bos_theme_fix_attributes($variables);
  $variables['attributes']->addClass('desktop-100');

  $vars = [
    'classes' => [
      'icon' => 'icon-time',
      'label' => 'detail-item--secondary',
      'body' => 'detail-item__body--tertiary',
      'detail' => 'detail-item--middle',
    ],
  ];
  // Render the time element of the event date into a detail_item.
  if (isset($variables["content"]["field_event_dates"])) {
    // TODO: test when multiple dates. (in twig node-event.html.twig)
    $event_date = $variables["content"]["field_event_dates"]["#object"]->field_event_dates->first()->value;
    // All dates stored in UTC in DB.
    $event_date = strtotime($event_date . " +0000");
    $event_date = \Drupal::service('date.formatter')->format($event_date, "date_format_calendar_time", "", drupal_get_user_timezone());
    $vars["label"] = $event_date;
    $variables["content"]["field_event_times"] = Drupal::theme()->render("detail_item", $vars);
  }

  $vars = [
    'classes' => [
      'label' => 'detail-item--left',
      'body' => 'detail-item--secondary',
      'detail' => 'detail-item--secondary',
    ],
  ];

  // Render the cost into a details_item.
  if (isset($variables["content"]["field_cost"])) {
    $vars["label"] = $variables["content"]["field_cost"]["#title"] . ":";
    $vars["body"] = $variables["content"]["field_cost"];
    $variables["content"]["cost"] = Drupal::theme()->render("detail_item", $vars);
  }

  // Render the event_contact into a details_item.
  if (isset($variables["content"]["field_event_contact"])) {
    $vars["label"] = $variables["content"]["field_event_contact"]["#title"] . ":";
    $vars["body"] = $variables["content"]["field_event_contact"];
    $variables["content"]["field_event_contact"] = Drupal::theme()
      ->render("detail_item", $vars);
  }

  // Render the published_date into a details_item.
  if (isset($variables["content"]["field_published_date"])) {
    $vars["label"] = "Posted:";
    $vars["body"] = $variables["content"]["field_published_date"];
    $variables["content"]["field_published_date"] = Drupal::theme()
      ->render("detail_item", $vars);
  }

  // Render the event_type into a details_item.
  if (isset($variables["content"]["field_multiple_neighborhoods"])) {
    $vars["label"] = $variables["content"]["field_multiple_neighborhoods"]["#title"] . ":";
    $vars["body"] = $variables["content"]["field_multiple_neighborhoods"];
    $variables["content"]["field_multiple_neighborhoods"] = Drupal::theme()
      ->render("detail_item", $vars);
  }

  // Render the downloads (field_links) into a details_item.
  if (isset($variables["content"]["field_links"])) {
    $vars["label"] = $variables["content"]["field_links"]["#title"] . ":";
    $vars["body"] = $variables["content"]["field_links"];
    $variables["content"]["field_links"] = Drupal::theme()
      ->render("detail_item", $vars);
  }

  if (!empty($variables["content"]["field_city_hall"])) {
    // TODO: Ajax back to get the address for CityHall.
  }
}

/**
 * Implements hook_form_alter().
 */
function node_event_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == "node_event_form" || $form_id == "node_event_edit_form") {
    $form["field_city_hall"]["widget"]["value"]["#ajax"] = [
      'callback' => 'node_event_city_hall_ajax_callback',
      'event' => 'change',
      'wrapper' => 'edit-field-address-wrapper',
      'progress' => [
        'type' => 'throbber',
        'message' => t('Updating...'),
      ],
    ];
  }
}

/**
 * Callback when clicking the "Event is at City Hall checkbox".
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form_state.
 *
 * @return mixed
 *   The location element.
 */
function node_event_city_hall_ajax_callback(array &$form, FormStateInterface $form_state) {
  $city_hall = [
    "address_line1" => "1 City Hall Square",
    "address_line2" => "",
    "locality" => "Boston",
    "state" => "Massachusetts",
    "postal_code" => "02201-2006",
    "country" => "US",
  ];
  $elem = $form["field_address"];
  $elem["#id"] = $elem["#wrapper_id"] = "edit-field-address-wrapper";
  $history = [];
  if ($form_state->getValue("field_city_hall")["value"]) {
    if (!empty($form_state->getValue("field_address")[0]["address"]["address_line1"])) {
      $history["address_line1"] = $form_state->getValue("field_address")[0]["address"]["address_line1"];
      $history["address_line2"] = $form_state->getValue("field_address")[0]["address"]["address_line2"];
      $history["locality"] = $form_state->getValue("field_address")[0]["address"]["locality"];
      $history["administrative_area"] = $form_state->getValue("field_address")[0]["address"]["administrative_area"];
      $history["postal_code"] = $form_state->getValue("field_address")[0]["address"]["postal_code"];
      $elem["cob_history"] = [
        "#id" => "cob_history",
        "#attributes" => ["id" => "cob_history", "name" => "cob_history"],
        "#type" => "hidden",
        "#value" => json_encode($history),
      ];
    }
    $elem["widget"][0]["address"]["address_line1"]["#value"] = $city_hall["address_line1"];
    $elem["widget"][0]["address"]["address_line2"]["#value"] = $city_hall["address_line2"];
    $elem["widget"][0]["address"]["locality"]["#value"] = $city_hall["locality"];
    $elem["widget"][0]["address"]["postal_code"]["#value"] = $city_hall["postal_code"];
    $elem["widget"][0]["address"]["country_code"]["#value"] = $city_hall["country_code"];
  }
  else {
    // Restore saved values.
    if (NULL != Drupal::request()->request) {
      if (NULL != $history = Drupal::request()->request->get("cob_history")) {
        $history = (array) json_decode($history);
        $elem["widget"][0]["address"]["address_line1"]["#value"] = $history["address_line1"];
        $elem["widget"][0]["address"]["address_line2"]["#value"] = $history["address_line2"];
        $elem["widget"][0]["address"]["locality"]["#value"] = $history["locality"];
        $elem["widget"][0]["address"]["administrative_area"]["#value"] = $history["administrative_area"];
        $elem["widget"][0]["address"]["postal_code"]["#value"] = $history["postal_code"];
      }
    }
    else {
      $elem["widget"][0]["address"]["country_code"]["#value"] = "US";
    }
    if (isset($elem["cob_history"])) {
      unset($elem["cob_history"]);
    }
  }
  return $elem;
}
