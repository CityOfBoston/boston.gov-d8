<?php

/**
 * @file
 * Provides a node_post entity type.
 */

use Drupal\bos_core\BackgroundResponsiveImage;
use Drupal\Core\Render\Element;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme().
 */
function node_post_theme() {
  return [
    'node__post' => [
      'render element' => 'elements',
      'base hook' => 'node',
    ],
    'node__post__listing' => [
      'base' => 'node',
    ],
    'node__post__featured_item' => [
      'base hook' => 'node',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_post_preprocess_node__post(&$variables) {
  _bos_components_fix_attributes($variables);
  $variables['attributes']->addClass("desktop-100");
  $variables['attributes']->setAttribute("id", "node-" . $variables['elements']["#node"]->id());

  // Handle intro_image if present.
  if (isset($variables["elements"]["field_intro_image"])) {
    $background_image = $variables["elements"]["field_intro_image"];

    if (isset($background_image["#items"]) && $background_image["#items"]->count()) {
      $background_image[0]["default_responsive_image_style_id"] = "intro_image_fields";
      $photo_id = Html::getUniqueId('hro');
      $css = BackgroundResponsiveImage::createBackgroundCss($background_image, ".$photo_id");
      $variables['#attached']['html_head'][] = [
        [
          "#tag" => "style",
          "#value" => $css,
          "#weight" => 100,
        ],
        'post-intro-image-css-' . $photo_id,
      ];
      $nestedElement = [
        ["div" => "hero-image b b--fw b--fw--480"],
        ["div" => "hro $photo_id hro--pt hro--pb"],
      ];
      $variables["content"]["intro_image"] = BackgroundResponsiveImage::createBackgroundFramework($nestedElement);
    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_post_preprocess_node__post__featured_item(&$variables) {
  _bos_components_fix_attributes($variables);
  $variables['attributes']->addClass("post-featured-item-wrapper");
  $variables['attributes']->addClass("mobile-1-col");
  $variables['attributes']->addClass("clearfix");
  $variables['attributes']->setAttribute("id", "node-" . $variables['elements']["#node"]->id());
}

/**
 * Implements hook_rebuild().
 */
function node_post_rebuild() {
  // Install the default background image.
  // Copy rather than move so we dont get git issues.
  $modName = basename(__FILE__, ".module");
  $modulePath = drupal::root() . '/' . drupal_get_path("module", $modName);
  $path = drupal::root() . "/sites/default/files/img/post/";
  $destName = "default_news.svg";
  if (!file_exists($path)) {
    mkdir($path, 0777, TRUE);
  }
  if (file_exists($path . $destName)) {
    unlink($path . $destName);
  }
  copy($modulePath . "/default_news.svg", $path . $destName);

  // Check if the file exists that is listed in para.para_type.module.yml.
  $filesystem = \Drupal::service('file_system');
  $entity = str_replace("bos_", "", $modName);
  $mod = \Drupal::entityTypeManager()
    ->getStorage("paragraphs_type")->load($entity);
  if (!empty($mod)) {
    $destination = "public://img/post/" . $destName;
    $image = Drupal::entityTypeManager()->getStorage("file")
      ->loadByProperties(["uri" => $destination]);
    if (count($image) == 0) {
      $image = File::create();
      $image->setFileUri($destination);
      $image->setOwnerId(\Drupal::currentUser()->id());
      $image->setMimeType('image/' . pathinfo($destination, PATHINFO_EXTENSION));
      $image->setFileName($filesystem->basename($destination));
      $image->setPermanent();
      $image->save();
    }
  }
}

/**
 * Prepares variables for post templates.
 *
 * Default template: post.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the post information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 *
 * @throws \Exception
 */
function template_preprocess_node__post(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
