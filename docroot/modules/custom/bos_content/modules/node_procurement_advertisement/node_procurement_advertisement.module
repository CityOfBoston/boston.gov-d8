<?php

/**
 * @file
 * Provides an script_page entity type.
 */

/**
 * Implements hook_theme().
 */
function node_procurement_advertisement_theme() {
  $theme['node__procurement_advertisement'] = [
    'base hook' => 'node',
    'path' => 'modules/custom/bos_content/modules/node_procurement_advertisement/templates',
  ];
  $theme['field__field_intro_text'] = [
    'base hook' => 'field',
    'path' => 'modules/custom/bos_content/modules/node_procurement_advertisement/templates',
  ];
  $theme['field__taxonomy_term__name__massachusetts_general_law'] = [
    'base hook' => 'field',
    'path' => 'modules/custom/bos_content/modules/node_procurement_advertisement/templates',
  ];
  $theme['taxonomy_term__massachusetts_general_law'] = [
    'base hook' => 'taxonomy_term',
    'path' => 'modules/custom/bos_content/modules/node_procurement_advertisement/templates',
  ];
  $theme['node__person_profile__department_listing'] = [
    'base hook' => 'node',
    'path' => 'modules/custom/bos_content/modules/node_procurement_advertisement/templates',
  ];
  return $theme;
}

/**
 * Implements hook_field_default_field_instances_alter().
 */
function node_procurement_advertisement_field_default_field_instances_alter(&$instances) {
  // Check for and get the Term ID of the 'default' term in procurement_footer.
  if ($default_terms = taxonomy_get_term_by_name('default', 'procurement_footer')) {
    // Grab first array item of unknown key.
    $default_term = current($default_terms);
    // Get the Term ID.
    $default_tid = $default_term->tid ?: NULL;
    // Set the 'default' Term ID as default value on entity reference field.
    $instances['node-procurement_advertisement-field_procurement_footer']['default_value'][0]['target_id'] = $default_tid;
  }
}

/**
 * Implements hook_preprocess_views_exposed_form().
 */
function node_procurement_advertisement_preprocess_views_exposed_form(&$vars) {
  if ($vars['form']['#id'] == 'views-exposed-form-bids-rfps-landing' || $vars['form']['#id'] == 'views-exposed-form-bids-rfps-archive') {
    $vars['widget_groups'] = array(
      'search by project or bid name' => array(),
      'search by department' => array(),
    );

    foreach ($vars['widgets'] as $id => $widget) {
      switch ($id) {
        case 'filter-title':
          $vars['widget_groups']['search by project or bid name'][$id] = $widget;
          break;

        case 'filter-field_contact_target_id':
          $vars['widget_groups']['search by department'][$id] = $widget;
          break;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function node_procurement_advertisement_form_procurement_advertisement_node_form_alter(&$form, &$form_state, $form_id) {
  // Only show Contract Length field if Multi-year option is selected.
  $form['field_contract_length']['#states'] = array(
    'visible' => array(
      ':input[name="field_multi_year_contract[und]"]' => array('checked' => TRUE),
    ),
    // TO-DO need to actually validate to make required.
    // https://drupal.stackexchange.com/questions/14173/how-to-make-a-form-required-with-states
    'required' => array(
      ':input[name="field_multi_year_contract[und]"]' => array('checked' => TRUE),
    ),
  );

  // Since Term ID might differ between environments, we'll look it up here.
  $terms = taxonomy_get_term_by_name('Electronic', 'bid_type');
  // Get the actual TID from the term object.
  foreach ($terms as $term) {
    // Assign TID to variable to be used in #state.
    $electronic_tid = $term->tid;
  }
  // Only show Supplier Portal Link if the Bid Type is set to Electronic.
  $form['field_url']['#states'] = array(
    'visible' => array(
      ':input[name="field_bid_type[und]"]' => array('value' => $electronic_tid),
    ),
  );
  $terms = taxonomy_get_term_by_name('Paper', 'bid_type');
  // Get the actual TID from the term object.
  foreach ($terms as $term) {
    // Assign TID to variable to be used in #state.
    $paper_tid = $term->tid;
  }
  // Only show Document field if the Bid Type is set to Paper.
  $form['field_document']['#states'] = array(
    'visible' => array(
      ':input[name="field_bid_type[und]"]' => array('value' => $paper_tid),
    ),
  );
  // Only show Delivery Address field if the Bid Type is set to Paper.
  $form['field_delivery_address']['#states'] = array(
    'visible' => array(
      ':input[name="field_bid_type[und]"]' => array('value' => $paper_tid),
    ),
    'required' => array(
      ':input[name="field_bid_type[und]"]' => array('value' => $paper_tid),
    ),
  );
  // Address 1.
  // Remove default required validation so form saves if Paper is not selected.
  $form['field_delivery_address']['und'][0]['street_block']['thoroughfare']['#required'] = FALSE;
  // Add asterisk to visually show user what is required before form submission.
  $form['field_delivery_address']['und'][0]['street_block']['thoroughfare']['#states'] = array(
    'required' => array(
      // Check that Paper is selected for Bid Type.
      ':input[name="field_bid_type[und]"]' => array('value' => $paper_tid),
    ),
  );
  // City.
  // Remove default required validation so form saves if Paper is not selected.
  $form['field_delivery_address']['und'][0]['locality_block']['locality']['#required'] = FALSE;
  // Add asterisk to visually show user what is required before form submission.
  $form['field_delivery_address']['und'][0]['locality_block']['locality']['#states'] = array(
    'required' => array(
      // Check that Paper is selected for Bid Type.
      ':input[name="field_bid_type[und]"]' => array('value' => $paper_tid),
    ),
  );
  // ZIP code.
  // Remove default required validation so form saves if Paper is not selected.
  $form['field_delivery_address']['und'][0]['locality_block']['postal_code']['#required'] = FALSE;
  // Add asterisk to visually show user what is required before form submission.
  $form['field_delivery_address']['und'][0]['locality_block']['postal_code']['#states'] = array(
    'required' => array(
      // Check that Paper is selected for Bid Type.
      ':input[name="field_bid_type[und]"]' => array('value' => $paper_tid),
    ),
  );
  // State.
  // Remove default required validation so form saves if Paper is not selected.
  $form['field_delivery_address']['und'][0]['locality_block']['administrative_area']['#required'] = FALSE;
  // Add asterisk to visually show user what is required before form submission.
  $form['field_delivery_address']['und'][0]['locality_block']['administrative_area']['#states'] = array(
    'required' => array(
      // Check that Paper is selected for Bid Type.
      ':input[name="field_bid_type[und]"]' => array('value' => $paper_tid),
    ),
  );
  // Country.
  // Remove default required validation so form saves if Paper is not selected.
  $form['field_delivery_address']['und'][0]['country']['#required'] = FALSE;
  // Add asterisk to visually show user what is required before form submission.
  $form['field_delivery_address']['und'][0]['country']['#states'] = array(
    'required' => array(
      // Check that Paper is selected for Bid Type.
      ':input[name="field_bid_type[und]"]' => array('value' => $paper_tid),
    ),
  );

  // Add custom validation since above required states are client-side only.
  $form['#validate'][] = 'bos_content_type_procurement_advertisement_form_validate';

}

/**
 * Form validate callback.
 */
function bos_content_type_procurement_advertisement_form_validate($form, $form_state) {
  $terms = taxonomy_get_term_by_name('Paper', 'bid_type');
  // Get the actual TID from the term object.
  foreach ($terms as $term) {
    // Assign TID to variable to be checked in Bid Type.
    $paper_tid = $term->tid;
  }
  // Make sure 'Paper' is selected in Bid Type field.
  if ($form_state['values']['field_bid_type']['und'][0]['target_id'] == $paper_tid) {
    // Created variables for user inputted values.
    $address_1 = $form_state['values']['field_delivery_address']['und'][0]['thoroughfare'];
    $city = $form_state['values']['field_delivery_address']['und'][0]['locality'];
    $state = $form_state['values']['field_delivery_address']['und'][0]['administrative_area'];
    $zip_code = $form_state['values']['field_delivery_address']['und'][0]['postal_code'];
    $country = $form_state['values']['field_delivery_address']['und'][0]['country'];
    // Assign readable titles to each user inputted value.
    $required_fields = array(
      "Address 1" => $address_1,
      "City" => $city,
      "State" => $state,
      "ZIP code" => $zip_code,
      "Country" => $country,
    );
    // Create a placeholder array for all required fields without values.
    $empty_required_fields = [];
    foreach ($required_fields as $field_name => $field_value) {
      if (!$field_value) {
        // Compose error message for required fields that are missing values.
        $empty_required_fields[] = "Please fill out the '$field_name' field when selecting 'Paper' as Bid Type";
      }
    }
    // Make sure there are required fields missing input.
    if (count($empty_required_fields) > 0) {
      // Block form submission and display help text to user about empty fields.
      form_set_error('Paper Bid Type Address Errors', theme('item_list', array('items' => $empty_required_fields)));
    }
  }
}

/**
 * Implements hook_preprocess_HOOK__ID().
 */
function node_procurement_advertisement_preprocess_node__procurement_advertisement(&$variables) {
  /*

  $field_advertisement_date = field_get_items('node', $variables['node'], 'field_advertisement_date');
  if ($field_advertisement_date !== FALSE) {
    $advertisement_date = strtotime($field_advertisement_date[0]['value']);
    $variables['advert_date'] = date('n/j/Y', $advertisement_date);
  }

  $submissions = $variables['field_bid'];

  $bid_entity_id_array = array();
  foreach ($submissions as $submission) {
    $bid_entity_id_array[] = $submission['value'];
  }

  $awarded = array();
  $other = array();

  // Here we need to load all the components because
  // the not all components have a short title
  // required so we do not create nav link for it.
  $submissions = entity_load('paragraphs_item', $bid_entity_id_array);
  foreach ($submissions as $submission) {
    $bid = array(
      'company' => $submission->field_company_name['und'][0]['value'],
      'amount' => $submission->field_bid_amount['und'][0]['value'],
      'awarded' => $submission->field_awarded['und'][0]['value'],
    );

    if ($bid['awarded'] === '1') {
      $awarded[] = $bid;
    }
    else {
      $other[] = $bid;
    }
  }

  $variables['bid_awarded'] = $awarded;
  $variables['bid_other'] = $other;

  $award_date = field_get_items('node', $variables['node'], 'field_award_date');
  $awarded = strtotime($award_date[0]['value']);

  $variables['award_date'] = date('F j, Y', $awarded);

  $not_awarded = field_get_items('node', $variables['node'], 'field_not_awarded');
  $variables['not_awarded'] = $not_awarded[0]['value'] === "1";
   */
}
