<?php

/**
 * @file
 * Provides a site alert entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\core\StringTranslation\TranslatableMarkup;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;

/**
 * Implements hook_theme().
 */
function node_site_alert_theme() {
  return [
    'html__api' => [
      'base hook' => 'html',
      'path' => 'modules/custom/bos_content/modules/node_site_alert/templates',
      'template' => 'html--api',
    ],
    'node__site_alert' => [
      'base hook' => 'node',
      'path' => 'modules/custom/bos_content/modules/node_site_alert/templates',
      'template' => 'node--site-alert',
    ],
    'container__no_wrapper' => [
      'base hook' => 'container',
    ],
    'region__no_wrapper' => [
      'base hook' => 'region',
    ],
    'field__node__field_link__site_alert' => [
      'base hook' => 'field',
      'path' => 'modules/custom/bos_content/modules/node_site_alert/templates',
      'template' => 'field--node--field-link--site-alert',
    ],
    'block__views_block__site_alerts_site_alerts' => [
      'base hook' => 'block',
      'path' => 'modules/custom/bos_content/modules/node_site_alert/templates',
      'template' => 'block--views-block--site-alerts-site-alerts',
    ],

  ];
}

/**
 * Prepares variables for site alert templates.
 *
 * Default template: site-alert.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the site alert information and
 *     any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 *   TODO: This is not working ... hook does not exist.
 */
function template_preprocess_node__site_alert(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_form_alter().
 */
function node_site_alert_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == "node_site_alert_edit_form") {
    $field = new TranslatableMarkup("Exclude another page");
    $form["field_excluded_nodes"]["widget"]["add_more"]["#value"] = $field;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function node_site_alert_preprocess_page(&$variables) {
  // Check if we have any active site-alerts.
  $variables['cob']['has_site_alert'] = FALSE;
  $now = new \DateTime('now');
  $now = $now->format(DATETIME_DATETIME_STORAGE_FORMAT);

  if ($alert = \Drupal::entityQuery('node')
    ->condition('type', "site_alert", "=")
    ->condition('status', "1", "=")
    ->condition('field_date_range.value', $now, "<=")
    ->condition('field_date_range.end_value', $now, ">")
    ->execute()) {
    $excluded = \Drupal::entityTypeManager()->getStorage('node')
      ->load(reset($alert))
      ->field_excluded_nodes
      ->getValue();
    $here = \Drupal::request()->getRequestUri();
    $path = ltrim(\Drupal::service('path.alias_manager')->getPathByAlias($here), "/");

    $variables['cob']['has_site_alert'] = TRUE;
    _bos_content_fix_attributes($variables);
    if ($variables["attributes"]->hasClass("page-nm")) {
      $variables["attributes"]->addClass("page-wa");
      $variables["attributes"]->removeClass("page-nm");
    }
    $variables["attributes"]->addClass("sa");

    foreach ($excluded as $key => $exclude) {
      if (isset($exclude['target_id']) && "node/" . $exclude['target_id'] == $path) {
        $variables['cob']['has_site_alert'] = FALSE;
        break;
      }
    }
  }
}

/**
 * Implements hook_preprocess().
 */
function node_site_alert_preprocess(&$variables, $hook) {
  if ($hook == "image_url_formatter") {
    // Even though a full URL is requested in the view, a relative url is
    // provided.  This manually extends to a full URL.
    if ($variables["url_type"] == 0) {
      $variables["url"] = file_create_url($variables["item"]->__get("entity")->get("uri")->value);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_site_alert_preprocess_node__site_alert(&$variables) {
  if ($variables['node']->bundle() != "site_alert") {
    return;
  }

  // Only show alert if the date range is valid.
  if (!isset($variables["node"]->field_date_range)) {
    $variables["display"] = TRUE;
  }

  // Add-in a bit of css.
  $variables['#attached']['library'][] = "node_site_alert/alert.call";

  // Used in templates to set the background colors.
  $variables['block_theme'] = $variables["content"]["field_theme"]["#items"]->value;

  // Set classes.
  $variables['attributes']['id'] = "sa-a";
  $variables['attributes']['class'][] = "b";
  $variables['attributes']['class'][] = "b--" . $variables['block_theme'];
  $variables['attributes']['class'][] = "b--fw";
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_site_alert_preprocess_block(&$variables) {
  if (!isset($variables["content"]["#view"]->current_display) || (isset($variables["content"]["#view"]->current_display) && $variables["content"]["#view"]->current_display != "site_alerts")) {
    return;
  }
  $variables["attributes"]["class"][] = "page-wa";
  $variables["attributes"]["id"] = "page";
}

/**
 * Implements hook_views_post_render().
 *
 * Rewrites the autocomplete list for excluded pages.
 */
function node_site_alert_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() == "site_alerts" && $view->current_display == "exclude_pages_autocomplete") {
    foreach ($output as &$line) {
      $line["#row"]->_entity->setTitle($line['#row']->node_field_data_title . " (" . $line['#row']->_entity->getType() . ")");
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * This is used to create a cut-down container when site_alert is called from
 * the page display of a view.
 */
function node_site_alert_theme_suggestions_container(array $variables) {
  if (isset($variables["element"]["#view"]) && $variables["element"]["#view"]->current_display == "site_alerts") {
    return [
      'container__no_wrapper',
    ];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * This is used to create a cut-down container when site_alert is called from
 * the page display of a view.
 */
function node_site_alert_theme_suggestions_region(array $variables) {
  if ($variables["elements"]["#region"] == "site_alert") {
    return ["region__no_wrapper"];
  }
}
