<?php

/**
 * @file
 * Provides a site alert entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityInterface;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\views\Views;

/**
 * Implements hook_theme().
 */
function node_site_alert_theme() {
  return [
    'html__api' => [
      'base hook' => 'html',
    ],
    'node__site_alert' => [
      'base hook' => 'node',
    ],
    'container__no_wrapper' => [
      'base hook' => 'container',
    ],
    'region__no_wrapper' => [
      'base hook' => 'region',
    ],
    'field__node__field_link__site_alert' => [
      'base hook' => 'field',
    ],
    'block__views_block__site_alerts_block_site_alerts' => [
      'base hook' => 'block',
    ],

  ];
}

/**
 * Prepares variables for site alert templates.
 *
 * Default template: site-alert.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the site alert information and
 *     any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 *   TODO: This is not working ... hook does not exist.
 */
function template_preprocess_node__site_alert(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_site_alert_preprocess_field_multiple_value_form(array &$variables) {
  _bos_core_rename_multiple_button($variables, "site_alert", [
    "field_excluded_nodes" => "Exclude another page",
  ]);
}

/**
 * Implements hook_preprocess_page().
 */
function node_site_alert_preprocess_page(&$variables) {
  // Check if we have any active site-alerts.
  // Call the view passing in the homepage to see if we have an alert set ATM.
  if ($view = Views::getView("site_alerts")) {
    $view->setDisplay("block_site_alerts");
    if (isset($variables["node"])) {
      $view->preExecute(["nid" => $variables["node"]->id()]);
    }
    if ($view->execute() && count($view->result) > 0) {
      _bos_content_fix_attributes($variables);
      $variables["attributes"]->addClass("page--wa");
      $variables["attributes"]->removeClass("page--nm");
      $variables["attributes"]->removeClass("mn");
      $variables["attributes"]->addClass("sa");
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function node_site_alert_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == "node"
    && $entity->getType() == "site_alert"
    && isset($entity->title_field->value)) {
    // Since we have created a separate custom title field, and the form
    // display does not set the nodes native title field, we need to manually
    // set the title field here or else we get an "SQL column cannot be null"
    // exception on save.
    $entity->setTitle($entity->title_field->value);
  }
}
/**
 * Implements hook_preprocess().
 */
function node_site_alert_preprocess(&$variables, $hook) {
  if ($hook == "image_url_formatter") {
    // Even though a full URL is requested in the view, a relative url is
    // provided.  This manually extends to a full URL.
    if ($variables["url_type"] == 0) {
      $variables["url"] = file_create_url($variables["item"]->__get("entity")->get("uri")->value);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_site_alert_preprocess_node__site_alert(&$variables) {
  if ($variables['node']->bundle() != "site_alert") {
    return;
  }

  // Only show alert if the date range is valid.
  if (!isset($variables["node"]->field_date_range)) {
    $variables["display"] = TRUE;
  }

  // Add-in a bit of css.
  $variables['#attached']['library'][] = "node_site_alert/alert.call";

  // Used in templates to set the background colors.
  $variables['block_theme'] = $variables["content"]["field_theme"]["#items"]->value;

  // Set classes.
  $variables['attributes']['id'] = "sa-a";
  $variables['attributes']['class'][] = "b";
  $variables['attributes']['class'][] = "b--" . $variables['block_theme'];
  $variables['attributes']['class'][] = "b--fw";
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_site_alert_preprocess_block(&$variables) {
  if (!isset($variables["content"]["#view"]->current_display) || (isset($variables["content"]["#view"]->current_display) && $variables["content"]["#view"]->current_display != "block_site_alerts")) {
    return;
  }
  $variables["attributes"]["class"][] = "d--n";
  $variables["attributes"]["id"] = "sa";
}

/**
 * Implements hook_views_post_render().
 *
 * Rewrites the autocomplete list for excluded pages.
 */
function node_site_alert_views_post_render(ViewExecutable $view, &$output, CachePluginBase $cache) {
  if ($view->id() == "site_alerts" && $view->current_display == "exclude_pages_autocomplete") {
    foreach ($output as &$line) {
      $line["#row"]->_entity->setTitle($line['#row']->node_field_data_title . " (" . $line['#row']->_entity->getType() . ")");
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * This is used to create a cut-down container when site_alert is called from
 * the page display of a view.
 */
function node_site_alert_theme_suggestions_container(array $variables) {
  if (isset($variables["element"]["#view"]) && $variables["element"]["#view"]->current_display == "site_alerts") {
    return [
      'container__no_wrapper',
    ];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * This is used to create a cut-down container when site_alert is called from
 * the page display of a view.
 */
function node_site_alert_theme_suggestions_region(array $variables) {
  if ($variables["elements"]["#region"] == "site_alert") {
    return ["region__no_wrapper"];
  }
}
