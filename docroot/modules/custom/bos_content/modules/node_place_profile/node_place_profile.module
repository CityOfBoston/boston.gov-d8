<?php

/**
 * @file
 * Provides a place profile entity type.
 */

use Drupal\bos_core\BackgroundResponsiveImage;
use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function node_place_profile_theme() {
  return [
    'node__place_profile' => [
      'render element' => 'elements',
      'base hook' => 'node',
    ],
    'node__place_profile__listing' => [
      'base hook' => 'node',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_place_profile_preprocess_node__place_profile(&$variables) {
  _bos_content_fix_attributes($variables);
  $variables['attributes']->addClass("desktop-100");
  $variables['attributes']->addClass("clearfix");
  $variables['attributes']->setAttribute("id", "node-" . $variables['elements']['#node']->id());

  $variables['attributes']->addClass("with-hero");

}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_place_profile_preprocess_node__place_profile__listing(&$variables) {
  if (!empty($variables['elements']['#node'])) {
    $node = $variables['elements']['#node'];
    if (!$node->get('field_intro_image')->isEmpty()) {
      $variables['new_image_class'] = "cd-ic " . $variables['photo_id'];
    }
    else {
      // Sets a hatched blue background in place of image.
      $variables['new_image_class'] = "cd-ic hro--d";
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_place_profile_preprocess_page(&$variables) {
  if (NULL != ($node = $variables["node"] ?? NULL)) {
    if (is_numeric($node)) {
      // $variables['node'] is the nid when a view_display version of the
      // page is rendered.
      return;
    }
    if ($node->bundle() == "place_profile") {
      // Now make and render the Intro_image block.
      $variables['header_image'] = FALSE;
      if (isset($variables['content']['field_intro_image']) && $variables["node"]->get('field_intro_image')->count()) {
        $variables['header_image'] = TRUE;
        _bos_content_fix_attributes($variables);
        $variables["attributes"]->addClass("mn");
        $variables["attributes"]->setAttribute("id", "page");
        $nestedElement = [
          ["div" => "b b--fw b--fw--480"],
          ["div" => $variables['photo_id'] . " hro hro--pt hro--pb"],
        ];
        $variables["content"]["intro_image"] = BackgroundResponsiveImage::createBackgroundFramework($nestedElement);
      }
    }
  }
}

/**
 * Prepares variables for place profile templates.
 *
 * Default template: place-profile.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the place profile information
 *     and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_node__place_profile(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  // Handle intro_image if present.
  // Has to happen in this template_preprocess_hook or does not #attach(ed).
  if (isset($variables['content']['field_intro_image'])) {

    $background_image = $variables["elements"]["field_intro_image"];

    switch ($variables["elements"]["#view_mode"]) {
      case 'listing':
        $photo_id = Html::getUniqueId('cd-ic-' . $variables["elements"]['#node']->id());
        $variables['photo_id'] = $photo_id;
        break;

      default:
        if ($background_image["#items"]->count()) {
          $photo_id = Html::getUniqueId('hro');
          $variables['paragraph']->_photo_id = $photo_id;
          $variables['photo_id'] = $photo_id;
        }
    }

    if (isset($background_image["#items"]) && $background_image["#items"]->count()) {
      $css = BackgroundResponsiveImage::createBackgroundCss($background_image, ".$photo_id");
      $variables['#attached']['html_head'][] = [
        [
          "#tag" => "style",
          "#value" => $css,
          "#weight" => 100,
        ],
        'place-profile-intro-image-css-' . $photo_id,
      ];
    }

  }
}
