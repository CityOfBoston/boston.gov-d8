<?php

/**
 * @file
 * Provides a department_profile entity type.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\editor\Entity\Editor;

/**
 * Implements hook_theme().
 */
function node_department_profile_theme($existing, $type, $theme, $path) {
  return [
    'node__department_profile' => [
      'base hook' => 'node',
      'render element' => 'elements',
    ],
    'node__department_profile__published_by' => [
      'base hook' => 'node',
      'render element' => 'elements',
    ],
    'node__department_profile__popup_icon' => [
      'base hook' => 'node',
      'render element' => 'elements',
    ],
    'node__department_profile_contact' => [
      'render element' => 'elements',
      'base hook' => 'node',
    ],
    'node__department_profile__card' => [
      'base hook' => 'node',
      'render element' => 'elements',
    ],
    'node__department_profile__department_listing' => [
      'render element' => 'elements',
      'base hook' => 'node',
    ],
  ];
}

/**
 * Prepares variables for department-profile template.
 *
 * Default template: node--department-profile.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the test component page
 *     information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_node__node_department_profile(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  // Replace underscores with dashes to maintain compatability with css library.
  foreach ($variables['attributes']['class'] as &$class) {
    $class = str_ireplace('_', '-', $class);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_department_profile_preprocess_page(&$variables) {
  if (NULL != ($node = $variables["node"] ?? NULL)) {
    if (is_numeric($node)) {
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($node);
    }
    if ($node->bundle() == "department_profile") {
      // Determine if this is an edit page or a display page.
      $pathinfo = Drupal::request()->getPathInfo();
      $pathinfo = explode("/", $pathinfo);
      if (end($pathinfo) != "edit" && end($pathinfo) != "revisions") {
        _bos_content_fix_attributes($variables);
        // Start by adding id page to all nodes.
        $variables["attributes"]->setAttribute("id", "page");
        // Make responsive to menu appearing on right by adding class mn.
        $variables["attributes"]->addClass("mn");
        $variables["attributes"]->addClass("page--wa");
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function node_department_profile_form_node_department_profile_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add styles for the CKEditor boxes on the admin forms.
  _bos_admin_add_ckeditor_classes($form, [
    "field_intro_text" => [
      "html" => "department-info-wrapper",
      "body" => "intro-text supporting-text squiggle-border-bottom column g--8",
    ],
    "body" => [
      "html" => "department-info-wrapper g",
      "body" => "body g--8",
    ],
  ]);
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function node_department_profile_ckeditor_css_alter(array &$css, Editor $editor) {
  if (\Drupal::routeMatch()->getParameters()->has("node")
    && \Drupal::routeMatch()->getParameters()->get("node")->getType() == "department_profile") {
    $css[] = drupal_get_path("module", "node_department_profile") . "/css/ckeditor.boston.department_profile.css";
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function node_department_profile_preprocess_node__department_profile__card(array &$variables) {
  // Clean out any linefeed chars at the end of the string.
  $variables["content"]["field_intro_text"][0]["#text"] = trim($variables["content"]["field_intro_text"][0]["#text"], "&#13;\n");
}
