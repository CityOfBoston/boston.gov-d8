{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
<article class="{{ classes }} clearfix node-{{ nid }}" {{ attributes }}>
  <div class="b-c">
    {% if (title_prefix or title_suffix or display_submitted or unpublished or preview or (not page)) and title %}
      <header>

        {{  title_prefix  }}

        {% if (not page) and title %}
          <h2{{ title_attributes  }}><a href="{{ node_url }}">{{ title }}</a></h2>
        {% endif %}

        {{ title_suffix  }}

      </header>
    {% endif %}
    {{ content.field_election }}
    <div class="m-b700">
      <p class="t--regular"><strong>Last Updated:</strong> {{ content.field_updated_date }}</p>
      <div class="sel m-t000">
        <label for="language" class="sel-l m-t000">Choose a result to display</label>
        <div class="sel-c">
          <!--
          {//% set display_title = content.field_display_title %}
          <select name="election_results" id="election_results" class="sel-f">
            $variables["elements"]["field_election_contest"][0]["#taxonomy_term"]->values["field_display_title"]["x-default"][0]["value"]
            {//% for i in content.field_election_contest.field_display_title %}
            <option value=""></option>
            {//% endfor %}
          </select>
          -->
          <select name="election_results" id="election_results" class="sel-f">
            <option value="Mayor">Mayor</option>
            <option value="Question_1">Question 1</option>
            <option value="Question_2">Question 2</option>
            <option value="Question_3">Question 3</option>
            <option value="City_councillor_at_Large">City Councillor at Large</option>
            <option value="District_1">District 1</option>
            <option value="District_2">District 2</option>
            <option value="District_3">District 3</option>
          </select>
        </div>
      </div>
    </div>
    {# We hide the comments and links now so that we can render them later. #}
    {{ content|without('links','comments','field_election','field_updated_date') }}

    {{ content['links']  }}
    {{ content['comments']  }}
  </div>
</article>
