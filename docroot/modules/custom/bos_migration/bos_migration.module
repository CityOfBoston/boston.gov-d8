<?php

/**
 * @file
 * Main file for the bos_migration module.
 */

use Drupal\Core\Database\Database;

/**
 * Implements hook_migration_plugins_alter().
 */
function bos_migration_migration_plugins_alter(array &$migrations) {
  // Pass array into functions that alter each entity as needed.
  _migration_housekeeping($migrations);
  _node__department_profile($migrations);
  _node_paragraph_alterations($migrations);
  _rich_text_field_alter($migrations);

  \Drupal::logger('migrate')
    ->info("After alter:<br><pre>@output</pre>", ["@output" => print_r($migrations, TRUE)]);
}

/*
 * Helper functions.
 * Typically modify the plugin element in the process node of the config.
 */

/**
 * Cleans up the list of migrations to only display those we need.
 */
function _migration_housekeeping(array &$migrations) {
  $migrations = array_filter($migrations, function (array $migration) {
    $tags = isset($migration['migration_tags']) ? (array) $migration['migration_tags'] : [];
    if (in_array('Drupal 6', $tags)) {
      return FALSE;
    }
    if (in_array($migration['id'], _get_unused_migrations())) {
      return FALSE;
    }
    return TRUE;
  });
}

/**
 * Defines list of migrations to filter out.
 */
function _get_unused_migrations() {
  return [
    'd7_blocked_ips',
    'd7_color',
    'd7_dblog_settings',
    'd7_filter_format',
    'd7_field_instance',
    'd7_view_modes',
    'd7_field_formatter_settings',
    'd7_field',
    'd7_language_content_settings',
    'd7_filter_settings',
    'd7_global_theme_settings',
    'd7_image_settings',
    'd7_image_styles',
    'd7_language_negotiation_settings',
    'd7_language_types',
    'd7_node_settings',
    'd7_realname_settings',
    'd7_syslog_settings',
    'd7_system_authorize',
    'd7_system_cron',
    'd7_system_date',
    'd7_system_file',
    'd7_system_mail',
    'd7_system_performance',
    'd7_theme_settings',
    'd7_user_flood',
    'd7_user_mail',
    'd7_vote',
    'd7_custom_block',
    'd7_custom_block_translation',
    'd7_node_type',
    'd7_comment_type',
    'd7_comment_field',
    'd7_comment_field_instance',
    'd7_comment_entity_form_display',
    'd7_comment_entity_form_display_subject',
    'd7_comment_entity_display',
    'd7_taxonomy_vocabulary',
    'd7_taxonomy_term:maps_esri_feed',
    'd7_taxonomy_term_entity_translation:maps_esri_feed',
    'd7_field_collection_type',
    'd7_paragraphs_type',
    'd7_node_translation',
    'd7_comment',
    'd7_authmap',
    'd7_field_instance_widget_settings',
  /* 'd7_node_revision', */
    'd7_node_title_label',
    'd7_file',
  ];
}

/**
 * Insert rich_text_to_media_embed plugin into pipeline of rich tech fields.
 */
function _rich_text_field_alter(&$migrations) {
  $result = Database::getConnection('default', 'migrate')
    ->query("SELECT field_name FROM field_config WHERE type IN ('text_long', 'text_with_summary')")
    ->fetchAllAssoc('field_name', PDO::FETCH_ASSOC);

  if (!empty($result)) {
    $rich_text_fields = array_keys($result);
    $rich_text_fields = array_flip($rich_text_fields);
    $process_to_insert = ['plugin' => 'rich_text_to_media_embed'];
    foreach ($migrations as $key => $value) {
      $matches = array_intersect_key($value['process'], $rich_text_fields);
      if (!empty($matches)) {
        foreach ($matches as $destination => $process) {
          if (is_string($process)) {
            $current_source = $migrations[$key]['process'][$destination];
            $migrations[$key]['process'][$destination] = [
              '0' => [
                'plugin' => 'get',
                'source' => $current_source,
              ],
              '1' => $process_to_insert,
            ];
            unset($current_source);
          }
          elseif (is_array($process)) {
            if (empty($migrations[$key]['process']['0'])) {
              $current_process = $migrations[$key]['process'][$destination];
              $migrations[$key]['process'][$destination] = [
                '0' => $current_process,
                '1' => $process_to_insert,
              ];
              unset($current_process);
            }
            else {
              $migrations[$key]['process'][$destination][] = $process_to_insert;
            }
          }
        }
      }
    }
  }
}

/**
 * Alters the addressfield field so that the correct plugin is used.
 *
 * @param array $migrations
 *   The department_proile node of the migration object.
 */
function _node__department_profile(array &$migrations) {
  $migrations["d7_node:department_profile"]["process"]["field_address"]['plugin'] = "addressfield";
}

/**
 * Alters configuration for paragraph fields.
 *
 * @param array $migrations
 */
function _node_paragraph_alterations(&$migrations) {
  // Select fields which are marked as paragraphs in the D7 database.
  $result = Database::getConnection('default', 'migrate')
    ->query("SELECT field_name FROM field_config WHERE type IN ('paragraphs')")
    ->fetchAllAssoc('field_name', PDO::FETCH_ASSOC);

  // TODO: Should set default value for new fields being added into V8.
  // e.g. field_manual_date.
  if (!empty($result)) {
    $paragraphs = array_keys($result);
    $paragraphs = array_flip($paragraphs);

    foreach ($migrations as $mkey => &$migration) {
      // Only need to process nodes and taxonomies b/c only they have paras.
      if ($migration["id"] == "d7_node" || $migration["id"] == "d7_taxonomy_term" || $migration["source"]["plugin"] = "d7_paragraphs_item") {
        // Find any paragraph fields.
        foreach ($paragraphs as $fieldname => $paragraph) {
          if (!empty($migration["process"][$fieldname])) {
            if ($process = _field_definition($fieldname)) {
              $migration["process"][$fieldname] = $process;
            }
            else {
              echo "Missing paragraph: " . $fieldname . " in " . $mkey . "\n";
            }
          }
        }

        // Update the langcode to fallback somewhere sensible.
        if (isset($migration["process"]["langcode"]) && is_array($migration["process"]["langcode"])) {
          $migration["process"]["langcode"]["fallback_to_site_default"] = TRUE;
        }

        // Cull any comment field operations.
        foreach ($migration['process'] as $fieldname => $map) {
          if ($map == "comment") {
            unset($migration['process'][$fieldname]);
          }
        }

      }
    }

  }

}

/**
 * Defines the process array for a paragraph field.
 *
 * @param string $fieldName
 *   The fieldname.
 *
 * @return array|bool
 *   The process array or FALSE.
 */
function _field_definition(string $fieldName) {
  // Try to get the fieldType paragraph config.
  if (!($process = _paragraph_process_defintions($fieldName))) {
    return FALSE;
  }

  return [
    "plugin" => "sub_process",
    "process" => $process,
    "source" => $fieldName,
  ];
}

/**
 * Defines the paragraph parts of the process array.
 *
 * @param string $fieldName
 *   Fieldname.
 *
 * @return array|bool
 *   A config array or False.
 */
function _paragraph_process_defintions(string $fieldName) {
  $para_lists = [
    "full_list" => [
      'paragraph__3_column_w_image',
      'paragraph__bid',
      'paragraph__bos311',
      'paragraph__bos_signup_emergency_alerts',
      'paragraph__cabinet',
      'paragraph__card',
      'paragraph__city_score_dashboard',
      'paragraph__columns',
      'paragraph__commission_contact_info',
      'paragraph__commission_members',
      'paragraph__commission_summary',
      'paragraph__custom_hours_text',
      'paragraph__daily_hours',
      'paragraph__discussion_topic',
      'paragraph__document',
      'paragraph__drawer',
      'paragraph__drawers',
      'paragraph__election_results',
      'paragraph__external_link',
      'paragraph__featured_topics',
      'paragraph__from_library',
      'paragraph__fyi',
      'paragraph__gol_list_links',
      'paragraph__grid_links',
      'paragraph__grid_of_cards',
      'paragraph__grid_of_people',
      'paragraph__grid_of_places',
      'paragraph__grid_of_programs_initiatives',
      'paragraph__grid_of_quotes',
      'paragraph__grid_of_topics',
      'paragraph__group_of_links_grid',
      'paragraph__group_of_links_list',
      'paragraph__group_of_links_mini_grid',
      'paragraph__header_text',
      'paragraph__hero_image',
      'paragraph__how_to_contact_step',
      'paragraph__how_to_tab',
      'paragraph__how_to_text_step',
      'paragraph__iframe',
      'paragraph__internal_link',
      'paragraph__lightbox_link',
      'paragraph__list',
      'paragraph__map',
      'paragraph__message_for_the_day',
      'paragraph__news_announcements',
      'paragraph__newsletter',
      'paragraph__photo',
      'paragraph__quote',
      'paragraph__seamless_doc',
      'paragraph__sidebar_item',
      'paragraph__sidebar_item_w_icon',
      'paragraph__social_media_links',
      'paragraph__social_networking',
      'paragraph__text',
      'paragraph__text_one_column',
      'paragraph__text_three_column',
      'paragraph__text_two_column',
      'paragraph__transaction_grid',
      'paragraph__transactions',
      'paragraph__upcoming_events',
    ],
    "field_text_blocks" => [
      'paragraph__text_one_column',
      'paragraph__text_three_column',
      'paragraph__text_two_column',
    ],
    "field_grid_link" => [
      'paragraph__document',
      'paragraph__external_link',
      'paragraph__internal_link',
    ],
    "field_grid_of_quotes" => [
      'paragraph__quote',
    ],
    "field_how_to_steps" => [
      'paragraph__how_to_contact_step',
      'paragraph__how_to_text_step',
    ],
    "field_social_media_link" => [
      'paragraph__social_networking',
    ],
    "field_tabbed_content" => [
      'paragraph__tabbed_content_tab', //todo:
    ],
    "field_map_default_coordinates" => [
      'paragraph__message_for_the_day',
    ],
    "field_messages" => [
      'paragraph__message_for_the_day',
    ],
    "field_embed_list" => [
      'paragraph__seamless_doc',
    ],
    "field_drawer" => [
      'paragraph__discussion_topic',
      'paragraph__drawer',
      'paragraph__card',
    ],
    "field_bid" => [
      'paragraph__bid',
    ],
    "field_header_component" => [
      'paragraph__header_text',
    ],
    "field_how_to_tabs" => [
      'paragraph__how_to_tab',
    ],
    "field_links" => [
      'paragraph__document',
      'paragraph__external_link',
      'paragraph__internal_link',
    ],
    "field_status_overrides" => [ // todo
      'paragraph__status_overrides',
    ],
    "field_link" => [
      'paragraph__document',
      'paragraph__external_link',
      'paragraph__internal_link',
    ],
    "field_operation_hours" => [
      'paragraph__custom_hours_text',
      'paragraph__daily_hours',
    ],
    "field_components" => [
      'paragraph__3_column_w_image',
      'paragraph__bos311',
      'paragraph__bos_signup_emergency_alerts',
      'paragraph__cabinet',
      'paragraph__card',
      'paragraph__commission_contact_info',
      'paragraph__commission_members',
      'paragraph__commission_summary',
      'paragraph__drawers',
      'paragraph__featured_topics',
      'paragraph__fyi',
      'paragraph__grid_of_cards',
      'paragraph__grid_of_people',
      'paragraph__grid_of_places',
      'paragraph__grid_of_programs_initiatives',
      'paragraph__grid_of_quotes',
      'paragraph__grid_of_topics',
      'paragraph__group_of_links_grid',
      'paragraph__group_of_links_list',
      'paragraph__group_of_links_mini_grid',
      'paragraph__hero_image',
      'paragraph__iframe',
      'paragraph__lightbox_link',
      'paragraph__list',
      'paragraph__map',
      'paragraph__news_and_announcements',
      'paragraph__newsletter',
      'paragraph__photo',
      'paragraph__text',
      'paragraph__transaction_grid',
      'paragraph__upcoming_events',
    ],
    "field_sidebar_components" => [
      'paragraph__sidebar_item',
      'paragraph__sidebar_item_w_icon',
    ],
  ];

  // If an unknown type is reqested, return FALSE.
  if (!isset($para_lists[$fieldName])) {
    return FALSE;
  }

  return [
    "target_id" => [
      [
        'plugin' => 'migration_lookup',
        'migration' => $para_lists[$fieldName],
        'source' => 'value',
      ],
      [
        'plugin' => 'extract',
        'index' => [0],
      ],
    ],
    "target_revision_id" => [
      [
        'plugin' => 'migration_lookup',
        'migration' => $para_lists[$fieldName],
        'source' => 'value',
      ],
      [
        'plugin' => 'extract',
        'index' => [1],
      ],
    ],
  ];

}
