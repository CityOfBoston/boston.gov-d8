<?php

/**
 * @file
 * Main file for the bos_migration module.
 */

use Drupal\migrate\MigrateException;
use Drupal\migrate\MigrateSkipRowException;
use Drupal\migrate\Plugin\MigrateIdMapInterface;
use Drupal\migrate\Row;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\bos_migration\MigrationConfigAlter;
use Drupal\bos_migration\MigrationPrepareRow;

/**
 * Implements hook_migration_plugins_alter().
 */
function bos_migration_migration_plugins_alter(array &$migrations) {
  // Class controls/executes alterations to migration array.
  $mig = new MigrationConfigAlter($migrations, TRUE);
  $migrations = $mig->alterMigrations();
  // TODO: dumpMigration() can be removed in production.
  $mig->dumpMigration();
}

/**
 * Implements hook_migrate_prepare_row().
 */
function bos_migration_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $mig = new MigrationPrepareRow($row, $source, $migration, TRUE);
  try {
    switch ($migration->getBaseId()) {
      case "d7_node_revision":
        $mig->prepareNodeRevisionRow();
        break;
    }
  }
  catch (MigrateSkipRowException $e) {
    // Save to map or else this will be re-processed each migratin.
    throw new MigrateSkipRowException($e->getMessage(), $e->getSaveToMap());
  }
  catch (MigrateException $e) {
    throw new MigrateException($e->getMessage(), $e->getCode(), $e->getPrevious(), MigrationInterface::MESSAGE_ERROR, MigrateIdMapInterface::STATUS_NEEDS_UPDATE);
  }
}
