<?php

/**
 * @file
 * Main file for the bos_core module.
 */

/**
 * Implements hook_theme().
 */
function bos_core_theme($existing, $type, $theme, $path) {
  return [];
}

/**
 * Helper to uninstall original configs when not in config/default folder.
 *
 * @param string $module
 *   The module name.
 */
function _bos_core_uninstall_boston($module) {

  Drupal::logger("City of Boston")->notice("Removing config for: @module.", ["@module" => $module]);

  $configs = [];
  $path = drupal_get_path("module", $module);

  // Get a full list of .yml files defined by this module.
  foreach (["install", "optional", "required"] as $sub) {
    $fullpath = DRUPAL_ROOT . "/" . $path . "/config/" . $sub;
    if (is_dir($fullpath)) {
      $_configs = array_diff(scandir($fullpath), ['.', '..']);
      foreach ($_configs as $key => &$_configr) {
        if (stripos($_configr, ".yml") === FALSE) {
          unset($_configs[$key]);
        }
        else {
          $_configr = str_replace(".yml", "", $_configr);
        }
      }
      if (!empty($_configs)) {
        $configs = array_merge($configs, $_configs);
      }
    }
  }

  // Now uninstall those configs.
  foreach ($configs as $config) {
    try {
      if (is_string($config)) {
        $_config = Drupal::configFactory()->get($config);
        if (!empty($_config)) {
          Drupal::configFactory()->getEditable($config)->delete();
        }
      }
    }
    catch (ErrorException $e) {
      Drupal::logger("City of Boston")->notice("Could not find @elem.", ["@elem" => $config]);
      Drupal::messenger()->addWarning(t("Could not find @elem to uninstall.", ["@elem" => $config]), FALSE);
    }
  }

}

/**
 * Helper to copy module-related icons into expected location.
 *
 * @param string $module
 *   The module name.
 */
function _bos_core_install_icons($module) {
  $path = drupal::root() . "/sites/default/files/paragraphs_type_icon/";
  if (!file_exists($path)) {
    mkdir($path, 0777);
  }
  $modulePath = drupal::root() . '/' . drupal_get_path("module", $module);
  $dir = dir($modulePath);
  $icons = [];
  while (FALSE !== ($file = $dir->read())) {
    if (strpos($file, "icon.svg") > 0) {
      $icons[] = $file;
    }
  }
  foreach ($icons as $icon) {
    // Copy rather than move so we dont get git issues.
    copy($modulePath . "/" . $icon, $path . "/" . $icon);
  }
}
