<?php

/**
 * @file
 * Main file for the bos_core module.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\bos_core\BosCoreHelp;
use Drupal\Views\ViewExecutable;
use Drupal\views\Plugin\views\cache\CachePluginBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Render\Markup;
use Drupal\core\Template\Attribute;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme().
 */
function bos_core_theme($existing, $type, $theme, $path) {
  return [];
}

/**
 * Display the help page.
 *
 * @param string $route_name
 *   As.
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *   As.
 *
 * @return array
 *   As.
 */
function bos_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case ("help.page.bos_core"):
      return BosCoreHelp::helpPage();
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function bos_core_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface $form_state) {
  $entity_form['revision_log_message']['#access'] = FALSE;
}

/**
 * Check view and records a GA pageview if this is a REST call.
 *
 * @param \Drupal\Views\ViewExecutable $view
 *   The view object.
 * @param array $output
 *   The output array.
 * @param Drupal\views\Plugin\views\cache\CachePluginBase $cache
 *   The cache.
 */
function bos_core_views_post_render(ViewExecutable $view, array &$output, CachePluginBase $cache) {
  $pageTitle = NULL;
  $view_display = $view->display_handler->display;

  if (isset($output)) {
    // If the view display type is rest-export, or else if the admin comment
    // contains the string gapost.
    if ($view_display["display_plugin"] == "rest_export"
      || (isset($view_display["display_options"]["display_comment"])
        && stripos($view_display["display_options"]["display_comment"], "gapost") != FALSE)) {

      $pageTitle = _bos_core_make_gapost_title($view_display, "CoB REST | ");
      if (isset($view_display["display_options"]["style"]["options"]["formats"])) {
        $pageTitle .= " (" . reset($view_display["display_options"]["style"]["options"]["formats"]) . ")";
      }
    }

    // Otherwise if the display type is a page, and there is a path which has
    // the string "rest" in it, or the admin title has string gapost in it.
    elseif ($view_display["display_plugin"] == "page"
      && isset($view_display["display_options"]["path"])) {

      if (stripos($view_display["display_options"]["path"], "rest") !== FALSE
        || (isset($view_display["display_options"]["display_comment"])
            && stripos($view_display["display_options"]["display_comment"], "gapost"))) {
        $pageTitle = _bos_core_make_gapost_title($view_display, "CoB REST | ");
      }
    }

    elseif ($view_display["display_plugin"] == "feed"
      && isset($view_display["display_options"]["path"])) {

      $pageTitle = _bos_core_make_gapost_title($view_display, "CoB | ");
    }
  }

  if (isset($pageTitle)) {
    \Drupal::service("bos_core.gapost")->pageview(\Drupal::request()
      ->getRequestUri(), $pageTitle);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_core_preprocess_toolbar(&$variables) {
  if (isset($variables["tabs"]["moderation_sidebar"])) {
    $status = Html::cleanCssIdentifier(strtolower($variables["tabs"]["moderation_sidebar"]["link"]["#attributes"]["data-label"]));
    $variables["tabs"]["moderation_sidebar"]["attributes"]->addClass("status-" . $status);
    if ($status == "draft-available") {
      $variables["tabs"]["moderation_sidebar"]["attributes"]->setAttribute("title", "Draft available.");
    }
  }
}

/**
 * Implements hook_moderation_sidebar_alter().
 *
 * @see https://www.drupal.org/files/issues/2018-09-17/moderation_sidebar-edit-access-check-3000387-2.patch
 */
function bos_core_moderation_sidebar_alter(array &$build, EntityInterface $entity) {
  // Remove salesforce if there is no permission.
  if (!\Drupal::currentUser()->hasPermission("view salesforce mapping")) {
    unset($build["actions"]['salesforce_mapping.entities:node.salesforce_tab']);
  }
  // Remove devel if there is no permission.
  if (!\Drupal::currentUser()->hasPermission("access devel information")) {
    unset($build["actions"]['devel.entities:node.devel_tab']);
  }
  // Remove Content Access if there are no permissions.
  if (!\Drupal::currentUser()->hasPermission("bypass node access")) {
    unset($build["actions"]["entity.node.content_access"]);
  }
  // Remove Clone if there are no permissions.
  if (!\Drupal::currentUser()->hasPermission("clone node entity")) {
    unset($build["actions"]["entity_clone.clone:node.clone_tab"]);
  }
  // Remove Usage if there are no permissions.
  if (!\Drupal::currentUser()->hasPermission("access entity usage statistics")) {
    unset($build["actions"]["entity_usage.entities:node.entity_usage"]);
  }

  if (isset($entity)) {
    // Remove Translation if there are no permissions.
    if (!\Drupal::currentUser()
      ->hasPermission("administer content")
      && !\Drupal::currentUser()
        ->hasPermission("translate any entity")
      && !\Drupal::currentUser()
        ->hasPermission("create content translations")
      && !\Drupal::currentUser()
        ->hasPermission("translate " . str_replace("_", " ", $entity->bundle()) . " node")) {
      unset($build["actions"]["content_translation.local_tasks:entity.node.content_translation_overview"]);
    }
    // Remove Delete option if there are no permissions.
    if (!\Drupal::currentUser()
      ->hasPermission("administer content")
      && !\Drupal::currentUser()
        ->hasPermission("delete any " . $entity->bundle() . " content")
      && (!(\Drupal::currentUser()
        ->hasPermission("delete own " . $entity->bundle() . " content")
        && $entity->getOwnerId() == \Drupal::currentUser()->id()))
      ) {
      unset($build["actions"]["entity.node.delete_form"]);
    }
    // Remove Edit option if there are no permissions.
    if (!\Drupal::currentUser()
      ->hasPermission("administer content")
      && !\Drupal::currentUser()
        ->hasPermission("edit any " . $entity->bundle() . " content")
      && (!(\Drupal::currentUser()
        ->hasPermission("edit own " . $entity->bundle() . " content")
        && $entity->getOwnerId() == \Drupal::currentUser()->id()))
      ) {
      unset($build["actions"]["entity.node.edit_form"]);
    }
    // Remove Revisions option if there are no permissions.
    if (!\Drupal::currentUser()
      ->hasPermission("administer content")
      && !\Drupal::currentUser()
        ->hasPermission("view all revisions")
      && !\Drupal::currentUser()
        ->hasPermission("view " . $entity->bundle() . " revisions")
    ) {
      unset($build["actions"]["entity.node.delete_form"]);
    }
  }

  $name = $build["info"]["#revision_author_link"]["#url"]->getOption('entity')->__get("realname");
  $build["info"]["#revision_author"] = $name;
  $build["info"]["#revision_author_link"]["#title"] = $name;

  /*
   * TODO: Revise this to manage buttons on moderation sidebar according to the
   * moderation state.
   * -> Create an array and implement on moderation workflow config page to set
   * a default state to move to from the state the entity is currently in.
   * e.g. When moderation state is "published", the default next state should be
   * "draft" etc.
   *
   */
  // Add direct link to edit latest version.
  if (!empty($build["actions"]["view_latest"])) {
    $url = Url::fromRoute("entity.node.edit_form", [
      'node' => $entity->id(),
    ],
    [
      'entity' => $entity,
      'language' => $entity->language(),
      'entity_type' => "node",
    ]);

    $build["actions"]["edit_latest"] = [
      "#title" => Markup::create("Edit existing draft"),
      "#attributes" => [
        "class" => [
          "moderation-sidebar-link",
          "button",
        ],
      ],
      "#url" => $url,
      "#weight" => -1,
      "#type" => "link",
    ];
    // Set some colors on the sidebar.
    $build["actions"]["view_latest"]["#weight"] = -2;
  }
  // Set some colors on the sidebar.
  if (isset($build["actions"]["view_latest"])) {
    $build["actions"]["view_latest"]["#attributes"]["class"][] = "button--view-draft clearfix";
  }
  if (isset($build["actions"]["edit"])) {
    $build["actions"]["edit_latest"]["#attributes"]["class"][] = "button--edit-draft clearfix";
  }
  if (isset($build["actions"]["edit_latest"])) {
    $build["actions"]["edit_latest"]["#attributes"]["class"][] = "button--edit-draft clearfix";
  }
  if (isset($build["actions"]["view_default"])) {
    $build["actions"]["view_default"]["#attributes"]["class"][] = "button--view-live clearfix";
  }
  if ($build["actions"]["delete"]) {
    $build["actions"]["delete"]["#attributes"]["class"][] = "button--delete clearfix";
  }
  if (isset($build["actions"]["quick_draft_form"]["discard_draft"])) {
    $build["actions"]["quick_draft_form"]["discard_draft"]["#attributes"]["class"][] = "button--delete clearfix";
  }
  if (isset($build["actions"]["quick_draft_form"]["submit_for_review"])) {
    $build["actions"]["quick_draft_form"]["submit_for_review"]["#attributes"]["class"][] = "button--review clearfix";
  }

}

/**
 * Implements theme_preprocess_moderation_sidebar_revision.
 *
 * Called when revisions button is clicked on moderation sidebar menu, and
 * sets up the revisions panel fo the sidebar.
 */
function bos_core_preprocess_moderation_sidebar_revision(array &$variables) {
  // Change username to email address.
  if ($account = Drupal::entityTypeManager()
    ->getStorage("user")
    ->loadByProperties(["name" => $variables["revision_author"]])) {
    $account = reset($account);
    $variables["revision_author_link"]["#title"] = $account->__get("realname");
  }
  // Theme the revisions sidebar panel.
  $attributes = new Attribute(["class" => ["revision-mod-type"]]);
  $route = $variables["revision_link"]->getUrl()->getRouteParameters(["node"]);
  $mod = _bos_core_moderation_decode($route);
  if ($mod['moderation_state'] != "unknown") {
    $variables["revision_mod_type"] = [
      "attributes" => $attributes->addClass($mod["class"]),
      "#markup" => Markup::create($mod['title']),
    ];
  }
}

/**
 * Implements hook_realname_update().
 *
 * Programmatically enforces realname regardless of realname module settings.
 */
function bos_core_realname_update($realname, $account) {
  $realname = _bos_core_name_from_email($account->get("mail")->value);
  \Drupal::database()->merge('realname')
    ->key(['uid' => $account->id()])
    ->fields([
      'realname' => $realname,
      'created' => \Drupal::time()->getRequestTime(),
    ])
    ->execute();
}

/**
 * Implements hook_contact_token_info().
 */
function bos_core_token_info() {
  $info = [];
  // Define a new token type for boston.
  $info['types']['boston'] = [
    'name' => t('Boston'),
    'description' => t('A token type for Boston.'),
  ];
  return $info;
}

/**
 * Helper to make a page title (to pass to Google Analytics).
 *
 * @param array $view_display
 *   The current view_display array.
 * @param string $pageTitle
 *   The current pageTitle.
 *
 * @return string
 *   The page title to be recorded in GA.
 */
function _bos_core_make_gapost_title(array $view_display, string $pageTitle = "") {
  $found = FALSE;

  if (isset($view_display["display_options"])) {
    if (!empty($view_display["display_options"]["title"])) {
      $pageTitle .= $view_display["display_options"]["title"];
      $found = TRUE;
    }
    else {
      if (!empty($view_display["display_title"])) {
        $pageTitle .= $view_display["display_title"] . " | ";
        $found = TRUE;
      }
      if (!empty($view_display["display_options"]["path"])) {
        $pageTitle .= $view_display["display_options"]["path"];
        $found = TRUE;
      }
    }
  }
  if (!$found) {
    $pageTitle .= $view_display["display_title"];
  }
  return rtrim($pageTitle, "\t\n\r\0\x0B |");
}

/**
 * Helper to uninstall original configs when not in config/default folder.
 *
 * @param string $module
 *   The module name.
 */
function _bos_core_uninstall_boston($module) {

  Drupal::logger("City of Boston")->notice("Removing config for: @module.", ["@module" => $module]);

  $configs = [];
  $path = drupal_get_path("module", $module);

  // Get a full list of .yml files defined by this module.
  foreach (["install", "optional", "required"] as $sub) {
    $fullpath = DRUPAL_ROOT . "/" . $path . "/config/" . $sub;
    if (is_dir($fullpath)) {
      $_configs = array_diff(scandir($fullpath), ['.', '..']);
      foreach ($_configs as $key => &$_configr) {
        if (stripos($_configr, ".yml") === FALSE) {
          unset($_configs[$key]);
        }
        else {
          $_configr = str_replace(".yml", "", $_configr);
        }
      }
      if (!empty($_configs)) {
        $configs = array_merge($configs, $_configs);
      }
    }
  }

  // Now uninstall those configs.
  foreach ($configs as $config) {
    try {
      if (is_string($config)) {
        $_config = Drupal::configFactory()->get($config);
        if (!empty($_config)) {
          Drupal::configFactory()->getEditable($config)->delete();
        }
      }
    }
    catch (ErrorException $e) {
      Drupal::logger("City of Boston")->notice("Could not find @elem.", ["@elem" => $config]);
      Drupal::messenger()->addWarning(t("Could not find @elem to uninstall.", ["@elem" => $config]), FALSE);
    }
  }

}

/**
 * Helper to copy module-related icons into expected location.
 *
 * @param string $module
 *   The module name.
 */
function _bos_core_install_icons($module) {
  $path = drupal::root() . "/sites/default/files/paragraphs_type_icon/";
  if (!file_exists($path)) {
    mkdir($path, 0777);
  }
  $modulePath = drupal::root() . '/' . drupal_get_path("module", $module);
  $dir = dir($modulePath);
  $icons = [];
  while (FALSE !== ($file = $dir->read())) {
    if (strpos($file, "icon.svg") > 0) {
      $icons[] = $file;
    }
  }
  foreach ($icons as $icon) {
    // Copy rather than move so we dont get git issues.
    if (file_exists($path . "/" . $icon)) {
      unlink($path . "/" . $icon);
    }
    copy($modulePath . "/" . $icon, $path . "/" . $icon);
  }
}

/**
 * Take a link paragraph and return the URL and title.
 */
function _bos_core_paragraph_extract_link($paragraph, $attributes = []) {
  $results = [];

  if (is_array($paragraph) && !empty($paragraph['0']['target_id'])) {
    $paragraph = Paragraph::load($paragraph['0']['target_id']);
  }

  if (is_a($paragraph, 'Drupal\paragraphs\Entity\Paragraph')) {
    switch ($paragraph->bundle()) {
      case 'lightbox_link':
        $link = $paragraph->get('field_lightbox_link')->getValue();
        $results['url'] = $link['0']['uri'];
        break;

      case 'document':
        $link = $paragraph->get('field_document')->getValue();
        $results['url'] = _bos_core_get_file_link($link['0']['target_id'], NULL, $attributes);
        $results['title'] = 'TMP';
        $results['link'] = Link::fromTextAndUrl($results['title'], $url)->toString();
        break;

      case 'external_link':
        $link = $paragraph->get('field_external_link')->getValue();
        $results['url'] = $link['0']['uri'];
        $results['title'] = $link['0']['title'];
        $url = Url::fromUri($link['0']['uri'], ['attributes' => $attributes]);
        $results['link'] = Link::fromTextAndUrl($link['0']['title'], $url)->toString();
        break;

      case 'internal_link':
        $link = $paragraph->get('field_internal_link')->getValue();
        preg_match('~/(.*)~', $link['0']['uri'], $match);
        $url = Url::fromRoute('entity.node.canonical', ['node' => $match['1']], ['attributes' => $attributes]);
        $results['url'] = $url->toString();
        $results['title'] = $link['0']['title'];
        $results['link'] = Link::fromTextAndUrl($link['0']['title'], $url)->toString();
        break;
    }
  }
  return $results;
}

/**
 * Creates link to file managed by Drupal.
 *
 * @param mixed $fid
 *   File ID.
 * @param string $link_text
 *   Link Text.
 * @param array $attributes
 *   Link attributes.
 */
function _bos_core_get_file_link($fid, string $link_text = NULL, array $attributes = []) {
  if (is_array($fid) && !empty($fid['0']['target_id'])) {
    $fid = $fid['0']['target_id'];
  }

  $uri = file_load($fid)->getFileUri();
  if (!$link_text) {
    return Url::fromUri(file_create_url($uri, $attributes))->toString();
  }
  else {
    return Link::fromTextAndUrl($link_text, Url::fromUri(file_create_url($uri), $attributes))->toString();
  }
}

/**
 * Get filename.
 *
 * @param string $fid
 *   File ID.
 *
 * @return bool|string
 *   The filename or false if $fid not found.
 */
function _bos_core_get_file_name(string $fid) {
  $out = FALSE;
  if ($file = File::load($fid)) {
    $name = $file->get('filename')->getValue();
    $out = $name['0']['value'];
  }
  return $out;
}

/**
 * Returns the moderation state for the node and/or revision.
 *
 * @param array $node_info
 *   Node and Revision information.
 *
 * @return array|mixed
 *   Array with moderation values for formatting
 */
function _bos_core_moderation_decode(array $node_info) {
  $output = [
    "title" => "UNKNOWN",
    "class" => "title--unknown",
    "moderation_state" => "unknown",
  ];
  try {
    if (isset($node_info["node_revision"])) {
      $vid = $node_info["node_revision"];
      $node = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadRevision($vid);
    }
    else {
      $nid = $node_info["node"];
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    }
  }
  catch (Exception $e) {
    return $output;
  }

  if ($node) {
    $moderation_text = [
      "archive" => ["title" => "ARCHIVE", "class" => "title--archive"],
      "draft" => ["title" => "DRAFT", "class" => "title--draft"],
      "published" => ["title" => "PUBLISHED", "class" => "title--published"],
      "needs_review" => ["title" => "REVIEW", "class" => "title--review"],
    ];
    $mod_state = $node->get('moderation_state')->getString();
    $mod = $moderation_text[$mod_state];
    if ($node->isLatestRevision()) {
      $mod["title"] = "LATEST REVISION (" . $mod["title"] . ")";
    }
    $output = $mod + ["moderation_state" => $mod_state];
  }

  return $output;
}

/**
 * Takes an email (assumed boston.gov) and returns the username.
 *
 * @param string $email
 *   The email (usually ending '@boston.gov')
 *
 * @return string
 *   Best guess at the users name.
 */
function _bos_core_name_from_email(string $email) {
  if (preg_match("/.*\@/", $email, $output)) {
    return ucwords(str_replace(".", " ", trim($output[0], "@")));
  }
  else {
    return $email;
  }
}
