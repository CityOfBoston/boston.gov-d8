<?php

/**
 * @file
 * Defines Shortcodes to allow forms to be embedded through tokens.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_shortcode_info().
 *
 * See comments below for explanation.
 */
function bos_shortcodes_shortcode_info() {
  return [
    'poll' => [
      'title' => t('Poll'),
      'description' => t('Inserts a poll.'),
      'process callback' => 'bos_shortcodes_shortcode_poll',
      'tips callback' => 'bos_shortcodes_shortcode_poll_tip',
      'attributes callback' => 'bos_shortcodes_shortcode_poll_attributes',
    ],
  ];
}

/**
 * Implements hook_theme().
 *
 * Defines theme functions for shortcodes.
 */
function bos_shortcodes_theme() {
  return [
    'shortcode_form' => [
      'render element' => 'form',
    ],
    'shortcode_poll' => [
      'variables' => [
        'content' => '',
      ],
      'template' => 'templates/shortcode-poll',
    ],
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function bos_shortcodes_form_bos_towing_lookup_form_alter(&$form, FormStateInterface $form_state, $form_id) {
return;
}

/**
 * Implements bos_shortcodes_shortcode_poll().
 *
 * Callback function for poll shortcode.
 *
 * Calling
 * [form id=X /]
 *
 * @param array $attrs
 *   Attributes from the shortcode.
 * @param string $text
 *   Text provided by the shortcode.
 *
 * @return string
 *   Returns rendered form.
 */
function bos_shortcodes_shortcode_poll(array $attrs, $text) {

  $attrs = shortcode_attrs(array(
    'id' => '',
  ),
    $attrs
  );

  if ($attrs['id'] == '') {
    return implode(',', $attrs);
  }
  $poll = node_load($attrs['id']);
  // If the id wasn't a valid node id, or the content type is not a poll, just
  // return an empty string to replace the shortcode.
  if ($poll === FALSE || $poll->type !== 'advpoll') {
    return '';
  }
  $content = NULL;
  $output = '';
  if ($poll) {
    $poll_content = node_view($poll, "poll_stub");
    $output = theme('shortcode_poll', array('content' => $poll_content));
  }
  return $output;
}

/**
 * Attributes form element for poll shortcode.
 *
 * Used by shortcode_wysiwyg module to add poll elements for attributes.
 */
function bos_shortcodes_shortcode_poll_attributes($poll, &$poll_state) {
  $poll['id'] = array(
    '#title' => t('Poll NID'),
    '#type' => 'textfield',
    '#states' => array(
      'visible' => array(
        ':input[name="shortcode"]' => array('value' => 'poll'),
      ),
    ),
  );

  return $poll;
}

/**
 * Implements bos_shortcodes_shortcode_poll_tip().
 *
 * This function outputs some tips to the user beneath the WYSIWYG editor so
 * they know what the shortcode does and how to use it.
 */
function bos_shortcodes_shortcode_poll_tip($format, $long) {
  $output = array();
  $output[] = '<p><strong>' . t('[poll id="nid" /]') . '</strong> ';
  if ($long) {
    $output[] = t('Outputs a poll.') . '</p>';
  }
  else {
    $output[] = t('Outputs a poll.') . '</p>';
  }

  return implode(' ', $output);
}

/**
 * Implements hook_filter_info_alter().
 *
 * Set the shortcode cache element to FALSE so that we do not cache shortcodes.
 */
function bos_shortcodes_filter_info_alter(&$info) {
  if (array_key_exists('shortcode', $info)) {
    $info['shortcode']['cache'] = FALSE;
  }
}
