<?php

/**
 * @file
 * Primary module hooks for bos_components module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

/**
 * Implements hook_theme().
 */
function bos_components_theme() {
  return [];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_components_preprocess_field(&$variables) {
  _bos_component_embed_level($variables);

  if ($variables['entity_type'] == "paragraph") {
    switch ($variables['field_name']) {
      case 'field_component_title':
        if ($variables['is_component_field']) {
          $component = $variables['element']['#object'];
          $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
          $short_title = $component->getTranslation($language)->get('field_short_title')->getValue();
          if ($short_title !== FALSE) {
            $variables['short_title'] = $short_title[0]['value'];
            $short_title_link = preg_replace('@^[0-9\s]+@', '', strtolower($short_title[0]['value']));
            $variables['short_title_link'] = preg_replace('@[^a-z0-9-]+@', '-', $short_title_link);
          }
        }
    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_components_preprocess_paragraph(&$variables) {
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function bos_components_theme_suggestions_page_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function bos_components_theme_suggestions_node($variables) {
  return [];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function bos_components_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $field_name = $variables['element']['#field_name'];;
  $view_mode = $variables['element']['#view_mode'];
  $bundle = $variables['element']['#bundle'];

  // Add suggestions for paragraphs.
  if ('paragraph' == $entity_type = $variables['element']['#entity_type']) {
    _bos_component_embed_level($variables);
    if ($variables['is_component_field']) {
      $suggestions[] = 'field__component__' . $variables['element']['#field_name'];
    }
    if ($variables['is_subcomponent_field']) {
      $suggestions[] = 'field__subcomponent__' . $variables['element']['#field_name'];
    }
  }
  $base_suggestion = "field__$field_name";

  // Add suggestions for taxonomy terms.
  if ('taxonomy_term' == $entity_type = $variables['element']['#entity_type']) {
    $suggestions[] = "{$base_suggestion}__{$bundle}";
  }
  $base_suggestion = "field__{$field_name}";
  // Add view mode suggestions.
  $suggestions[] = "{$base_suggestion}__mode__{$view_mode}";
  $suggestions[] = "{$base_suggestion}__{$bundle}__mode__{$view_mode}";
  $suggestions[] = "{$base_suggestion}__type__{$entity_type}__mode__{$view_mode}";
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function bos_components_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  if (!isset($variables['elements']['#paragraph'])) {
    return;
  }

  $parent = $variables['elements']['#paragraph']->getParentEntity()->bundle();
  $paragraphType = $variables['elements']['#paragraph']->bundle();

  switch ($paragraphType) {
    case "bos311":
      $suggestions[] = 'paragraph__' . $parent . '__' . $paragraphType;
      $suggestions[] = 'paragraph__node__' . $paragraphType;
      break;

    default:
      return;
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_components_preprocess_field_field_component_title(&$variables) {

}

/**
 * Sets is_component and is_subcomponent variables.
 *
 * Establishes whether the object subject of the variables array is embedded
 * directly on a node or taxonomy term, or if it is embedded withing some other
 * component.
 *
 * @param array $variables
 *   Standard Drupal preprocess variables object.
 */
function _bos_component_embed_level(array &$variables) {
  $variables['is_component_field'] = $variables['is_subcomponent_field'] = FALSE;
  if (isset($variables['element']['#entity_type'])) {
    $componentParents = ['node', 'taxonomy_term', 'user'];
    $variables['entity_type'] = $variables['element']['#entity_type'];
    if (isset($variables["element"]["#object"]) && !in_array($variables["element"]["#object"]->getEntityType()->id(), $componentParents)) {
      try {
        $parentEntity = $variables["element"]["#object"]->getParentEntity();
        if (!empty($parentEntity)) {
          $variables['is_component_field'] = in_array($parentEntity->getEntityType()->id(), $componentParents);
          $variables['is_subcomponent_field'] = !($variables['is_component_field']);
        }
      }
      catch (Error $e) {

      }
    }
  }
}
