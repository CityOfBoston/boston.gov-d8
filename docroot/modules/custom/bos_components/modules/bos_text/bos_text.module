<?php

/**
 * @file
 * Main file for the bos_text module.
 */

/**
 * Implements hook_theme().
 *
 * Register module templates.
 */
function bos_text_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__text' => [
      'base hook' => 'paragraph',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'paragraph--text',
    ],
    'paragraph__text_one_column' => [
      'base hook' => 'paragraph',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'paragraph--text-one-column',
    ],
    'paragraph__text_two_column' => [
      'base hook' => 'paragraph',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'paragraph--text-two-column',
    ],
    'paragraph__text_three_column' => [
      'base hook' => 'paragraph',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'paragraph--text-three-column',
    ],
    'field__component__field_contact' => [
      'base hook' => 'field',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'field--component--field-contact',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_text_preprocess_paragraph(&$variables) {
  // Restrict to bundles from this module only.
  if (empty($variables["paragraph"]->bundle()) || !in_array($variables["paragraph"]->bundle(), [
    "text",
    "text_one_column",
    "text_two_column",
    "text_three_column",
  ])) {
    return;
  }

  // Add standard classes.
  $variables['attributes']['class'][] = 'entity';
  $variables['attributes']['class'][] = 'entity-paragraphs-item';
  $variables['attributes']['class'][] = 'paragraphs-item-' . _make_class($variables['paragraph']->bundle());
  $variables['attributes']['class'][] = 'component-section';

  // Manage background images.
  if (isset($variables["paragraph"]->field_background_image->value)) {
    $variables['attributes']['class'][] = _make_class($variables["paragraph"]->field_background_image->value);
  }

  // Assign tow/three_column classes.
  if ($variables["paragraph"]->bundle() == "text_two_column") {
    $variables['attributes']['class'][] = $variables["paragraph"]->field_column_configuration->value;
  }

  // Set a flag if the title is to be hidden in twig.
  if ($variables["paragraph"]->bundle() == "text") {
    $variables['hideTitle'] = $variables['content']['field_hide_title_bar']['#items']->value;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_text_preprocess_field(&$variables) {
  // Restrict to bundles from this module only.
  if (empty($variables["element"]['#bundle']) || !in_array($variables["element"]['#bundle'], [
    "text",
    "text_one_column",
    "text_two_column",
    "text_three_column",
  ])) {
    return;
  }
  $variables['attributes']['class'][] = "field";
  if ($variables['label_hidden']) {
    $variables['attributes']['class'][] = "field-label-hidden";
  }
  if ($variables['is_subcomponent_field']) {
    $variables['attributes']['class'][] = "field-subcomponent";
  }
  elseif ($variables['is_component_field']) {
    $variables['attributes']['class'][] = "field-component";
  }
}

/**
 * Removes reserved chars from class string.
 *
 * @param string $class
 *   The class which is to be standardised.
 *
 * @return mixed
 *   Standardised class where "-" has been replaced with "-".
 */
function _make_class(string $class) {
  return str_replace("_", "-", $class);
}
