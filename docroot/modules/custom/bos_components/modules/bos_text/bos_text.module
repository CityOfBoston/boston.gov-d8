<?php

/**
 * @file
 * Main file for the bos_text module.
 */

use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme().
 *
 * Register module templates.
 */
function bos_text_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__text' => [
      'base hook' => 'paragraph',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'paragraph--text',
    ],
    'paragraph__text_one_column' => [
      'base hook' => 'paragraph',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'paragraph--text-one-column',
    ],
    'paragraph__text_two_column' => [
      'base hook' => 'paragraph',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'paragraph--text-two-column',
    ],
    'paragraph__3_column_w_image' => [
      'base hook' => 'paragraph',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'paragraph--3-column-w-image',
    ],
    'paragraph__columns' => [
      'base hook' => 'paragraph',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'paragraph--columns',
    ],
    'paragraph__text_three_column' => [
      'base hook' => 'paragraph',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'paragraph--text-three-column',
    ],
    'paragraph__header_text' => [
      'base hook' => 'paragraph',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
    ],
    'field__component__field_columns' => [
      'base hook' => 'field',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'field--component--field-columns',
    ],
    'field__field_link' => [
      'base hook' => 'field',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
      'template' => 'field--field-link',
    ],
    'field__field_intro_text' => [
      'base hook' => 'field',
      'path' => 'modules/custom/bos_components/modules/bos_text/templates',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_text_preprocess_paragraph__header_text(&$variables) {
  _bos_components_fix_attributes($variables);
  // In some cases we will need to bring the host content title into the
  // header text component so we can display it within the header text component
  // template.
  // @var \ParagraphsItemEntity $paragraph.
  $paragraph = $variables['elements']['#paragraph'];
  $parent_id = $paragraph->getParentEntity();
  if (isset($parent_id)) {
    $parent = \Drupal::entityTypeManager()->getStorage('node')->load($parent_id->id());
  }
  $host_title = \Drupal\Component\Utility\Html::escape($parent->label());
  //$host_title = check_plain($parent->title);
  $variables['host_title'] = $host_title;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_text_preprocess_paragraph(&$variables) {
  // Restrict to bundles from this module only.
  if (empty($variables["paragraph"]->bundle()) || !in_array($variables["paragraph"]->bundle(), [
    "text",
    "text_one_column",
    "text_two_column",
    "text_three_column",
    "3_column_w_image",
  ])) {
    return;
  }

  // Add standard classes.
  $variables['attributes']['class'][] = 'entity';
  $variables['attributes']['class'][] = 'entity-paragraphs-item';
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('paragraphs-item-' . $variables['paragraph']->bundle());
  $variables['attributes']['class'][] = 'component-section';

  // Manage background images.
  if (isset($variables["paragraph"]->field_background_image->value)) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables["paragraph"]->field_background_image->value);
  }

  // Assign tow/three_column classes.
  if ($variables["paragraph"]->bundle() == "text_two_column") {
    $variables['attributes']['class'][] = $variables["paragraph"]->field_column_configuration->value;
  }

  // Set a flag if the title is to be hidden in twig.
  if ($variables["paragraph"]->bundle() == "text") {
    $variables['hideTitle'] = $variables['content']['field_hide_title_bar']['#items']->value;
  }
  elseif ($variables["paragraph"]->bundle() == "header_text") {
    $host = $variables["paragraph"]->getParentEntity();
    if ($host && $host->getEntityTypeId() == 'node') {
      $variables['host_title'] = Html::escape($host->getTitle());
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_text_preprocess_field(&$variables) {
  // Restrict to bundles from this module only.
  if (empty($variables["element"]['#bundle']) || !in_array($variables["element"]['#bundle'], [
    "text",
    "text_one_column",
    "text_two_column",
    "text_three_column",
    "3_column_w_image",
  ])) {
    return;
  }
  $variables['attributes']['class'][] = "field";
  if ($variables['label_hidden']) {
    $variables['attributes']['class'][] = "field-label-hidden";
  }
  if ($variables['is_subcomponent_field']) {
    $variables['attributes']['class'][] = "field-subcomponent";
  }
  elseif ($variables['is_component_field']) {
    $variables['attributes']['class'][] = "field-component";
  }
  if ($variables["element"]['#bundle'] == "3_column_w_image") {
    foreach ($variables['attributes']['class'] as $key => &$class) {
      $class = str_replace('field', 'entity', $class);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_text_preprocess_field__field_intro_text(&$variables) {
  $variables['attributes']->addClass("intro-text");
  $view_mode = $variables['element']['#view_mode'];
  $bundle = $variables['element']['#bundle'];
  // Add view modes and paragraph items to this array that
  // should not have additional classes.
  $intro_stripped = [
    'listing',
    'short_listing',
    'long_listing',
    'featured_item',
    'user_action',
  ];

  // The squiggle should not be present.
  $no_squiggle = [
    'hero_image',
  ];

  // If view mode and paragraph item is not in the $intro_stripped array
  // add additional classes.
  if (!in_array($view_mode, $intro_stripped) && !in_array($bundle, $intro_stripped)) {
    $variables['attributes']->addClass("supporting-text");
    // Don't add squiggle border to intro-field in hero image component.
    if (!in_array($bundle, $no_squiggle)) {
      $variables['attributes']->addClass("squiggle-border-bottom");
    }
  }
}
