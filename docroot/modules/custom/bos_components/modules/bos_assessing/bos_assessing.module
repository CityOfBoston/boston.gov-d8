<?php

/**
 * @file
 * Module file for bos_assessing.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\bos_pdfmanager\PdfFilenames;
use Drupal\bos_sql\Form\DbconnectorSettingsForm;

/**
 * Implements hook_theme().
 */
function bos_assessing_theme() {
  $theme['bos_assessing'] = [
    'template' => 'bos-assessing',
    'variables' => [
    	'data_full' => NULL,
      'data_res' => NULL,
      'data_condo' => NULL,
      'data_value_history' => NULL,
      'data_owner' => NULL,
      'data_owners_current' => NULL,
      'data_coords' => NULL,
      'data_year_current' => NULL,
      'data_year_fiscal' => NULL,
    ]
  ];
  return $theme;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_assessing_preprocess_page(&$variables) {
  $pathinfo = Drupal::request()->getPathInfo();
  $pathinfo = explode("/", $pathinfo);
  if (end($pathinfo) != "edit" && end($pathinfo) != "revisions" && strpos($pathinfo[1], 'assessing-online') !== false) {
     _bos_content_fix_attributes($variables);
    // Make responsive to menu appearing on right by adding class mn.
    $variables["attributes"]->addClass("mn");
    $variables["attributes"]->addClass("page");
  }
}

function bos_assessing_library_info_build() {
  $libraries = [];
  $modName = basename(__FILE__, ".module");
  $modulePath =\Drupal::service('extension.path.resolver')->getPath("module", $modName);
  //create timestamp for cachebust on Incapsula
  $cb = time();

  //values if opting to use Google Maps
  /**
    $api_key = \Drupal::config('geolocation_google_maps.settings')->get("google_map_api_key");
    $js_path = "https://maps.googleapis.com/maps/api/js?key=$api_key&libraries=drawing";
  **/

  $libraries['assessing_map'] = [
    'version' => '1.x',
    'js' => [
      'https://unpkg.com/leaflet@1.7.1/dist/leaflet.js' => ['type' => 'external', 'minified' => TRUE],
      '/modules/custom/bos_components/modules/bos_assessing/js/assessing_map.js?cb_'.$cb => ['type' => 'external', 'minified' => TRUE],
    ],
    'css' => [
      'layout' => [
          'https://unpkg.com/leaflet@1.7.1/dist/leaflet.css' => ['type' => 'external'],
          '/modules/custom/bos_components/modules/bos_assessing/css/assessing.css' => [],
        ],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_cron().
 */
function bos_assessing_cron() {

  // Find the folder where PDF files are cached.
  $cache_folder = new PdfFilenames(\Drupal::service('file_system')->realpath("private://assessing-cache"));

  // List 100 physically cached assessing PDF files from the cache folder.
  $physical_files = [];
  $d = dir($cache_folder->path);
  while (count($physical_files) < 100 && FALSE !== ($file = $d->read())) {
    if (preg_match("~FY20[0-9][0-9]_[RPA].*\.pdf~", $file)) {
      $physical_files[] = $file;
    }
  }
  $d->close();

  // Update the physical files array by removing those which are not expired in
  // the cache-list.
  $cache_list = \Drupal::cache("assessing_pdf")
    ->getMultiple($physical_files);

  // Finally, remove the expired files.
  foreach ($physical_files as $file) {
    unlink("{$cache_folder->path}/{$file}");
  }

}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function bos_assessing_form_bos_sql_config_alter(&$form, FormStateInterface $form_state, $form_id) {
  /**
   * This will try to inject the values from the bos_sql.settings config in the
   * database (if there are any) into the bos_sql config form.
   *
   * NOTE: If there is an environment variable set for the DBConnector, then the
   * values in that variable will always override whatever is sent from here.
   *
   * In use, the DBConnector will always use an environment variable value for
   * this $appname, so the bos_sql.settings is really intended for testing and
   * debugging on non-prod environments.
   */
  $config = \Drupal::config('bos_sql.settings');
  $appname = "assessing";
  if (!empty($config->get($appname))) {
    $config = $config->get($appname);
    DbconnectorSettingsForm::addConfig($form, $appname, $config["username"], $config["password"], $config["token"], "v1");
  }
  else {
    DbconnectorSettingsForm::addConfig($form, $appname, "", "", "", "v1");
  }

}
