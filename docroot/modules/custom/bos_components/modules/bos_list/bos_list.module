<?php

/**
 * @file
 * The Base module file for bos_list module.
 */

use Drupal\Core\Link;

/**
 * Implements hook_theme().
 */
function bos_list_theme() {
  $theme['paragraph__list'] = [
    'base hook' => 'paragraph',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['field__component__field_component_title'] = [
    'base hook' => 'field',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view__metrolist_affordable_housing'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_exposed_form__metrolist_affordable_housing'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view__bids_rfps'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_exposed_form__bids_rfps'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view_unformatted__departments_listing'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_exposed_form__departments_listing'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['node__department_profile__department_listing'] = [
    'base hook' => 'node',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view__news_landing'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_exposed_form__news_landing'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view__calendar'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_exposed_form__calendar'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_exposed_form__calendar'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view__places'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_exposed_form__places'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view__public_notice'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_exposed_form__public_notice'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['node__public_notice__listing'] = [
    'base hook' => 'node',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view_unformatted__public_notice'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view__status_displays'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view__topic_landing_page'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_exposed_form__topic_landing_page'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view_unformatted__topic_landing_page'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_view__transactions'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  $theme['views_exposed_form__transactions'] = [
    'base hook' => 'views_view',
    'path' => 'modules/custom/bos_components/modules/bos_list/templates',
  ];
  return $theme;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bos_list_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  if ($form["#id"] == 'views-exposed-form-places-page-1') {
    $form['title']['#attributes']['class'] = ['sf-i-f', 'form-text'];
    $form['title']['#attributes']['placeholder'] = 'Search...';
    $form["actions"]["submit"]["#attributes"]['class'] = ['sf-i-b', 'form-submit'];
    unset($form["#info"]["filter-title"]["label"]);
  }
  if ($form["#id"] == 'views-exposed-form-transactions-page-1') {
    $form['title']['#attributes']['class'] = ['sf-i-f', 'form-text'];
    $form['title']['#attributes']['placeholder'] = 'Search transactions...';
    $form["actions"]["submit"]["#attributes"]['class'] = ['sf-i-b', 'form-submit'];
    unset($form["#info"]["filter-title"]["label"]);
  }
}

/**
 * Implements hook_preprocess_node__BUNDLE().
 */
function bos_list_preprocess_node(&$variables) {
  $type = $variables['node']->getType();
  if ($type == 'topic_page') {
    // Add some custom variables to the topic page template for listing_long.
    if ($variables['view_mode'] == 'listing_long') {
      $node = $variables["elements"]["#node"];
      $components_field = $node->get('field_components')->getValue();
      $num_components = count($components_field);
      $variables['num_components'] = 0;
      // We show three nav links, then want to denote
      // the remainder of the links for the See More link.
      if ($num_components > 3) {
        $variables['num_components'] = $num_components - 3;
      }

      $comp_entity_id_array = [];
      foreach ($components_field as $comp) {
        $comp_entity_id_array[] = $comp['target_id'];
      }
      // Here we need to load all the components because
      // the not all components have a short title
      // required so we do not create nav link for it.
      $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
      $components = $paragraph_storage->loadMultiple($comp_entity_id_array);
      if (!empty($components)) {
        $nav_links = [];
        $num_nav_links = 0;
        foreach ($components as $comp) {
          $short_title_array = $comp->get('field_short_title')->getValue();
          if (!empty($short_title_array)) {
            $short_title = $short_title_array[0]['value'];
            $short_title = strtoupper($short_title);
            $jump_link = strtolower(trim($short_title));
            $jump_link = str_replace(" ", "-", $jump_link);
            $jump_link = str_replace("&amp;", "n", $jump_link);
            $short_title = str_replace("&AMP;", "&", $short_title);
            $nav_links[] = Link::createFromRoute(
              $short_title,
              'entity.node.canonical',
              ['node' => $node->id()],
              [
                'fragment' => $jump_link,
                'attributes' => ['class' => 'scroll-link-js'],
              ]
            );
            $num_nav_links++;
            // Show only the first three links.
            // After we've computed three links, break.
            if ($num_nav_links == 3) {
              break;
            }
          }
        }
        $variables['nav_links'] = $nav_links;
      }
    }
  }
  if ($type == 'public_notice') {
    $time_range_view_modes = array(
      'calendar_listing',
      'listing',
      'full',
    );

    if (in_array($variables['view_mode'], $time_range_view_modes) && $variables['type'] === 'public_notice') {
      // We need to add a variable which contains the time range output to be
      // displayed. We'd have to override some theming otherwise and it's not
      // worth the trouble. The field_event_dates field is required so we don't
      // have to worry about checking for it.
      $dates = field_get_items('node', $variables['node'], 'field_public_notice_date');
      if ($dates !== FALSE) {
        $timezone = $dates[0]['timezone'];
        // Add '+0000' so that strtotime doesn't try to convert a UTC time,
        // we'll do that in format_date().
        $start_time = strtotime($dates[0]['value'] . " +0000");
        $end_time = strtotime($dates[0]['value2'] . " +0000");
        $time_range = format_date($start_time, 'calendar_time', '', $timezone);
        if ($start_time !== $end_time) {
          $time_range .= '-' . format_date($end_time, 'calendar_time', '', $timezone);
        }
        $variables['time_range'] = $time_range;

        // We also want to show the repeat rule, and it needs to be isolated from
        // the full render of the date since it will need to be displayed in a
        // different place than the date.
        if (!empty($dates[0]['rrule'])) {
          $variables['repeat_rule'] = boston_date_repeat_rrule_description($dates[0]['rrule']);
        }
      }
      else {
        $variables['time_range'] = '';
      }
    }
  }
}
