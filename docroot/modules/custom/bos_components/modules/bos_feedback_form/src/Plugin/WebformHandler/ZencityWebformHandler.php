<?php

namespace Drupal\bos_feedback_form\Plugin\WebformHandler;

use Drupal\bos_core\Controllers\Curl\BosCurlControllerBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\Annotation\WebformHandler;
use Drupal\webform\Plugin\WebformHandlerBase;
use Drupal\webform\webformSubmissionInterface;
use Exception;

/**
 * Form submission handler.
 *
 * @WebformHandler(
 *   id = "zencity_form_handler",
 *   label = @Translation("Post to Zencity"),
 *   category = @Translation("Vendor Dashboard"),
 *   description = @Translation("Send submission to Zencity."),
 *   cardinality = \Drupal\webform\Plugin\WebformHandlerInterface::CARDINALITY_SINGLE,
 *   results = \Drupal\webform\Plugin\WebformHandlerInterface::RESULTS_PROCESSED,
 * )
 */
class ZencityWebformHandler extends WebformHandlerBase {

  /**
   * @inheritdoc
   */
  public function defaultConfiguration(): array {
    return [
        'zencity_form_handler_url' => '',
        'zencity_form_handler_token' => '',
      ] + parent::defaultConfiguration();
  }

  /**
   * @inheritDoc
   */
  public function buildConfigurationForm(array $form, FormStateInterface $form_state): array {
    $form['zencity_form_handler'] = [
      '#type' => 'details',
      '#title' => $this->t('Zencity Submission Environment'),
      '#open' => TRUE,
    ];
    $form['zencity_form_handler']['zencity_form_handler_url'] = [
      '#type' => 'select',
      '#title' => $this->t('Zencity Form Handler URL'),
      '#options' => [
        'https://api-staging.zencity.io' => 'test',
        'https://api.zencity.io' => 'production',
      ],
      '#default_value' => $this->configuration['zencity_form_handler_url'],
      '#description' => $this->t('Enter Zencity Form Handler URL.'),
    ];
    $form['zencity_form_handler']['zencity_form_handler_token'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Zencity Form Handler Token'),
      '#default_value' => $this->configuration['zencity_form_handler_token'],
      '#description' => $this->t('Enter Zencity Form Handler Token.'),
    ];
    return parent::buildConfigurationForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  /**
   * {@inheritdoc}
   */
  public function submitConfigurationForm(array &$form, FormStateInterface $form_state): void {
    $this->configuration['zencity_form_handler_url'] = $form_state->getValue('zencity_form_handler')['zencity_form_handler_url'];
    $this->configuration['zencity_form_handler_token'] = $form_state->getValue('zencity_form_handler')['zencity_form_handler_token'];
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state, WebformSubmissionInterface $webform_submission): void {
    // The form is being submitted. Handle it here.
    $post = new BosCurlControllerBase(get_response_headers: FALSE);
    try {
      $post->makeCurl($this->url(), $this->payload($form_state), $this->headers());
      $response = $post->executeCurl();
    }
    catch (Exception $e) {
      if ($post->error()) {
        $this->messenger()
          ->addError($this->t('Error: @message', ['@message' => $post->error()]));
      }
      else {
        $this->messenger()
          ->addError($this->t('Error: @message', ['@message' => $e->getMessage()]));
      }
    }

  }

  /**
   * Returns the URL for the ZenCity free-form integration API.
   *
   * This method concatenates the base URL with the jurisdiction ID
   * to generate the complete endpoint URL for the ZenCity free-form integration API.
   *
   * @return string
   *   The complete URL for the ZenCity free-form integration API.
   */
  private function url():string {
    return $this->configuration['zencity_form_handler_url'] . "/api/mario/integrations/free-form?jurisdictionId=" . $this->configuration['zencity_form_handler_token'];
  }

  /**
   * Generate payload from form state values.
   *
   * This method takes a FormStateInterface object as a parameter and generates a payload from the values contained in it.
   * It loops through each key-value pair in the form state values and processes them accordingly. If a value is an array,
   * it is imploded with comma separator. Each value is then URL encoded. The final payload is returned as a JSON string.
   *
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The FormStateInterface object containing the form state values.
   *
   * @return string
   *   The payload generated from the form state values, encoded as a JSON string.
   */
  private function payload(FormStateInterface $form_state):string {

    $payload = [];

    foreach ($form_state->getValues() as $key => $value) {
      if (is_array($value)) {
        $value = implode(',', $value);
      }
      $payload[$key] = urlencode($value);
    }

    // todo: add in the department and the calling url.

    return json_encode($payload);
  }

  /**
   * Get headers for HTTP request.
   *
   * This method returns an array of headers to be used in an HTTP request. The array contains the 'Content-Type' header
   * with value 'application/json'.
   *
   * @return array
   *   An array of headers to be used in an HTTP request.
   */
  private function headers():array {
    return [
      'Content-Type: application/json',
    ];
  }

}
