<?php

/**
 * @file
 * The Base module file for bos_news_announcements module.
 */

use Drupal\Component\Utility\Html;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function bos_news_and_announcements_theme() {
  $theme['paragraph__news_and_announcements'] = [
    'base hook' => 'paragraph',
    'path' =>\Drupal::service('extension.path.resolver')->getPath('module', 'bos_news_and_announcements') . '/templates',
  ];
  $theme['views_view_unformatted__news_and_announcements'] = [
    'base hook' => 'view',
    'path' =>\Drupal::service('extension.path.resolver')->getPath('module', 'bos_news_and_announcements') . '/templates',
  ];
  $theme['views_view_fields__news_and_announcements'] = [
    'base hook' => 'view',
    'path' =>\Drupal::service('extension.path.resolver')->getPath('module', 'bos_news_and_announcements') . '/templates',
  ];
  $theme['viewfield__paragraph__news_and_announcements'] = [
    'base hook' => 'viewfield',
    'path' =>\Drupal::service('extension.path.resolver')->getPath('module', 'bos_news_and_announcements') . '/templates',
  ];
  return $theme;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_news_and_announcements_preprocess_paragraph__news_and_announcements(&$variables) {
  if (!empty($variables['paragraph'])) {
    $paragraph = $variables['paragraph'];

    if (!$paragraph->get('field_link')->isEmpty()) {
      $cta = _bos_core_paragraph_extract_link(
        $paragraph->get('field_link')->getValue(),
        ['class' => 'btn']
      );
      if (!empty($cta['link'])) {
        $variables['cta'] = $cta['link'];
      }
    }
    if ($variables["paragraph"]->bundle() == "news_and_announcements" && isset($variables['content']['field_hide_title_bar']['#items'])) {
      $variables['hideTitle'] = $variables['content']['field_hide_title_bar']['#items']->value;
    }
  }
}

/**
 * Implements hook_preprocess_views_view_fields(). and
 */
function bos_news_and_announcements_preprocess_views_view_fields__news_and_announcements(&$variables) {

  $photo_id = Html::getUniqueId('cd-ic-' . $variables["row"]->nid);
  $variables['photo_id'] = $photo_id;

  if ($node = $variables["row"]->_entity) {
    $type = $node->getType();
    $variables['type_class'] = 'news-item-' . $type;
    $variables["thumbnail"] = ($node->hasField("field_thumbnail") && $node->get("field_thumbnail")->target_id);
  }
}

/**
 * Implements hook_views_plugins_argument_alter().
 */
/**
 * Implements hook_views_pre_build().
 */
function bos_news_and_announcements_views_pre_build(ViewExecutable $view) {
  return;
}

/**
 * Implements hook_views_post_build().
 */
function bos_news_and_announcements_views_post_build(ViewExecutable $view) {
  return;
}

/**
 * Implements hook_views_query_alter().
 */
function bos_news_and_announcements_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->getTitle() == "Related News &amp; Announcements" && $view->current_display == "related") {
    $query->where[0]["type"] = "OR";
    if (!empty($view->args)) {
      $calling_node = \Drupal::entityTypeManager()
        ->getStorage("node")
        ->load($view->args[0]);
      if ($calling_node->hasField("field_place_type")) {
        $tid = $calling_node->get("field_place_type")->target_id;
        if (!empty($tid)) {
          $query->where[0]["conditions"][1]["value"][":taxonomy_term_field_data_tid"] = $tid;
        }
      }
      $query->where[0]["conditions"][1]["value"][":taxonomy_term_field_data_tid"] = $tid;

    }
  }
}

function bos_news_and_announcements_views_post_execute(ViewExecutable $view) {
  if ($view->getTitle() == "Related News &amp; Announcements" && $view->current_display == "related") {
    $newResults = [];
    $cache = [];
    foreach ($view->result as $result) {
      if (!isset($cache[$result->nid])) {
        $node = \Drupal::entityTypeManager()->getStorage("node")->load($result->nid);
        if (!empty($node->getTitle())) {  // gets rid of blanks
          $cache[$result->nid] = 0;
          $newResults[] = $result;
          if (count($newResults) >= $view->getItemsPerPage()??4) {
            break;
          }
        }
      }
    }
    $view->result = $newResults;
    //return $view;
  }
}
