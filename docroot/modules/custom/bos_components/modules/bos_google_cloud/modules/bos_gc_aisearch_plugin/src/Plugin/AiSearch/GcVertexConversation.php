<?php

namespace Drupal\bos_gc_aisearch_plugin\Plugin\AiSearch;

use Drupal\bos_search\AiSearchBase;
use Drupal\bos_search\AiSearchInterface;
use Drupal\bos_search\Model\AiSearchCitation;
use Drupal\bos_search\Model\AiSearchRequest;
use Drupal\bos_search\Model\AiSearchResponse;
use Drupal\bos_search\Model\AiSearchResult;
use Drupal\bos_search\Annotation\AiSearchAnnotation;

/**
 * Provides an 'AiSearch' plugin for bos_google_cloud.
 *
 * @AiSearchAnnotation (
 *   id = "Vertex Conversation",
 *   service = "bos_google_cloud.GcConversation",
 *   description = "Plugin for Google Cloud Vertex Conversation Service"
 * )
 */
class GcVertexConversation extends AiSearchBase implements AiSearchInterface {

  private const NO_RESULTS = "No Results";

  /**
   * @inheritDoc
   */
  public function search(AiSearchRequest $request, bool $fake = FALSE): AiSearchResponse {
    try {
      // Ask the search question to Vertex.
      $preset = $request->get("preset") ?? [];
      if ($fake) {
        $result = $this->fakeResponse();
        if (empty($request->get("session_id"))) {
          $result["session_id"] = rand(10000000,99999999);
        }
        else {
          $result["session_id"] = $request->get("session_id");
        }
      }
      else {
        $parameters = [
          "text" => $request->get("search_text") ?? "",
          "allow_conversation" => $preset["searchform"]["searchbar"]["allow_conversation"] ?? FALSE,
          "session_id" => $request->get("session_id") ?? "",
          "prompt" => $preset["prompt"] ?? 'default',
          "extra_prompt" => 'If you cannot understand the question or the question cannot be answered, respond with the text "' . self::NO_RESULTS . '"',
          "metadata" => $preset["results"]["metadata"] ?? 0,
          "num_results" => $preset["results"]["result_count"] ?? 0,
          "include_citations" => $preset["results"]["citations"] ?? 0,
          "safe_search" => $preset["model_tuning"]['search']["safe_search"] ?? 0,
          "ignoreAdversarialQuery" => $preset["model_tuning"]['summary']["ignoreAdversarialQuery"] ?? 0,
          "ignoreNonSummarySeekingQuery" => $preset["model_tuning"]['summary']["ignoreNonSummarySeekingQuery"] ?? 0,
          "ignoreLowRelevantContent" => $preset["model_tuning"]['summary']["ignoreLowRelevantContent"] ?? 0,
          "ignoreJailBreakingQuery" => $preset["model_tuning"]['summary']["ignoreJailBreakingQuery"] ?? 0,
          "semantic_chunks" => $preset["model_tuning"]['summary']["semantic_chunks"] ?? 0,
        ];
        // Apply any service overrides.
        if (!empty($preset["model_tuning"]["overrides"]["service_account"]) && $preset["model_tuning"]["overrides"]["service_account"] != "default") {
          $parameters["service_account"] = $preset["model_tuning"]["overrides"]["service_account"];
          $this->service->setServiceAccount($parameters["service_account"]);
        }
        if (!empty($preset["model_tuning"]["overrides"]["project_id"]) && $preset["model_tuning"]["overrides"]["project_id"] != "default") {
          $parameters["project_id"] = $preset["model_tuning"]["overrides"]["project_id"];
        }
        if (!empty($preset["model_tuning"]["overrides"]["datastore_id"]) && $preset["model_tuning"]["overrides"]["datastore_id"] != "default") {
          $parameters["datastore_id"] = $preset["model_tuning"]["overrides"]["datastore_id"];
        }
        $this->service->execute($parameters);
        $result = $this->service->getResults();
      }
    }
    catch (\Exception $e) {
      $result = FALSE;
    }

    // Load the GcSearchConversationResponse into the AiSearchResponse fmt.
    if ($result) {

      // Check for no-results response.
      $response = new AiSearchResponse($request, $result['body'], $result['session_id'] ?? "");
      if (trim($result['body']) == self::NO_RESULTS) {
        $response->set("no_results", TRUE);
        $response->set("metadata", $this->flattenMetadata($result["metadata"], $preset));
      }
      elseif (!empty($result['violations'])) {
        $response->set("violations", $result['violations']);
        $response->set("metadata", $this->flattenMetadata($result["metadata"]));
      }
      else {
        $response->set("body", $result['body'])
          ->set("metadata", $this->flattenMetadata($result["metadata"], $preset));
//          ->set("citations", $result['citations'] ?? []);
        foreach ($result['search_results'] as $search_result) {

          if (!$preset["results"]["no_dup_citations"] || !$search_result["is_citation"]) {
            // Load each search result into the AiSearchResult format.
            $res = new AiSearchResult($search_result["title"], $search_result["link"], $search_result["snippet"]);
            $res->set("id", $search_result["id"])
              ->set("link_title", $search_result["link_title"])
              ->set("content", $search_result["content"])
              ->set("description", $search_result["description"] ?? "")
              ->set("ref", $search_result["ref"]);
            $response->addResult($res);
          }
        }
        $response->set("search", $request);
      }
    }

    return $response;
  }

  /**
   * @inheritDoc
   */
  public function hasFollowUp(): bool {
    return $this->service->hasFollowup();
  }

  /**
   * Generates a fake response for testing purposes.
   *
   * This method creates a simulated response to be used when the actual response
   * from an external source is not available or when testing functionalities
   * without making real external requests.
   *
   * @return array An associative array representing a fake response, including
   *               necessary fields such as 'session_id' and other relevant
   *               placeholders required by the system.
   */
  private function fakeResponse() {
    $a = base64_decode("");
    return unserialize($a);
  }

  /**
   * @inheritDoc
   */
  public function availablePrompts(): array {
    return $this->service->availablePrompts();
  }

  /**
   * @param array &$elements
   * @param array $map
   * @param array $exclude_elem
   * @param string $prefix *
   *
* @inheritDoc
   */
  protected function flattenMetadata(array &$metadata, array $map = [], array $exclude_elem = []):array {

    $map = [];
    $exclude_elem = [];
    return parent::flattenMetadata($metadata, $map, $exclude_elem);
  }

}
