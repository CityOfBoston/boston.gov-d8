<?php

/**
 * @file
 * The Base module file for bos311 module.
 */

use Drupal\Core\Link;

/**
 * Implements hook_theme().
 */
function bos_link_collections_theme() {
  $path = drupal_get_path('module', 'bos_link_collections') . '/templates';

  $theme['paragraph__group_of_links_grid'] = [
    'base hook' => 'paragraph',
    'path' => $path,
  ];
  $theme['paragraph__grid_links'] = [
    'base hook' => 'paragraph',
    'path' => $path,
  ];
  $theme['paragraph__group_of_links_list'] = [
    'base hook' => 'paragraph',
    'path' => $path,
  ];
  $theme['paragraph__group_of_links_mini_grid'] = [
    'base hook' => 'paragraph',
    'path' => $path,
  ];
  $theme['paragraph__gol_list_links'] = [
    'base hook' => 'paragraph',
    'path' => $path,
  ];
  $theme['paragraph__document__separated_title'] = [
    'base hook' => 'paragraph',
    'path' => $path,
    'template' => 'link--mode--separated-title',
  ];
  $theme['paragraph__internal_link__separated_title'] = [
    'base hook' => 'paragraph',
    'path' => $path,
    'template' => 'link--mode--separated-title',
  ];
  $theme['field__field_external_link__external_link__mode__separated_title'] = [
    'base hook' => 'field',
    'path' => $path,
    'template' => 'link--mode--separated-title',
  ];
  $theme['field__paragraph__gol_list_links'] = [
    'base hook' => 'field',
    'path' => $path,
  ];
  $theme['paragraph__document__ribbon_link'] = [
    'base hook' => 'paragraph',
    'path' => $path,
    'template' => 'link--mode--ribbon-link',
  ];
  $theme['field__field_external_link__external_link__mode__ribbon_link'] = [
    'base hook' => 'field',
    'path' => $path,
    'template' => 'link--mode--ribbon-link',
  ];
  $theme['paragraph__internal_link__ribbon_link'] = [
    'base hook' => 'paragraph',
    'path' => $path,
    'template' => 'link--mode--ribbon-link',
  ];
  $theme['field__paragraph__group_of_links_mini_grid'] = [
    'base hook' => 'field',
    'path' => $path,
  ];
  return $theme;
}

/**
 * Implements hook_preprocess_paragraph().
 */
function bos_link_collections_preprocess_paragraph(&$vars) {
  if (!empty($vars['paragraph'])) {
    $paragraph = $vars['paragraph'];
    switch ($paragraph->bundle()) {
      case 'group_of_links_grid':
      case 'group_of_links_list':
        $cta = _bos_core_paragraph_extract_link($paragraph->get('field_link')->getValue(), ['class' => ['btn']]);
        $vars['cta'] = !empty($cta['link']) ? $cta['link'] : [];
        break;

      case 'grid_links':
        if ($parent = $paragraph->getParentEntity()) {
          if ($parent->get('field_subheader')->isEmpty() && $parent->get('field_description')->isEmpty() && $parent->get('field_link')->isEmpty()) {
            $vars['attributes']['class'][] = 'desktop-4-col';
          }
          else {
            $vars['attributes']['class'][] = 'desktop-3-col';
          }
        }
        break;

      case 'document':
        if ($vars['elements']['#view_mode'] == 'separated_title' || $vars['elements']['#view_mode'] == 'ribbon_link') {
          if (!$paragraph->get('field_document')->isEmpty() && !$paragraph->get('field_title')->isEmpty()) {
            $document = $paragraph->get('field_document')->getValue();
            if ($paragraph->get('field_document')->isEmpty()) {
              $vars['title'] = _bos_core_get_file_name($document['0']['target_id']);
            }
            else {
              $title = $paragraph->get('field_title')->getValue();
              $vars['title'] = $title['0']['value'];
            }
            $attributes = ['attributes' => ['title' => "Download {$vars['title']}", 'target' => '_blank']];
            $vars['link'] = _bos_core_get_file_link($document['0']['target_id'], $vars['title'], $attributes);
            $vars['attributes']['class'][] = 'download-link';
            $vars['has_icon'] = TRUE;
          }
        }
        break;

      case 'internal_link':
        if ($vars['elements']['#view_mode'] == 'separated_title' || $vars['elements']['#view_mode'] == 'ribbon_link') {
          $link = $paragraph->get('field_internal_link')->getValue();
          $options = ['title' => "Go to {$link['0']['title']}"];
          $link_items = _bos_core_paragraph_extract_link($paragraph, $options);
          $vars['link'] = $link_items['link'];
          $vars['title'] = $link_items['title'];
        }
        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_link_collections_preprocess_field(&$vars) {
  if ($vars['entity_type'] == "paragraph") {
    switch ($vars['field_name']) {
      case 'field_external_link':
        if ($vars['element']['#view_mode'] == 'separated_title' || $vars['element']['#view_mode'] == 'ribbon_link') {
          $url = $vars['element']['0']['#url'];
          $title = $vars['element']['0']['#title'];
          $url->setOptions(array_merge($url->getOptions(), [
            'attributes' => [
              'title' => "Go to {$title}",
              'target' => '_blank',
            ],
          ]));
          $vars['link'] = Link::fromTextAndUrl($title, $url)->toString();
          $vars['title'] = $title;
          $vars['attributes']['class'][] = 'external-link';
          $vars['has_icon'] = TRUE;
        }
        break;
    }
  }
}
