<?php

/**
 * @file
 * The Base module file for bos_email module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function bos_email_form_bos_core_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (!empty($form_state->getUserInput())) {
    if ($input = $form_state->getUserInput()["bos_email"]) {
        \Drupal::configFactory()->getEditable('bos_email.settings')
          ->set("enabled", $input["enabled"])
          ->set("q_enabled", $input["q_enabled"])
          ->set("contactform.enabled", $input["contactform"]["enabled"] ?? 0)
          ->set("contactform.q_enabled", $input["contactform"]["q_enabled"] ?? 0)
          ->set("registry.enabled", $input["registry"]["enabled"] ?? 0)
          ->set("registry.q_enabled", $input["registry"]["q_enabled"] ?? 0)
          ->set("commissions.enabled", $input["commissions"]["enabled"] ?? 0)
          ->set("commissions.q_enabled", $input["commissions"]["q_enabled"] ?? 0)
          ->set("metrolist.enabled", $input["metrolist"]["enabled"] ?? 0)
          ->set("metrolist.q_enabled", $input["metrolist"]["q_enabled"] ?? 0)
          ->set("alerts.recipient", $input["alerts"]["recipient"] ?? "")
          ->set("alerts.suppressed", $input["alerts"]["conditions"]["suppressed"] ?? 0)
          ->set("alerts.token", $input["alerts"]["conditions"]["token"] ?? 0)
          ->set("alerts.honeypot", $input["alerts"]["conditions"]["honeypot"] ?? 0)
          ->save();
      }
    }

  else {
    $config = \Drupal::configFactory()->get("bos_email.settings");
    $form["bos_email"] = [
      '#type' => 'details',
      '#title' => 'PostMark Emailer',
      '#markup' => 'Fine-grain management for emails sent via PostMark.',
      '#open' => TRUE,

      "enabled" => [
        '#type' => 'checkbox',
        '#title' => t('Postmark Email Service Enabled (Enables/disables ALL emails via PostMark'),
        '#default_value' => $config->get('enabled'),
      ],
      "q_enabled" => [
        '#type' => 'checkbox',
        '#title' => t('Postmark Queue Enabled (ALL emails which PostMark cannot send will be queued'),
        '#default_value' => $config->get('q_enabled'),
      ],

      "alerts" => [
        '#type' => 'details',
        '#title' => 'PostMark Email Alerts',
        '#description' => 'Configure outbound emails for issues which arise with PostMark integration.',
        '#open' => FALSE,

        "recipient" => [
          '#type' => 'textfield',
          "#title" => "Email recipient",
          "#description" => "The email (or email group) that should receive alerts.",
          "#attributes" => ["placeholder" => "someone@boston.gov"],
          "#default_value" => $config->get('alerts.recipient'),
        ],

        "conditions" => [
          '#type' => 'fieldset',
          '#title' => 'Conditions',
          '#markup' => 'Emails will be dsent to the address above when the following consitions occur:',
          '#collapsible' => FALSE,

          "suppressed" => [
            '#type' => 'checkbox',
            '#title' => t('The intended recipient is suppressed in or by PostMark.'),
            '#default_value' => $config->get('alerts.suppressed'),
          ],
          "token" => [
            '#type' => 'checkbox',
            '#title' => t('An incorrect token is provided. Possible hacking.'),
            '#default_value' => $config->get('alerts.token'),
          ],
          "honeypot" => [
          '#type' => 'checkbox',
          '#title' => t('The honeypot field in an email is completed. Possible spam/relay attempt'),
          '#default_value' => $config->get('alerts.honeypot'),
        ],
        ],

        "footnote" => ['#markup' => "NOTE: These email alerts are sent via Drupal mail."],
      ],

      "contactform" => [
        '#type' => 'fieldset',
        '#title' => 'Contact Form',
        '#markup' => 'Emails from the main Contact Form - when clicking on email addresses on boston.gov.',
        '#collapsible' => FALSE,

        "enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Contact Form email service enabled'),
          '#default_value' => $config->get('contactform.enabled'),
        ],
        "q_enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Contact Form queue enabled'),
          '#default_value' => $config->get('contactform.q_enabled'),
        ],
      ],

      "registry" => [
        '#type' => 'fieldset',
        '#title' => 'Registry Suite',
        '#markup' => 'Emails from the Registry App - confirmations.',
        '#collapsible' => FALSE,

        "enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Registry email service enabled'),
          '#default_value' => $config->get('registry.enabled'),
        ],
        "q_enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Contact Form queue enabled'),
          '#default_value' => $config->get('registry.q_enabled'),
        ],
      ],

      "commissions" => [
        '#type' => 'fieldset',
        '#title' => 'Commissions App',
        '#markup' => 'Emails from the Commissions App.',
        '#collapsible' => FALSE,

        "enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Commission email service enabled'),
          '#default_value' => $config->get('commissions.enabled'),
        ],
        "q_enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Commissions queue enabled'),
          '#default_value' => $config->get('commissions.q_enabled'),
        ],
      ],

      "metrolist" => [
        '#type' => 'fieldset',
        '#title' => 'Metrolist Listing Form',
        '#markup' => 'Emails sent from Metrolist Listing Form processes.',
        '#collapsible' => FALSE,

        "enabled" => [
          '#type' => 'checkbox',
          '#title' => t('metrolist email service Enabled'),
          '#default_value' => $config->get('metrolist.enabled'),
        ],
        "q_enabled" => [
          '#type' => 'checkbox',
          '#title' => t('metrolist queue enabled'),
          '#default_value' => $config->get('metrolist.q_enabled'),
        ],
      ],

    ];
  }
}

/**
 * Implements hook_mail().
 */
function bos_email_mail($key, &$message, $params) {

  $message["from"] = "no-reply@boston.gov<boston.gov>";

  switch ($key) {
    case "alerts.suppressed":
      $message["subject"] = "Boston.gov email recipient suppressed.";
      $message["body"][] = "A recipient ({$params["To"]}) from the bos_email service via PostMark is suppressed.";
      break;

    case "alerts.token":
      $message["subject"] = "Boston.gov email token issue.";
      $message["body"][] = "Authentication issue with PostMark email service in bos_email.";
      $message["body"][] = "There is an issue with the {$params["token_type"]}.";
      $message["body"][] = "This could indicate a hacking attempt to use the service as a relay.";
      break;

    case "alerts.honeypot":
      $message["subject"] = "Boston.gov honeypot issue.";
      $message["body"][] = "The honeypot for a form has some data in it.";
      break;
  }

  $message["body"][] = "================================";
  $message["body"][] = "subject: {$params["Subject"]}";
  $message["body"][] = "recipient: {$params["To"]}";
  $message["body"][] = "service: {$params["server"]}";
  $message["body"][] = "---------------------------------";
  $message["body"][] = "Endpoint called: " . \Drupal::request()->getRequestUri();
  $message["body"][] = "Sender IP: " . \Drupal::request()->getClientIp();
  $message["body"][] = "Headers";
  foreach(Drupal::request()->headers->all() as $key => $values) {
    $value = "";
    foreach($values as $key => $val) {
      $val .= $value . ", ";
    }
    $val = trim($val. ", ");
    $message["body"][] = " - {$key}: {$value}";
  }

}
