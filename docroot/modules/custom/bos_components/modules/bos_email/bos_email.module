<?php

/**
 * @file
 * The Base module file for bos_email module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function bos_email_form_bos_core_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (!empty($form_state->getUserInput())) {
    if ($input = $form_state->getUserInput()["bos_email"]) {
        \Drupal::configFactory()->getEditable('bos_email.settings')
          ->set("enabled", $input["enabled"])
          ->set("q_enabled", $input["q_enabled"])
          ->set("contactform.enabled", $input["contactform"]["enabled"] ?? 0)
          ->set("contactform.q_enabled", $input["contactform"]["q_enabled"] ?? 0)
          ->set("registry.enabled", $input["registry"]["enabled"] ?? 0)
          ->set("registry.q_enabled", $input["registry"]["q_enabled"] ?? 0)
          ->set("commissions.enabled", $input["commissions"]["enabled"] ?? 0)
          ->set("commissions.q_enabled", $input["commissions"]["q_enabled"] ?? 0)
          ->set("metrolist.enabled", $input["metrolist"]["enabled"] ?? 0)
          ->set("metrolist.q_enabled", $input["metrolist"]["q_enabled"] ?? 0)
          ->set("alerts.recipient", $input["alerts"]["recipient"] ?? "")
          ->set("hardbounce.hardbounce", $input["alerts"]["hb"]["hardbounce"] ?? 0)
          ->set("hardbounce.recipient", $input["alerts"]["hb"]["recipient"] ?? "")
          ->set("alerts.token", $input["alerts"]["conditions"]["token"] ?? 0)
          ->set("alerts.honeypot", $input["alerts"]["conditions"]["honeypot"] ?? 0)
          ->save();
      }
    }

  else {
    $config = \Drupal::configFactory()->get("bos_email.settings");
    $form["bos_email"] = [
      '#type' => 'details',
      '#title' => 'PostMark Emailer',
      '#markup' => 'Fine-grain management for emails sent via PostMark.',
      '#open' => TRUE,

      "enabled" => [
        '#type' => 'checkbox',
        '#title' => t('Postmark Email Service Enabled (Enables/disables ALL emails via PostMark'),
        '#default_value' => $config->get('enabled'),
      ],
      "q_enabled" => [
        '#type' => 'checkbox',
        '#title' => t('Postmark Queue Enabled (ALL emails which PostMark cannot send will be queued'),
        '#default_value' => $config->get('q_enabled'),
      ],

      "alerts" => [
        '#type' => 'details',
        '#title' => 'PostMark Email Alerts',
        '#description' => 'Configure outbound emails for issues which arise with PostMark integration.',
        '#open' => FALSE,


        "conditions" => [
          '#type' => 'fieldset',
          '#title' => 'Service Abuse',
          '#markup' => 'Emails will be sent to the recipient below when these unexpected events occur:',
          '#collapsible' => FALSE,

          "token" => [
            '#type' => 'checkbox',
            '#title' => t('An incorrect API authentication token is provided. This could indicate a hacking attempt or attempted spam/relay abuse.'),
            '#default_value' => $config->get('alerts.token') ?? 0,
          ],
          "honeypot" => [
            '#type' => 'checkbox',
            '#title' => t('The honeypot field (a hidden input field a \'person\' cannot see or update) in a submitted form has data in it. This could indictate hacking attempt or attempted spam/relay abuse.'),
            '#default_value' => $config->get('alerts.honeypot') ?? 0,
          ],
          "recipient" => [
            '#type' => 'textfield',
            "#title" => "Email recipient",
            "#description" => "The email (or email group) to receive service abuse emails.",
            "#attributes" => ["placeholder" => "someone@boston.gov"],
            "#default_value" => $config->get('alerts.recipient') ?? "",
          ],
        ],

        "hb" => [
          '#type' => 'fieldset',
          '#title' => 'Hard Bounce / Recipient Supression',
          '#markup' => 'Emails will be sent to the recipient below when the following normal conditions occur:',
          '#collapsible' => FALSE,

          "hardbounce" => [
            '#type' => 'checkbox',
            '#title' => t('The intended recipient is suppressed by PostMark.'),
            '#default_value' => $config->get('hardbounce.hardbounce') ?? 0,
          ],
          "recipient" => [
            '#type' => 'textfield',
            "#title" => "Email recipient",
            "#description" => "The email (or email group) to receive hardbounce alerts.",
            "#attributes" => ["placeholder" => "someone@boston.gov"],
            "#default_value" => $config->get('hardbounce.recipient') ?? "",
          ],
        ],

        "footnote" => ['#markup' => "NOTE: These email alerts are sent via Drupal mail."],
      ],

      "contactform" => [
        '#type' => 'fieldset',
        '#title' => 'Contact Form',
        '#markup' => 'Emails from the main Contact Form - when clicking on email addresses on boston.gov.',
        '#collapsible' => FALSE,

        "enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Contact Form email service enabled'),
          '#default_value' => $config->get('contactform.enabled'),
        ],
        "q_enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Contact Form queue enabled'),
          '#default_value' => $config->get('contactform.q_enabled'),
        ],
      ],

      "registry" => [
        '#type' => 'fieldset',
        '#title' => 'Registry Suite',
        '#markup' => 'Emails from the Registry App - confirmations.',
        '#collapsible' => FALSE,

        "enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Registry email service enabled'),
          '#default_value' => $config->get('registry.enabled'),
        ],
        "q_enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Contact Form queue enabled'),
          '#default_value' => $config->get('registry.q_enabled'),
        ],
      ],

      "commissions" => [
        '#type' => 'fieldset',
        '#title' => 'Commissions App',
        '#markup' => 'Emails from the Commissions App.',
        '#collapsible' => FALSE,

        "enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Commission email service enabled'),
          '#default_value' => $config->get('commissions.enabled'),
        ],
        "q_enabled" => [
          '#type' => 'checkbox',
          '#title' => t('Commissions queue enabled'),
          '#default_value' => $config->get('commissions.q_enabled'),
        ],
      ],

      "metrolist" => [
        '#type' => 'fieldset',
        '#title' => 'Metrolist Listing Form',
        '#markup' => 'Emails sent from Metrolist Listing Form processes.',
        '#collapsible' => FALSE,

        "enabled" => [
          '#type' => 'checkbox',
          '#title' => t('metrolist email service Enabled'),
          '#default_value' => $config->get('metrolist.enabled'),
        ],
        "q_enabled" => [
          '#type' => 'checkbox',
          '#title' => t('metrolist queue enabled'),
          '#default_value' => $config->get('metrolist.q_enabled'),
        ],
      ],

    ];
  }
}

/**
 * Implements hook_mail().
 */
function bos_email_mail($key, &$message, $params) {

  $message["from"] = "boston.gov<no-reply@boston.gov>";

  switch ($key) {
    case "hardbounce":
      $message["subject"] = "Boston.gov email recipient suppressed.";
      $custom_msg = "Boston.gov email recipient ({$params["To"]}) has hard bounced, and is now suppressed in Postmark.";
      break;

    case "alerts.token":
      $message["subject"] = "Boston.gov email token issue.";
      $custom_msg = "Authentication issue with PostMark email service in bos_email.<br>
      There is an issue with the {$params["token_type"]}.<br>
      This could indicate a hacking attempt to use the service as a relay.";
      break;

    case "alerts.honeypot":
      $message["subject"] = "Boston.gov honeypot issue.";
      $custom_msg = "The honeypot for a form has some data in it.";
      break;
  }
  $params["To"] = empty($params["To"]) ? $params["to_address"] : $params["To"];
  $params["server"] = empty($params["server"]) ? "--" : $params["server"];

  // Now build the html message.
  $custom_table = "<p><table>";
  if (!empty($params["Subject"])) {
    $custom_table .= "<tr><td>subject</td><td>{$params["Subject"]}</td></tr>";
  }
  if (!empty($params["To"])) {
    $custom_table .= "<tr><td>recipient</td><td>{$params["To"]}</td></tr>";
  }
  if (!empty($params["server"])) {
    $custom_table .= "<tr><td>service</td><td>{$params["server"]}</td></tr>";
  }
  $custom_table .= "</table></p>";
  $custom_table .= "<table>";
  $custom_table .= "<tr><td>Endpoint called</td><td>" . \Drupal::request()->getRequestUri() ."</td></tr>";
  $custom_table .= "<tr><td>Sender IP</td><td>" . \Drupal::request()->getClientIp() . "</td></tr>";
  $custom_table .= "<tr><td>Headers</td><td>";
  foreach(Drupal::request()->headers->all() as $key => $values) {
    $val = "";
    foreach($values as $value) {
      $val .= $value . "<br>";
    }
    $custom_table .= "- <b>{$key}:</b> {$val}";
  }
  $custom_table .= "</td></tr>";
  if (\Drupal::request()->request && \Drupal::request()->request->has("email")) {
    $custom_table .= "<tr><td>Original Payload</td><td>";
    foreach(\Drupal::request()->request->get("email", []) as $key => $value) {
      $custom_table .= "- <b>{$key}:</b> {$value}<br>";
    }
    $custom_table .= "</td></tr>";
  }
  $custom_table .= "</table>";
  $custom_message = "<h2>{$custom_msg}</h2><p>{$custom_table}</p>";
  $message["body"] = [$custom_message];

  // Now make it html email
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';

}
