<?php

/**
 * @file
 * The Base module file for bos_mnl module.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\node\Entity\Node;

/**
 * Loads all SAM nodes into memory to speed processing.
 * Used by QueueWorkers
 *
 * @return array
 */
function _bos_mnl_create_sam_cache(bool $full_record = FALSE, bool $has_no_checksum = FALSE, int $start = 0, int $limit = 0) {
  $query = \Drupal::database()->select("node", "n")
    ->fields("n", ["nid", "vid"])
    ->condition("n.type", "neighborhood_lookup");
  $query->join("node__field_sam_id", "id", "n.nid = id.entity_id");
  $query->join("node__field_sam_address", "addr", "n.nid = addr.entity_id");
  if ($has_no_checksum){
    $query->leftjoin("node__field_checksum", "checksum", "n.nid = checksum.entity_id");
    $query->condition("checksum.entity_id", NULL, "IS");
  }
  else {
    $query->join("node__field_checksum", "checksum", "n.nid = checksum.entity_id");
  }
  $query->condition("id.deleted", FALSE)
    ->condition("addr.deleted", FALSE)
    ->fields("id", ["field_sam_id_value"])
    ->fields("checksum", ["field_checksum_value"])
    ->fields("addr", ["field_sam_address_value"]);

  if ($full_record) {
    $query->leftJoin("node__field_sam_neighborhood_data", "dat", "n.nid = dat.entity_id");
    $query->fields("dat", ["field_sam_neighborhood_data_value"]);
    $or = $query->orConditionGroup()
      ->condition("dat.deleted", FALSE)
      ->isNull("dat.deleted");
    $query->condition($or);
  }
  if ($limit) {
    $query->range($start, $limit);
  }

  return $query->execute()->fetchAllAssoc("field_sam_id_value");

}

/**
 * @param $sam
 * @param $json_data
 * @param $md5
 *
 * @return \Drupal\Core\Entity\ContentEntityBase|\Drupal\Core\Entity\EntityBase|\Drupal\Core\Entity\EntityInterface|\Drupal\node\Entity\Node
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _bos_mnl_add_sam_node($sam, $json_data, $md5) {
  // Create the node.
  $node = Node::create([
    'type'                        => 'neighborhood_lookup',
    'title'                       => $sam['sam_address_id'],
    'field_sam_id'                => $sam['sam_address_id'],
    'field_sam_address'           => $sam['full_address'],
    'field_sam_neighborhood_data' => $json_data,
    'field_checksum'              => $md5,
    "field_updated_date"          => strtotime("now"),
  ]);
  $node->addCacheableDependency((new CacheableMetadata())->setCacheMaxAge(0));
  $node->save();

  return $node;
}


/**
 * Updates the json data and checksum for the SAM ID node.
 *   Directly manipulates the DB table for speed.
 *
 * @param $nid int The entity ID for this node (neighborhood_lookup)
 * @param $json string The json string to save.
 * @param $checksum string The MD5 checksum for the json field.
 *
 * @return void
 */
function _bos_mnl_update_sam_data($nid, $json, $checksum) {
  // Update the (json) SAM Data.
  \Drupal::database()->update("node__field_sam_neighborhood_data")
    ->condition("entity_id", $nid)
    ->fields([
      "field_sam_neighborhood_data_value" => $json,
    ])->execute();

  // Update the checksum too.
  \Drupal::database()->update("node__field_checksum")
    ->condition("entity_id", $nid)
    ->fields([
      "field_checksum_value" => $checksum,
    ])->execute();
}

/**
 * Updates the SAM Address (mailing address) for the SAM ID node.
 *   Directly manipulates the DB table for speed.

 * @param $nid int The entity ID for this node (neighborhood_lookup).
 * @param $address string The Physical (mailing) Address for the SAM ID.
 *
 * @return void
 */
function _bos_mnl_update_sam_address($nid, $address) {
  // The SAM Address has changed.
  \Drupal::database()->update("node__field_sam_address")
    ->condition("entity_id", $nid)
    ->fields(["field_sam_address_value" => $address])
    ->execute();

}

/**
 * Sets the updated date to now for the SAM ID node.
 *   Directly manipulates the DB table for speed.
 *
 * @param $nid int The entity ID for this node (neighborhood_lookup)
 *
 * @return void
 */
function _bos_mnl_set_updated_date($nid) {
  // Something changed, so update the lastupdated record.
  \Drupal::database()->update("node__field_updated_date")
    ->condition("entity_id", $nid)
    ->fields([
      "field_updated_date_value" => strtotime("now"),
    ])->execute();

}

/**
 * Invalidates any cache for this record. Should bubble up to Varnish.
 *
 * @param $nid int The entity ID for this node (neighborhood_lookup)
 *
 * @return void
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _bos_mnl_invalidate_cache($nid) {
  // Force a save to invalidate the Drupal cache for this node.
  \Drupal::entityTypeManager()
    ->getStorage("node")
    ->load($nid)
    ->addCacheableDependency((new CacheableMetadata())
      ->setCacheMaxAge(0))
    ->save();
}
