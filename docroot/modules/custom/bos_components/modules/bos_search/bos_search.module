<?php

/*
  Main Drupal module for bos_search

  david 06 2024
  @file docroot/modules/custom/bos_components/modules/bos_search/bos_search.module

*/

use Drupal\Core\Render\Element;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 */
function bos_search_theme($existing, $type, $theme, $path) {

  // Auto discover search results templates.
  $templates = glob(\Drupal::service("extension.list.module")->getPath('bos_search') . "/templates/search_results/*.html.twig");
  foreach ($templates as $template) {
    $template = basename($template);
    $template = str_replace(".html.twig", "", $template);
    $discovered[$template] = [
      'template' => "search_results/$template",
      'variables' => [
        "response" => NULL,
        "items" => NULL,
        "metadata" => NULL,
        "references" => NULL,
        "citations" => NULL,
        "content" => NULL,
        "id" => NULL,
      ],
    ];
  }

  /**
   * This defines the ai-enabled search button.
   */
  return array_merge($discovered, [
    'aisearch-button' => [
      'template' => 'snippets/aisearch_button',
      'variables' => [
        'search_form_url' => '/search',
        'button_title' => '',
        'button_css' => '',
        'preset' => '',
      ],
    ],
    'container--default' => [
      "template" => "form_elements/default/container",
      "base_hook" => "container",
      "render element" => "container",
    ],
    'details--default' => [
      "template" => "form_elements/default/details",
      "base_hook" => "details",
      "render element" => "details",
    ],
    'fieldset--default' => [
      "template" => "form_elements/default/fieldset",
      "base_hook" => "fieldset",
      "render element" => "fieldset",
    ],
    'form--default' => [
      "template" => "form_elements/default/form",
      "base_hook" => "form",
      "render element" => "form",
    ],
    'form-element--default' => [
      "template" => "form_elements/default/form-element",
      "base_hook" => "form-element",
      "render element" => "form-element",
    ],
    'form-element-label--default' => [
      "template" => "form_elements/default/form-element-label",
      "base_hook" => "form-element-label",
      "render element" => "form-element-label",
    ],
    'checkboxes--default' => [
      "template" => "form_elements/default/checkboxes",
      "base_hook" => "checkboxes",
      "render element" => "checkboxes",
    ],
    'input--default' => [
      "template" => "form_elements/default/input",
      "base_hook" => "input",
      "render element" => "input",
    ],
    'radios--default' => [
      "template" => "form_elements/default/radios",
      "base_hook" => "radios",
      "render element" => "radios",
    ],
    'select--default' => [
      "template" => "form_elements/default/select",
      "base_hook" => "select",
      "render element" => "select",
    ],
    'textarea--default' => [
      "template" => "form_elements/default/textarea",
      "base_hook" => "textarea",
      "render element" => "textarea",
    ],
    'submit--default' => [
      "template" => "form_elements/default/submit",
      "base_hook" => "button",
      "render element" => "button",
    ],
  ]);

}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_search_preprocess_page(&$variables) {
  /**
   * This renders the search button into the secondary_nav object.
   * TODO: need to control if/how this is enabled for a page.
   */
//  $variables['page']['content']['aisearch-button'] = [
//    '#theme' => 'aisearch-button',
//    '#search_form_url' => Url::fromRoute('bos_search.open_AISearchForm'),
//    '#button_title' => 'Search', // This has no setting in this embed style
//    '#button_css' => '',   // This has no setting in this embed style
//    '#preset' => '',  // TODO: How do we set this?
//  ];
}

/**
 * Implements hook_preprocess().
 */
function bos_search_preprocess(&$variables, $hook) {
  switch ($hook) {
    case "fieldset--default":
      $variables['children'] = $variables['fieldset']['search'];
      break;
    case "container--default":
      $variables['children'] = $variables['container'];
      break;
    case "input--default":
      $variables['children'] = $variables['input'];
      break;
    case "form_element_label--default":
      $variables['children'] = $variables['form_element_label'];
      break;
    case "form_element--default":
      $variables['children'] = $variables['form_element'];
      break;
    case "textarea--default":
      $variables['children'] = $variables['textarea'];
      $variables["attributes"] = [
        "id" => $variables["textarea"]["#id"],
        "name" => $variables["textarea"]["#name"],
        "cols" => $variables["textarea"]["#cols"],
      ];
      $variables["value"] = $variables["textarea"]["#value"];
      break;
    case "select--default":
      $variables['children'] = $variables['select'];
      break;
    case "form--default":
      $variables['children'] = $variables['form'];
      break;
  }

}
