<?php
/**
 * @file
 * Contains functions to alter Drupal's markup for the STARTERKIT theme.
 */

/**
 * Implements hook_preprocess_html.
 */
use Symfony\Component\HttpFoundation\Response;

/**
 * Implements theme.api.php hook_theme.
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 *
 *  @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme/8.2.x
 */
function bos_theme_theme($existing, $type, $theme, $path) {
  return array(
    'page_contacts' => array(
      'variables' => array(
        'title' => NULL,
        'short_title' => NULL,
        'contacts' => NULL,
      ),
      'template' => 'templates/snippets/page-contacts',
    ),
    'detail_item' => array(
      'variables' => array(
        'label' => NULL,
        'body' => NULL,
        'image' => NULL,
        'classes' => array(
          'detail' => '',
          'icon' => '',
          'label' => '',
          'body' => '',
        ),
      ),
      'template' => 'templates/snippets/detail-item',
    ),
    'grid_card' => array(
      'variables' => array(
        'title' => NULL,
        'link' => NULL,
        'subtitle' => NULL,
        'image' => NULL,
        'description' => NULL,
        'classes' => '',
      ),
      'template' => 'templates/snippets/grid-card',
    ),
    'user_login' => array(
      'render element' => 'form',
      'template' => 'templates/snippets/user_login',
    ),
    'logo' => array(
      'template' => 'snippets/logo',
      'variables' => [
        'site_name' => '',
        'front_page' => '',
        'asset_url' => '',
        'asset_name' => '',
        'cache_buster' => '',
        'hide_logo' => '',
      ],
    ),
    'burger' => array(
      'template' => 'snippets/burger',
      'variables' => [],
    ),
    'seal' => array(
      'template' => 'snippets/seal',
      'variables' => [
        'front_page' => '',
        'asset_url' => '',
        'asset_name' => '',
        'cache_buster' => '',
      ],
    ),
    'search' => array(
      'template' => 'snippets/search',
      'variables' => [
        'search_form_url' => '/search',
      ],
    ),
    'secondary_nav' => array(
      'template' => 'snippets/secondary-nav',
      'variables' => [
        'secondary_menu' => [],
      ],
    ),
    'profile_address' => array(
      'variables' => array(
        'address' => NULL,
        'address_type' => NULL,
      ),
      'template' => 'templates/snippets/profile-address',
    ),
  );
}

/**
 * Override or insert variables into the maintenance page template.
 *
 * @param array $variables
 *   An array of variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("maintenance_page" in this case).
 */
function bos_theme_process_maintenance_page(array &$variables, $hook) {
  bos_theme_process_html($variables, $hook);
  // Ensure default regions get a variable. Theme authors often forget to remove
  // a deleted region's variable in maintenance-page.tpl.
  $regions = array(
    'header',
    'navigation',
    'highlighted',
    'help',
    'content',
    'sidebar_first',
    'sidebar_second',
    'footer',
    'bottom',
  );
  foreach ($regions as $region) {
    if (!isset($variables[$region])) {
      $variables[$region] = '';
    }
  }
}

/**
 * Override or insert variables into the html template.
 *
 * @param array $variables
 *   An array of variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered. This is usually "html", but can
 *   also be "maintenance_page" since boston_preprocess_maintenance_page() calls
 *   this function to have consistent variables.
 */
function bos_theme_preprocess_html(array &$variables, $hook) {
  // Converted from drupal 7 template.php in sites/all/themes/custom/boston.
  $variables['#attached']['library'][] = "bos_theme/global-styling.always";
  $variables['#attached']['library'][] = "bos_theme/page.assets";
  $theme = theme_get_setting('asset_source');
  if (empty($theme)) {
    $theme = \Drupal::service('library.discovery')->getLibrariesByExtension('bos_theme');
    $theme = array_keys($theme);
    $theme = $theme[0];
  }
  $variables['#attached']['library'][] = "bos_theme/" . $theme;

  // detect 400-status pages.
  _bos_theme_default_variables($variables);
  switch ($variables['status_code']) {
    case 403:
      $variables['classes'] = "html not-front not-logged-in page-node page-node- page-node-1326 node-type-article body-sidebars-none section-403-forbidden";
      break;
    case 404:
      $variables['classes'] = "html not-front not-logged-in page-node page-node- page-node-1321 node-type-article body-sidebars-none section-404-not-found";
      break;
    default:
      break;
  }

  // Send X-UA-Compatible HTTP header to force IE to use the most recent
  // rendering engine or use Chrome's frame rendering engine if available.
  // This also prevents the IE compatibility mode button to appear when using
  // conditional classes on the html tag.
  $response = new response();
  if (is_null($response->headers->get('X-UA-Compatible'))) {
    $response->headers->set('X-UA-Compatible', 'IE=edge,chrome=1');
  }

  // Return early, so the maintenance page does not call any of the code below.
  if ($hook != 'html') {
    return;
  }

  // Grab some bos_theme specific settings
  $variables['skip_link_anchor'] = \Drupal\Component\Utility\Html::escape(theme_get_setting('boston_skip_link_anchor'));
  $variables['skip_link_text']   = \Drupal\Component\Utility\HTML::escape(theme_get_setting('boston_skip_link_text'));

  // Store the menu item since it has some useful information.
  $variables['menu_item'] = \Drupal::routeMatch()->getParameter('menu');
  if (isset($variables['menu_item'])) {
    switch ($variables['menu_item']['page_callback']) {
      case 'views_page':
        // Is this a Views page?
        $variables['classes_array'][] = 'page-views';
        break;

      case 'page_manager_blog':
      case 'page_manager_blog_user':
      case 'page_manager_contact_site':
      case 'page_manager_contact_user':
      case 'page_manager_node_add':
      case 'page_manager_node_edit':
      case 'page_manager_node_view_page':
      case 'page_manager_page_execute':
      case 'page_manager_poll':
      case 'page_manager_search_page':
      case 'page_manager_term_view_page':
      case 'page_manager_user_edit_page':
      case 'page_manager_user_view_page':
        // Is this a Panels page?
        $variables['classes_array'][] = 'page-panels';
        break;
    }
  }

}

/**
 * Override or insert variables into the html templates.
 *
 * @param array $variables
 *   An array of variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered ("html" in this case).
 */
function bos_theme_process_html(array &$variables, $hook) {
  // Flatten out html_attributes.
  // Todo: Use the new \Drupal\Core\Template\Attribute class ... ??
  $variables['html_attributes'] = drupal_attributes($variables['html_attributes_array']);
}

/**
 * Implements hook_preprocess_page().
 */
function bos_theme_preprocess_page(array &$variables, $hook) {
  // Add in the js required by each page.
  _bos_theme_default_variables($variables);

  $variables['#attached']['library'][] = "bos_theme/page.assets" ;

  if (isset($_GET['response_type']) && $_GET['response_type'] == 'embed') {
    $variables['theme_hook_suggestions'][] = 'page__embed';
  }

  // Find the title of the menu used by the secondary links.
  // Todo: revisit this.  There may be a variable set once we have the menus better defined.
  //  $secondary_links = variable_get('menu_secondary_links_source', 'menu-secondary-menu');
  $secondary_links = 'menu-secondary-menu';
  $variables['secondary_menu_heading'] = '';
  if (function_exists('menu_ui_get_menus')) {
    $menus = menu_ui_get_menus();
    if (!empty($menus[$secondary_links])) {
      $variables['secondary_menu_heading'] = $menus[$secondary_links];
    }
  }

  // This is done to bring the hero image rendered output to the page level
  // of rendering. Hero image styling fits more naturally at the page level
  // as opposed to the rendered node output in the system block.
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  $variables['header_image'] = FALSE;
  if(!empty($path_args[2])) {
    $nid = $path_args[2];
    if ($path_args[1] == 'node' && is_numeric($nid)) {
      if (isset($variables['page']['content']['system_main']['nodes'][$nid]['field_intro_image'])) {
        $background_image = $variables['page']['content']['system_main']['nodes'][$nid]['field_intro_image'];
        $uri = $background_image[0]['#item']['uri'];

        $variables['header_image'] = TRUE;
        $variables['background_image'] = $background_image;
        $variables['xlarge_image'] = image_style_url('rep_wide_2000x700custom_boston_desktop_2x', $uri);
        $variables['large_image'] = image_style_url('rep_wide_2000x700custom_boston_desktop_1x', $uri);
        $variables['medium_image'] = image_style_url('rep_wide_2000x700custom_boston_tablet_2x', $uri);
        $variables['small_image'] = image_style_url('rep_wide_2000x700custom_boston_mobile_2x', $uri);
      }
    }
  }
  // Removes breadcrumbs on node types specified in the array.
  $dont_show_breadcrumbs = array('topic_page', 'landing_page');
  if (isset($variables['node']) && in_array($variables['node']->getType(), $dont_show_breadcrumbs)) {
    $variables['breadcrumb'] = '';
  }

  // Get the HTTP header so we can have custom 404/403 pages.
  $response = new Response();
  if (!empty($response)) {
    $header = $response->headers->get("status");
    if ($header == "404 Not Found") {
      $variables['theme_hook_suggestions'][] = 'page__404';
      $block = module_invoke('bos_blocks', 'block_view', 'search');
      $variables['search_block'] = $block;
    }

    if ($header == "403 Forbidden") {
      $variables['theme_hook_suggestions'][] = 'page__403';
    }
  }

  // some content types aren't special
  $no_type_needed = [
    'listing_page',
    'landing_page',
  ];
  if (isset($variables['node']) && !in_array($variables['node']->getType(), $no_type_needed)) {
    $variables['#attached']['html_head'][] = array(
      ['#tag' => 'meta', // The #tag is the html tag -
      '#attributes' => [ // Set up an array of attributes inside the tag
        'class' => 'swiftype',
        'name' => 'type',
        'data-type' => 'enum',
        'content' => $variables['node']->getType()],
      ],
      "swiftype_type");
  }

  // Add a site priority meta tag for swiftype
  $variables['#attached']['html_head'][] = array(
    ['#tag' => 'meta', // The #tag is the html tag -
    '#attributes' => [ // Set up an array of attributes inside the tag
      'class' => 'swiftype',
      'name' => 'site-priority',
      'data-type' => 'integer',
      'content' => 5,],
    ],
    "swiftype_priority");

  // Create necessary page classes
  if (isset($variables['node']) && $variables['node']->getType() !== 'tabbed_content' && $variables['node']->getType() !== 'how_to' && !$variables['header_image']) {
    $variables['page_class'] = 'page';
  }
  else {
    $variables['page_class'] = NULL;
  }

  $variables['page_class_alert'] = $variables['page_class'];
  $variables['target_id'] = NULL;

  if (isset($variables['node'])) {
    $variables['target_id'] = $variables['node']->nid->value;

    if ($variables['node']->getType() == 'topic_page') {
      $variables['page_class'] = 'page';
    }

    if ($variables['node']->getType() !== 'landing_page') {
      if ($variables['node']->getType() !== 'tabbed_content' && $variables['node']->getType() !== 'how_to') {
        $variables['page_class_alert'] = 'page page--wa';
      } else {
        $variables['page_class_alert'] = 'page page--wa page--nm';
      }
    }
    else {
      $variables['page_class_alert'] = 'page';
    }

    if ($variables['is_front']) {
      $variables['page_class_alert'] = 'page page--wa page--fp';
    }
  }

  // If we are on the employee directory page, change the title.
  if (strpos($current_path, 'user') === 0) {
    $variables['page_class_alert'] = 'page page--wa';
  }

  $variables['site_name'] = \Drupal::configFactory()->get('system.site')->get('name');
  $variables['title'] = $variables["page"]["#title"];

  $variables['site_info'] = array(
    'front_page' => $variables['front_page'],
    'cache_buster' => $variables['cache_buster'],
    'site_name' => $variables['site_name'],
    'hide_logo' => false,
  );

  $menu_tree = \Drupal::menuTree();
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters("menu-secondary-menu");
  $tree = $menu_tree->load("menu-secondary-menu", $parameters);
  $manipulators = array(
    // Only show links that are accessible for the current user.
    array('callable' => 'menu.default_tree_manipulators:checkAccess'),
    // Use the default sorting of menu links.
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  $tree = $menu_tree->transform($tree, $manipulators);
  $variables['secondary_menu'] = $menu_tree->build($tree);

  $arr_base = [
    '#site_name' => $variables['site_name'],
    '#front_page' => $variables['front_page'],
    '#asset_url' => $variables['asset_url'],
    '#asset_name' => $variables['asset_name'],
    '#cache_buster' => $variables['cache_buster'],
    '#hide_logo' => !empty($variables['hide_logo'])?$variables['hide_logo']:'',
    '#secondary_menu' => $variables['secondary_menu'],
  ];
  $arr = $arr_base + ['#theme' => 'burger'];
  $variables['burger'] = \Drupal::service('renderer')->render($arr);
  $arr = $arr_base + ['#theme' => 'logo'];
  $variables['logo'] = \Drupal::service('renderer')->render($arr);
  $arr = $arr_base + ['#theme' => 'seal'];
  $variables['seal'] = \Drupal::service('renderer')->render($arr);
  $arr = $arr_base + ['#theme' => 'secondary_nav'];
  $variables['secondary_nav'] = \Drupal::service('renderer')->render($arr);
  $arr = $arr_base + ['#theme' => 'search'];
  $variables['search'] = \Drupal::service('renderer')->render($arr);

}

/**
 * Implements hook_preprocess_menu()
 */
function bos_theme_preprocess_menu(array &$variables, $hook) {
  if ($hook == "menu" && $variables['menu_name'] == "main") {
    $first = TRUE;
    foreach ($variables['items'] as $id => &$item) {
      if ($first) {
        $item['class-array'][] = 'first';
      }
      $id = explode(':', $id);
      $menu = \Drupal::service('entity.repository')->loadEntityByUuid($id[0], $id[1]);
      $item['class-array'][] = 'menu-mlid-' . $menu->id();
      if (stripos($item['title'],'311') !== false) {
        $item['class-array'][] = "nv-m-c-a--y";
        $item['linkclass'] = "three-one-one";
      }
      $item['classes'] = implode(" ", $item['class-array']);
      $first = false;

    }
    // for the last element
    $item['class-array'][] = 'last';
    $item['classes'] = implode(" ", $item['class-array']);

  }
  if ($hook == "menu" && $variables['menu_name'] == "secondary_menu") {
    return;
  }
}

/**
 * Implements hook_preprocess_node.
 */
function bos_theme_preprocess_node(array &$variables) {
  _bos_theme_default_variables($variables);

  $variables['title'] = $variables["node"]->title->view();
  $variables['nid'] = $variables['node']->id();
  $variables['unpublished'] = (!$variables['node']->status) ? TRUE : FALSE;
  $variables['preview'] = isset($variables['preview']) ? $variables['preview'] : FALSE;

  // Add pubdate to submitted variable.
  $variables['pubdate'] = '<time pubdate datetime="' . format_date($variables['node']->created->value, 'custom', 'c') . '">' . $variables['date'] . '</time>';
  if ($variables['display_submitted']) {
    $variables['submitted'] = t('Submitted by !username on !datetime', array('!username' => $variables['name'], '!datetime' => $variables['pubdate']));
  }

  // If the node is unpublished, add the "unpublished" watermark class.
  if ($variables['unpublished'] || $variables['preview']) {
    $variables['classes_array'][] = 'watermark__wrapper';
  }


}

function bos_theme_form_node_form_alter(&$form, &$form_state, $form_id) {
  return;
}

/**
 * Implements hook_status_messages
 *    @see templates/misc/status-messages.html.twig
 * @param $variables
 */
function bos_theme_preprocess_status_messages(array &$variables) {
  // Allow a preprocess function to override the default SVG icons.
  if (!isset($variables['status_icon'])) {
    $variables['status_icon'] = array();
    foreach (array('status', 'warning', 'error') as $type) {
      // Add a GPL-licensed icon from IcoMoon. https://icomoon.io/#preview-free
      $icon_size = 'width="24" height="24"';
      // All of the IcoMoon SVGs have the same header.
      $variables['status_icon'][$type] = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" ' . $icon_size . ' viewBox="0 0 64 64">';
      switch ($type) {
        case 'error':
          $variables['status_icon'][$type] .= '<path d="M63.416 51.416c-0-0-0.001-0.001-0.001-0.001l-19.415-19.416 19.415-19.416c0-0 0.001-0 0.001-0.001 0.209-0.209 0.36-0.453 0.457-0.713 0.265-0.711 0.114-1.543-0.458-2.114l-9.172-9.172c-0.572-0.572-1.403-0.723-2.114-0.458-0.26 0.097-0.504 0.248-0.714 0.457 0 0-0 0-0.001 0.001l-19.416 19.416-19.416-19.416c-0-0-0-0-0.001-0.001-0.209-0.209-0.453-0.36-0.713-0.457-0.711-0.266-1.543-0.114-2.114 0.457l-9.172 9.172c-0.572 0.572-0.723 1.403-0.458 2.114 0.097 0.26 0.248 0.505 0.457 0.713 0 0 0 0 0.001 0.001l19.416 19.416-19.416 19.416c-0 0-0 0-0 0.001-0.209 0.209-0.36 0.453-0.457 0.713-0.266 0.711-0.114 1.543 0.458 2.114l9.172 9.172c0.572 0.572 1.403 0.723 2.114 0.458 0.26-0.097 0.504-0.248 0.713-0.457 0-0 0-0 0.001-0.001l19.416-19.416 19.416 19.416c0 0 0.001 0 0.001 0.001 0.209 0.209 0.453 0.36 0.713 0.457 0.711 0.265 1.543 0.114 2.114-0.458l9.172-9.172c0.572-0.572 0.723-1.403 0.458-2.114-0.097-0.26-0.248-0.504-0.457-0.713z" fill="#000000"></path>';
          break;

        case 'warning':
          $variables['status_icon'][$type] .= '<path d="M26,64l12,0c1.105,0 2,-0.895 2,-2l0,-9c0,-1.105 -0.895,-2 -2,-2l-12,0c-1.105,0 -2,0.895 -2,2l0,9c0,1.105 0.895,2 2,2Z" fill="#000000"></path><path d="M26,46l12,0c1.105,0 2,-0.895 2,-2l0,-42c0,-1.105 -0.895,-2 -2,-2l-12,0c-1.105,0 -2,0.895 -2,2l0,42c0,1.105 0.895,2 2,2Z" fill="#000000"></path>';
          break;

        default:
          $variables['status_icon'][$type] .= '<path d="M54 8l-30 30-14-14-10 10 24 24 40-40z" fill="#000000"></path>';
      }
      $variables['status_icon'][$type] .= '</svg>';
    }
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function bos_theme_theme_suggestions_page_alter(&$suggestions, $variables, $hook) {
  /**
   * 401/3/4 template suggestions.
   */
  _bos_theme_default_variables($variables);
  switch ($variables['status_code']) {
    case 401:
    case 403:
    case 404: {
      $suggestions[] = 'page__' . $variables['status_code'];
      break;
    }
    default:
      break;
  }
}

/***************************************************************
 * Helper functions
 */
/**
 * Returns a standard set of variables needed by major page elements.
 * @param $variables
 */
function _bos_theme_default_variables(&$variables) {
  $variables['bos_theme'] = array(
    'boston_breadcrumb' => theme_get_setting('boston_breadcrumb'),
    'boston_breadcrumb_separator' => theme_get_setting('boston_breadcrumb_separator'),
    'boston_breadcrumb_home' => theme_get_setting('boston_breadcrumb_home'),
    'boston_breadcrumb_trailing' => theme_get_setting('boston_breadcrumb_trailing'),
    'boston_breadcrumb_title' => theme_get_setting('boston_breadcrumb_title'),
    'boston_skip_link_anchor' => theme_get_setting('boston_skip_link_anchor'),
    'boston_skip_link_text' => theme_get_setting('boston_skip_link_text'),
    'boston_meta' => theme_get_setting('boston_meta'),
    'boston_layout' => theme_get_setting('boston_layout'),
  );
  // A variable to define the cache buster
  $variables['cache_buster'] =  \Drupal::state()->get('system.css_js_query_string');
  $lib = \Drupal::service('library.discovery')->getLibraryByName('bos_theme','global-styling.patterns');
  $variables['asset_url'] = $lib['remote'];
  $variables['asset_name'] = 'public';
  $variables['status_code'] = "200";
  if (!is_null(Drupal::requestStack()->getCurrentRequest()->attributes->get('exception'))) {
    $variables['status_code'] =  (string) Drupal::requestStack()->getCurrentRequest()->attributes->get('exception')->getStatusCode();
  }
}
