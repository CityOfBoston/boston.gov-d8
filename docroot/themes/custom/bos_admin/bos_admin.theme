<?php

/**
 * @file
 * Contains functions to alter Drupal's markup for the adminimal theme.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\FormState;
use Drupal\Component\Utility\Html;
use Drupal\Core\Path\AliasManager;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Render\Markup;
use Drupal\Core\GeneratedLink;
use Drupal\Core\Url;
use Drupal\file\Entity\File;

/**
 * Implements theme.api.php hook_theme().
 *
 * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme/8.2.x
 */
function bos_admin_theme($existing, $type, $theme, $path) {
  return [
    'container' => [
      'base hook' => 'container',
      'path' => 'themes/custom/bos_admin/templates',
      'template' => 'container',
    ],
    'media__media_library' => [
      "base hook" => "media",
    ],
  ];
}

/**
 * Implements hook_entity_presave().
 */
function bos_admin_node_presave(EntityInterface $entity) {
  $revId = $entity->getLoadedRevisionId();
  if (isset($revId)) {
    $current_entity = Drupal::entityTypeManager()->getStorage("node")->loadRevision($revId);
    $current_state = $current_entity->get('moderation_state')->getString();
  }
  else {
    $current_entity = Drupal::entityTypeManager()->getStorage("node")->info;
    $current_state = "new";
  }
  $new_state = $entity->get('moderation_state')->getString();
  $changed = $new_state != $current_state;
  $date = new DrupalDateTime("now", "UTC");

  switch ($new_state) {

    case "archive":
    case "archived":
      break;

    case "draft":
      break;

    case "needs_review":
      break;

    case "published":
      if (!$entity->isPublished()) {
        $entity->status->value = TRUE;
      }
      // If publish dates are being automatically maintained.
      if (!$entity->field_manual_date->value) {
        // Update field_updated_date if changing (or keeping) published.
        if (isset($entity->field_updated_date)) {
          $entity->field_updated_date->value = $date->format("Y-m-d\TH:i:s");
        }
        // Set published_date if this is the first time published.
        if ($changed && isset($entity->field_published_date) && empty($entity->field_published_date->value)) {
          $entity->field_published_date->value = $date->format("Y-m-d\TH:i:s");
        }
      }
      break;
  }
  if (!empty($current_entity->field_updated_date->value) && empty($entity->field_updated_date->value)) {
    $entity->field_updated_date->value = $current_entity->field_updated_date->value;
  }
  if (!empty($current_entity->field_published_date->value) && empty($entity->field_published_date->value)) {
    $entity->field_published_date->value = $current_entity->field_published_date->value;
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function bos_admin_preprocess_html(&$variables) {
  // Add adminimal class to the body.
  $variables['attributes']['class'][] = 'bos_admin';
  $variables['#attached']['library'][] = "bos_admin/global-styling";
  if ($variables["root_path"] == "entity-browser") {
    $variables['#attached']['library'][] = "bos_admin/image-libraries";
    $variables['attributes']['class'][] = "html-" . $variables["root_path"];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_admin_preprocess_username(&$variables) {
  // Todo: set name and extra fields here ...
  $name = $variables["account"]->__get("realname");
  if (empty($name) || stripos($name, "@")) {
    if (function_exists("bos_core_realname_update")) {
      bos_core_realname_update($name, $variables["account"]);
      $variables["account"]->__set("realname", $name);
      $variables["name"] = $name;
    }
    realname_user_update($variables["account"]);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function bos_admin_preprocess_admin_block(&$variables) {
  if (NULL !== \Drupal::routeMatch()->getParameters()->get("link_id") && \Drupal::routeMatch()->getParameters()->get("link_id") == "system.admin_config") {
    _bos_admin_fix_attributes($variables);
    $variables["attributes"]->addClass("admin-" . strtolower(Html::cleanCssIdentifier($variables["block"]["title"])));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bos_admin_form_revision_overview_form_alter(&$form, FormStateInterface $form_state) {
  $unhelpfulUsernamePattern = "~(CON|INT|)[0-9]{5,}~";
  foreach ($form["node_revisions_table"] as $key => &$revision) {
    if (is_numeric($key)) {
      $context = &$revision["revision"]["#context"];
      // If user is numeric, then find the realname.
      $user = str_replace("\n", "", strip_tags($context["username"]->__toString()));
      if (is_numeric($user)) {
        $user = bos_admin_author_expand($user);
      }
      $context["username"] = Markup::create($user);
      // If revision was migrated from D7, then insert relname into message.
      if (preg_match($unhelpfulUsernamePattern, $context["message"]["#markup"], $rev_username)) {
        $rev_user = Drupal::entityTypeManager()
          ->getStorage("user")
          ->loadByProperties(["name" => $rev_username[0]]);
        $rev_user = reset($rev_user);
        $context["message"]["#markup"] = preg_replace($unhelpfulUsernamePattern, $rev_user->realname, $context["message"]["#markup"]);
      }
      // Add the revision number.
      $revision["revision"]["#template"] = preg_replace("~\{\{ date \}\}~", "{{ revisionid }} on {{ date }}", $revision["revision"]["#template"]);
      $context["revisionid"] = new GeneratedLink();
      $revfield = $revision["revision"]["#context"]["date"]->getGeneratedLink();
      $revfield = preg_replace("~>[0-9\/ -\:apm]*<~", ">" . $revision['select_column_one']['#return_value'] . "<", $revfield);
      $context["revisionid"]->setGeneratedLink($revfield);
      $context["date"]->setGeneratedLink(strip_tags($revision["revision"]["#context"]["date"]->getGeneratedLink()));
      // Add some tooltips to help editors with this form.
      $tooltip = "Select this revision for compare";
      $revision["select_column_one"]["#attributes"]["title"] = $tooltip;
      $revision["select_column_two"]["#attributes"]["title"] = $tooltip;
    }
  }
  // Revision form ...
  $title = "compare";
  $form["node_revisions_table"]["#header"]["select_column_one"] = $title;
  $form["node_revisions_table"]["#header"]["select_column_two"] = $title;
  $form["#attached"]["library"][] = "bos_admin/revisions";
  $form["reset"] = [
    "#attributes" => ["class" => ["compare-reset"]],
    "#button_type" => "danger",
    "#type" => "submit",
    "#value" => Markup::create("Reset selections"),
  ];
  $form["#submit"][] = "bos_admin_revisions_defaults";
}

/**
 * Implements hook_form_alter().
 */
function bos_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (isset($form_state->getBuildInfo()['base_form_id']) && $form_state->getBuildInfo()['base_form_id'] == "node_form") {
    // Node-edit forms: Make the Revision log message required.
    $form["revision_log"]["widget"][0]["value"]["#attributes"]["placeholder"] = "If changing moderation state, you must supply a relevant log note for this update.";

    /* @see https://boston.gitbook.io/digital-documentation/developer-guides-1/drupal/drupal-8/site-development-notes/content-type-back-end/content-editor-ux */
    // Create a secondary block group, and load.
    $form["group_secondary"] = [
      "#type" => "container",
      "#weight" => 99,
      "#attributes" => [
        "class" => ["entity-meta__header", "entity-meta"],
      ],
    ];
    // Load status and moderation state elements into block.
    $form["status"]["#group"] = "group_secondary";
    $form["moderation_state"]["#group"] = "group_secondary";

    // Create a child block inside secondary block.
    $form["group_secondary_revision_log"] = [
      "#type" => "container",
      "#group" => "group_secondary",
      "#weight" => 99,
      "#attributes" => [
        "class" => ["entity-content-form-revision-information"],
      ],
    ];
    // Load revision log to secondary-child block.
    $form["revision_log"]["#group"] = "group_secondary_revision_log";

    // Close the URL Alias details fieldset.
    $form["path"]["widget"][0]["#open"] = FALSE;

    // Find the tabs group which is the ultimate parent.
    $bundle = $form_state->getFormObject()->getEntity()->bundle();
    $parent = NULL;
    foreach ((array) $form['#fieldgroups'] as $fieldgroup) {
      if ($fieldgroup->format_type == "tabs") {
        $parent = $fieldgroup->group_name;
        break;
      }
    }
    if (!isset($parent)) {
      \Drupal::messenger()
        ->addWarning("DISPLAY WARNING: To arrange properly, this display form requires\n
              a \"tabs\" group element, and
              a customised node-edit-form.html.twig template.
            See the article content-type for examples.");
      \Drupal::logger("component")
        ->warning("To display to content editors properly, the module %mod display_form requires a 'tabs' group element.", ["%mod" => $bundle]);
      $form['advanced']['#group'] = "group_secondary";
      return;
    }

    // Move the Revisions info into a new details fieldset, and collapse.
    $form["group_revision"] = [
      "#type" => "details",
      "#open" => FALSE,
      "#group" => "advanced",
      "#weight" => "-10",
      "#title" => \Drupal::translation()->translate('Revision Information'),
    ];
    $form["revision_information"]["#group"] = "group_revision";

    // Create a new field_group to hold config form elements.
    $fieldset = new stdClass();
    $fieldset->children = [
      "advanced",
    ];
    $fieldset->format_type = "tab";
    $fieldset->format_settings = [
      "id" => "",
      "classes" => "group-page-bos-admin field-group-tab",
      "description" => "",
      "required_fields" => TRUE,
      "formatter" => "closed",
    ];
    $fieldset->label = "Advanced";
    $fieldset->group_name = "group_bos_theme";
    $fieldset->entity_type = "node";
    $fieldset->bundle = $bundle;
    $fieldset->context = "form";
    $fieldset->mode = "default";
    $fieldset->parent_name = $parent;
    $fieldset->weight = 200;

    // Configure the field group so it sits in the vertical tabs area.
    $form["#fieldgroups"][$fieldset->group_name] = $fieldset;
    $form["#fieldgroups"][$fieldset->parent_name]->children[] = $fieldset->group_name;
    $form["#group_children"][$fieldset->group_name] = $fieldset->parent_name;
    foreach ($fieldset->children as $child) {
      $form["#group_children"][$child] = $fieldset->group_name;
      $form[$child]["#group"] = $fieldset->group_name;
    }

    // Add css to close border on meta element.
    $form["meta"]["#attributes"]["class"][] = "entity-meta";
  }

  if (!empty($form["#entity_type"]) && $form["#entity_type"] == "node" && preg_match("/node\-.*\-edit\-form*/", $form["#id"])) {
    if (isset($form["#validate"]) && count($form['#validate']) > 1) {
      array_splice($form["#validate"], 1, 0, "bos_admin_node_edit_validate");
    }
    else {
      $form['#validate'][] = "bos_admin_node_edit_validate";
    }
  }

  // Theme the status a little bit.
  if (!empty($form["meta"]["published"]["#markup"])) {
    $form["meta"]["published"]["#wrapper_attributes"]['class'][] = "status-" . Html::cleanCssIdentifier(strtolower($form["meta"]["published"]["#markup"]));
  }

  if (!empty($form["moderation_state"]["widget"][0]["current"]["#markup"])) {
    $form["moderation_state"]["widget"][0]["current"]["#wrapper_attributes"]["class"][] = Html::cleanCssIdentifier(strtolower("status-" . $form["moderation_state"]["widget"][0]["current"]["#markup"]));
  }

  $form["moderation_state"]["widget"][0]["scheduled_transitions"]["#attributes"]['class'][] = "moderation-state";

  if (!empty($form["meta"]["author"]["#markup"])) {
    $form["meta"]["author"]["#markup"] = bos_admin_author_expand($form["meta"]["author"]["#markup"]);
  }

  // Management of secondary actions menu.
  $form["#attached"]["library"][] = "bos_admin/actions";

  // Move the metadata (update/publish) fields into advanced tab.
  if (preg_match("/node\-.*[\-edit]?\-form*/", $form["#id"]) &&
    (isset($form["#fieldgroups"]["group_page_meta_data"]) || isset($form["#fieldgroups"]["group_page_metadata"]))) {
    if (!empty($bundle) && (
      \Drupal::currentUser()->hasPermission("set any published on date")
      || \Drupal::currentUser()->hasPermission("set " . $bundle . " published on date")
      )) {
      if (isset($form["#fieldgroups"]["group_page_metadata"])) {
        $form["#group_children"]["group_page_metadata"] = "group_bos_theme";
        $form["#fieldgroups"]["group_page_metadata"]->weight = 100;
      }
      if (isset($form["#fieldgroups"]["group_page_meta_data"])) {
        $form["#group_children"]["group_page_meta_data"] = "group_bos_theme";
        $form["#fieldgroups"]["group_page_meta_data"]->weight = 100;
      }

      $form["#attached"]["library"][] = "bos_admin/manual_date";
    }
  }

  // Add class to edit pages which are created from contextual editor.
  if (preg_match("/.*?_entity_edit_form/", $form_id)) {
    $form_uri = \Drupal::request()->getRequestUri();
    $form_uri = parse_url($form_uri);
    $form_uri = explode('/', $form_uri['path']);
    if (is_array($form_uri) && in_array("paragraphs_edit", $form_uri)) {
      $form["#attributes"]["class"][] = "context_editor-wrapper";

      // Walk up the lineage chain.
      if (isset($form_state->getBuildInfo()['args'][0]) && NULL != $form_state->getFormObject()->getEntity()) {
        // Get this entity to start from.
        $this_entity = $form_state->getFormObject()->getEntity();
        $chain = [$this_entity];
        while (isset($this_entity) && $this_entity->hasField("parent_id")) {
          $this_entity = $this_entity->getParentEntity();
          if (isset($this_entity)) {
            $chain[] = $this_entity;
          }
        }
        $chain = array_reverse($chain);
        // Check the 'top' $chain entity is the entity reported by the form.
        if ($chain[0]->id() == $form_state->getBuildInfo()['args'][0]->id()) {

          // Make the lineage into an array of strings.
          $bundle[0] = ucwords(str_replace(["_", "-"], " ", $chain[0]->bundle()));
          $title[0] = "<div class='ce-pretty'>";
          $title[] = "<h2>" . $bundle[0] . ": <span class='ce-title'>" . $chain[0]->getTitle() . "</span> (nid " . $chain[0]->id() . ")" . "</h2>";
          switch ($chain[1]->getEntityTypeId()) {
            case "node":
              $title[] = "<h3 class='ce-pretty'> > <span class='ce-title'>" . $chain[1]->getTitle() . "</span> (nid " . $chain[1]->id() . ")</h3>";
              break;

            case "paragraph":
              foreach ($chain[1]->getFields() as $fieldName => $field) {
                $crumb = ucwords(str_replace(['-', '_'], " ", $chain[1]->bundle() . (isset($chain[2]) ? " > " . $chain[2]->bundle() : '')));
                if (preg_match('/^(field_).*?title/', $fieldName) && !empty($field->getValue()[0]['value'])) {
                  $title[] = "<h3 class='ce-pretty'>Editing: " . $crumb . " > <span class='ce-title'>" . $field->getValue()[0]['value'] . "</span> (pid " . $chain[1]->id() . ")</h3>";
                  break;
                }
              }
              break;

            case "taxonomy":
              break;
          }
          $title[] = "</div>";

          // Add this title to the form.
          $form['lineage'] = [
            '#type' => 'markup',
            "#weight" => -100,
            '#markup' => implode("", $title) . "<hr>",
          ];

          // Add a cancel button.
          $form["actions"]["delete"] = [
            "#access" => TRUE,
            "#attributes" => [
              "class" => [
                "button",
                "button--danger",
              ],
            ],
            "#button_type" => "danger",
            "#title" => new TranslatableMarkup("Return to @entity", [
              "@entity" => $bundle[0],
            ]),
            "#value" => new TranslatableMarkup("Return to @entity", [
              "@entity" => $bundle[0],
            ]),
            "#type" => "link",
            "#url" => Url::fromRoute("entity.node.canonical", [
              "node" => $this_entity->id(),
            ], [
              "fragment" => Html::cleanCssIdentifier(strtolower($chain[1]->field_short_title->value ?? "")),
            ]),
            "#weight" => 100,
          ];
        }
      }
    }
  }

  // TODO: When the moderation state is Published, make default save to draft
  // plus manage other situations sensibly ...
}

/**
 * Check to see if a log value has been provided when one is needed.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormState $form_state
 *   The form_state object.
 */
function bos_admin_node_edit_validate(array &$form, FormState &$form_state) {
  $form["moderation_state"]["widget"][0]["#changed"] = FALSE;
  $new_value = $form_state->getValue('moderation_state');
  if (isset($form["moderation_state"]["widget"][0]["current"]) && strtolower($form["moderation_state"]["widget"][0]["current"]["#markup"]) != strtolower($new_value[0]["value"])) {
    $form["moderation_state"]["widget"][0]["#changed"] = TRUE;
  }
  if ((string) $form_state->getTriggeringElement()['#value'] == "Save") {
    // If the moderation state has changed require a log message.
    if ($form["moderation_state"]["widget"][0]["#changed"] && $form_state->getValue('revision_log')[0]['value'] == "") {
      $form_state->setErrorByName('revision_log', "Please provide a revision log message.");
    }
    if (NULL != $form_state->getValue('field_manual_date') && $form_state->getValue('field_manual_date')['value'] == 1) {
      if ($form_state->getValue('field_updated_date')[0]['value'] == "") {
        $form_state->setErrorByName('field_updated_date', "Please provide a date for the (metadata) Updated Date field.")->sete;
      }
      if ($form_state->getValue('field_published_date')[0]['value'] == "") {
        $form_state->setErrorByName('field_published_date', "Please provide a date for the (metadata) Published Date field.");
      }
    }
  }
}

/**
 * Update the custom Updated and Published fields on the node.
 *
 * @param string $name
 *   The Username.
 *
 * @return string
 *   A formatted string with Username and email etc.
 */
function bos_admin_author_expand(string $name) {
  $output = $name;
  try {
    $user = Drupal::entityTypeManager()
      ->getStorage("user")
      ->loadByProperties(["name" => $name]);
    if ($user = reset($user)) {
      $output = (string) new TranslatableMarkup("%name | (<a href='@userLink'>user #@uid</a>)", [
        "%email" => $user->getEmail(),
        "%name" => $user->realname,
        "@uid" => $user->id(),
        "@userLink" => "/user/" . $user->id(),
      ]);
    }
  }
  catch (Exception $e) {
    $output = $name;
  }
  return $output;
}

/**
 * Revisions form compare Submit call-back.  Sets default layout/filter.
 *
 * @param array $form
 *   The form object.
 * @param \Drupal\Core\Form\FormState $form_state
 *   The form state object.
 */
function bos_admin_revisions_defaults(array &$form, FormState &$form_state) {
  $route = $form_state->getRedirect()->getRouteParameters();
  $route["filter"] = "split_fields";
  $form_state->getRedirect()
    ->setRouteParameters($route)
    ->setOption('query', ["filter" => "strip_tags"]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a title and a target fields on EditorLinkDialog if the filter allows it.
 * Note: the editor_file module declares that its EditorFileDialog form uses
 *   'editor_link_dialog' as base_form_id. In this case, the function above is
 *   going to be called as an implementation of hook_form_BASE_FORM_ID_alter().
 */
function bos_admin_form_editor_link_dialog_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!isset($form["href_dirty_check"])) {
    return;
  }

  // Rewrite extisting form elements using placeholders.
  $form["attributes"]["title"]["#placeholder"] = "Add a title attribute for the link";
  $form["attributes"]["title"]["#description"] = Markup::create("<b>Tip:</b> <i>This usually appears as a tooltip on hover.</i>");
  $form["attributes"]["href"]["#placeholder"] = "Start typing to find content";
  $form["attributes"]["href"]["#description"] = Markup::create("<b>Tip:</b> <i>You can paste a URL copied from elsewhere.</i>");
  // Urldecode the attributes display values.
  $form["attributes"]["href"]["#default_value"] = urldecode($form["attributes"]["href"]["#default_value"]);
  $form["attributes"]["title"]["#default_value"] = urldecode($form["attributes"]["title"]["#default_value"]);

  $file_upload = json_decode('{"href":{"#title":"URL","#type":"textfield","#default_value":"","#maxlength":2048,"#required":false,"#access":false,"#weight":0},"title":{"#type":"textfield","#title":"Title","#description":"Populates the title attribute of the link, usually shown as a small tooltip on hover.","#default_value":"","#maxlength":512,"#weight":1,"#access":true},"class":{"#type":"textfield","#title":"CSS classes","#description":"List of CSS classes to add to the link, separated by spaces.","#default_value":"","#maxlength":512,"#access":true,"#group":"advanced"},"id":{"#type":"textfield","#title":"ID","#description":"Allows linking to this content using a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Fragment_identifier\">URL fragment<\/a>). Must be unique.","#default_value":"","#maxlength":512,"#access":false,"#group":"advanced"},"target":{"#title":"Open in new window","#type":"checkbox","#default_value":false,"#return_value":"_blank","#access":true,"#group":"advanced"},"rel":{"#type":"textfield","#title":"Relation (rel)","#description":"Often used by JS galleries.","#default_value":"","#maxlength":512,"#access":true,"#group":"advanced"}}', TRUE);
  $file_fid = json_decode('{"#title":"File","#type":"managed_file","#upload_location":"public:\/\/inline-files","#default_value":null,"#upload_validators":{"file_validate_extensions":["txt pdf doc xls ppt"],"file_validate_size":[0]}}', TRUE);

  // Create the horizontal tabs.
  $form['cob_tabs'] = [
    "#type" => "horizontal_tabs",
    "#tree" => TRUE,
    "stuff" => [
      "0" => [
        "#type" => 'details',
        "#title" => "Internal / External Link",
        "#attributes" => [
          "class" => [10 => "cob-details-wrapper"],
          "data-horiz-id" => 0,
        ],
        "form" => [
          "#tree" => TRUE,
          "#parents" => ["cob_tabs", "stuff", 0, "form"],
          "attributes" => $form["attributes"],
        ],
      ],
      "1" => [
        "#type" => 'details',
        "#title" => "Email / Phone Link",
        "#attributes" => [
          "class" => [10 => "cob-details-wrapper"],
          "data-horiz-id" => 1,
        ],
        "form" => [
          "#tree" => TRUE,
          "#parents" => ["cob_tabs", "stuff", 1, "form"],
          "email" => [
            "#weight" => -100,
            "radio-group" => [
              "#type" => "fieldset",
              "#attributes" => ["class" => [10 => "bos-boxed-content-t fieldgroup"]],
              "link_type" => [
                "#type" => "radios",
                '#title' => t('Select Link Type'),
                "#attributes" => ["class" => [10 => "cob-radio-wrapper"]],
                '#options' => [
                  "0" => t('Email'),
                  "1" => t('Phone'),
                ],
                '#default_value' => "0",
              ],
            ],
            "email-frame" => [
              '#type' => 'container',
              "#attributes" => ["class" => [10 => "cob-radio-frameset cob-radio-0"]],
              '#markup' => "
                <p>Provide initial values in the email that will be sent.<br>
                <b>Note:</b> Most users email clients (e.g. gmail) will allow
                 the user to change all values provided below.</p>  
              ",
              "address" => [
                '#type' => 'textfield',
                '#title' => t('E-Mail Address'),
                '#placeholder' => "The email address the user will send to.",
                '#size' => 60,
                '#maxlength' => 128,
              ],
              "subject" => [
                '#type' => 'textfield',
                '#title' => t('E-Mail Subject'),
                '#placeholder' => "The default message subject the user email will send.",
                '#size' => 60,
                '#maxlength' => 128,
              ],
              "body" => [
                '#type' => 'textarea',
                '#title' => t('E-Mail Body'),
                '#placeholder' => "The initial message body in mail the user will send.",
                '#cols' => 60,
                '#rows' => 5,
              ],
            ],
            "phone-frame" => [
              '#type' => 'container',
              "#attributes" => ["class" => [10 => "cob-radio-frameset cob-radio-1"]],
              "phone" => [
                '#type' => 'textfield',
                '#title' => t('Phone'),
                '#placeholder' => "The phone number to dial.",
                '#size' => 60,
                '#maxlength' => 128,
              ],
            ],
          ],
        ],
      ],
      "2" => [
        "#type" => 'details',
        "#title" => "Upload & Link Document",
        "#attributes" => [
          "class" => [10 => "cob-details-wrapper"],
          "data-horiz-id" => 2,
        ],
        "form" => [
          "#tree" => TRUE,
          "#parents" => ["cob_tabs", "stuff", 2, "form"],
          "fid" => $file_fid,
          "attributes" => $file_upload,
        ],
      ],
    ],
  ];

  // Place email/phone link types into correct tabs.
  $form["cob_tabs"]["#default_tab"] = "edit-cob-tabs-stuff-0";
  $default_tab = 0;
  $key = "://";
  if (stripos($form["attributes"]["href"]["#default_value"], $key) === FALSE) {
    $key = ":";
  }
  $protocol = explode($key, $form["attributes"]["href"]["#default_value"]);
  if ($protocol[0] == "tel" && isset($protocol[1])) {
    $form["cob_tabs"]["#default_tab"] = "edit-cob_tabs-stuff-1";
    $default_tab = 1;
    $form["cob_tabs"]["stuff"][1]["form"]["email"]["radio-group"]["link_type"]["#default_value"] = 1;
    $phone = explode("?", $protocol[1]);
    $form["cob_tabs"]["stuff"][1]["form"]["email"]["phone-frame"]["phone"]["#default_value"] = urldecode($phone[0]);
    $form["cob_tabs"]["stuff"][0]["form"]["attributes"]["href"]["#default_value"] = "";
  }
  elseif ($protocol[0] == "mailto" && isset($protocol[1])) {
    $form["cob_tabs"]["#default_tab"] = "edit-cob_tabs-stuff-1";
    $default_tab = 1;
    $form["cob_tabs"]["stuff"][1]["form"]["email"]["radio-group"]["link_type"]["#default_value"] = 0;
    $link_query = explode("?", $protocol[1]);
    $email = &$form["cob_tabs"]["stuff"][1]["form"]["email"]["email-frame"];
    $email["address"]["#default_value"] = urldecode($link_query[0]);
    if (isset($link_query[1])) {
      $query = explode("&", $link_query[1]);
      foreach ($query as $parts) {
        $part = explode("=", $parts);
        $email[$part[0]]["#default_value"] = urldecode($part[1]);
      }
    }
    $form["cob_tabs"]["stuff"][0]["form"]["attributes"]["href"]["#default_value"] = "";
  }

  $form["current"] = [
    '#type' => 'hidden',
    "#attributes" => ["id" => "edit-current"],
    '#default_value' => $default_tab,
  ];

  // Remove the attribues element which is now moved into a h-tab.
  unset($form["attributes"]);

  // Add css to drive horizontal tabs, and cob customization.
  $form['#attached']['library'][] = 'field_group/formatter.horizontal_tabs';
  $form['#attached']['library'][] = 'bos_admin/linkit-dialog';
  $form['#attached']['library'][] = 'editor_file/drupal.ckeditor.drupalfile.admin';

  // Add #validate callback that handles empty attributes.
  array_unshift($form['#validate'], '_bos_admin_link_attributes_validate');

  // Add #submit callback .
  array_unshift($form['#submit'], 'bos_admin_editor_link_dialog_submit');

  return $form;

}

/**
 * Submit callback when adding links via linkit dialog.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form_state.
 */
function bos_admin_editor_link_dialog_submit(array &$form, FormStateInterface $form_state) {
  // See what sort of link is being added.
  $href = $form_state->getValue(['attributes', 'href']);
  $href_dirty_check = $form_state->getValue(['href_dirty_check']);
  if (!empty($href) && $href !== $href_dirty_check) {
    // We are adding/updating a linkit link.
    // This is handled in linkit.module so we have nothing else to do here.
    return;
  }
}

/**
 * Validate callback when adding content into linkit dialog.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form_state.
 */
function _bos_admin_link_attributes_validate(array &$form, FormStateInterface $form_state) {
  // Firstly, unpack the elements we added into horizontal tabs.
  $attributes_key = ["cob_tabs", "stuff", 0, "form", "attributes"];
  $attributes = $form_state->getValue($attributes_key);

  // If the linkit href has been provided, check it resolves.
  if ($form_state->getValue(["cob_tabs", "stuff", 0, "form", "attributes", "href"]) != "") {
    $href = $form_state->getValue(["cob_tabs", "stuff", 0, "form", "attributes", "href"]);
    $href_dirty_check = $form_state->getValue(['href_dirty_check']);
    if (!empty($href) && $href !== $href_dirty_check) {
      // We are adding/updating a linkit link.
      // See if a tel or mailto link has been created.
      if (substr($href, 0, 4) == "mail" || substr($href, 0, 3) == "tel") {
        $name = $form["cob_tabs"]["stuff"][0]["form"]["attributes"]["href"]["#parents"];
        $name = implode("][", $name);
        $form_state->setErrorByName($name, "Use 'Email / Phone Link' tab to create this link.");
        return;
      }

      // See if the link is internal.
      if (!\Drupal::pathValidator()->isValid($href)) {
        // Not a valid internal path.
        if (UrlHelper::isExternal($href)) {
          $result = @file_get_contents($href, FALSE, NULL, 0, 32);
          if (!$result) {
            $name = $form["cob_tabs"]["stuff"][0]["form"]["attributes"]["href"]["#parents"];
            $name = implode("][", $name);
            $form_state->setErrorByName($name, "The supplied URL does not resolve.");
            return;
          }
        }
        elseif (substr($href, 0, 2) == "//") {
          $old_href = $href;
          $href = "https:" . $href;
          if (!($result = @file_get_contents($href, FALSE, NULL, 0, 32))) {
            $href = "http:" . $old_href;
            if (!($result = @file_get_contents($href, FALSE, NULL, 0, 32))) {
              $name = $form["cob_tabs"]["stuff"][0]["form"]["attributes"]["href"]["#parents"];
              $name = implode("][", $name);
              $form_state->setErrorByName($name, "The supplied URL does not resolve.");
              return;
            }
          }
          // Set the href in case it was changed.
          $form_state->setValue([
            "cob_tabs",
            "stuff",
            0,
            "form",
            "attributes",
            "href",
          ], $href);
          $form_state->setValue(['attributes', 'href'], $href);
        }
        elseif (substr($href, 0, 3) != "htt") {
          $old_href = $href;
          $href = "https://" . $href;
          if (!($result = @file_get_contents($href, FALSE, NULL, 0, 32))) {
            $href = "http://" . $old_href;
            if (!($result = @file_get_contents($href, FALSE, NULL, 0, 32))) {
              $name = $form["cob_tabs"]["stuff"][0]["form"]["attributes"]["href"]["#parents"];
              $name = implode("][", $name);
              $form_state->setErrorByName($name, "The supplied URL does not resolve.");
              return;
            }
          }
          // Set the href in case it was changed.
          $form_state->setValue([
            "cob_tabs",
            "stuff",
            0,
            "form",
            "attributes",
            "href",
          ], $href);
          $form_state->setValue(['attributes', 'href'], $href);
        }
        else {
          $name = $form["cob_tabs"]["stuff"][0]["form"]["attributes"]["href"]["#parents"];
          $name = implode("][", $name);
          $form_state->setErrorByName($name, "URL is not a valid internal path.");
          return;
        }
      }
      else {
        if (strpos($href, "://") === FALSE && substr($href, 0, 1) == "/") {
          // Seems to be a valid local value.
          $href = \Drupal::service('path.alias_manager')->getAliasByPath($href);
          $form_state->setValue(array_merge($attributes_key, ["href"]), $href);
          $attributes["href"] = $href;
          $form_state->setValue(['href_dirty_check'], $href);
        }
        elseif (!($result = @file_get_contents($href, FALSE, NULL, 0, 32))) {
          $name = $form["cob_tabs"]["stuff"][0]["form"]["attributes"]["href"]["#parents"];
          $name = implode("][", $name);
          $form_state->setErrorByName($name, "The supplied URL does not resolve.");
          return;
        }
      }
    }
    // Next validity check ...
  }

  elseif ($form_state->getValue(["cob_tabs", "stuff", 1, "form", "email", "email-frame", "address"]) != "") {
    // Make sure any linkit value is removed.
    $mail_key = ["cob_tabs", "stuff", 1, "form", "email"];
    $email = $form_state->getValue($mail_key);
    if ($email["radio-group"]["link_type"] == 0) {
      // This is a mailto: link.
      if (empty($email["email-frame"]["address"])) {
        $name = $form["cob_tabs"]["stuff"][1]["form"]["email"]["email-frame"]["address"]["#parents"];
        $name = implode("][", $name);
        $form_state->setErrorByName($name, "Email type link requires at least an email address to send to.");
        return;
      }

      // Build new href element.
      $attributes["href"] = "mailto:" . urlencode(Html::escape($email["email-frame"]["address"]));
      $join = "?";
      if (!empty($email["email-frame"]["subject"])) {
        $attributes["href"] .= $join . "subject=" . urlencode(Html::escape($email["email-frame"]["subject"]));
        $join = "&";
      }
      if (!empty($email["email-frame"]["body"])) {
        $attributes["href"] .= $join . "body=" . urlencode(Html::escape($email["email-frame"]["body"]));
      }
      $form_state->setValue("attributes", $attributes);
      $form_state->setValue("href_dirty_check", $attributes['href']);
    }
  }

  elseif ($form_state->getValue(["cob_tabs", "stuff", 1, "form", "email", "phone-frame", "phone"]) != "") {
    // This is a tel: link.
    if (empty($email["phone-frame"]["phone"])) {
      $name = $form["cob_tabs"]["stuff"][1]["form"]["email"]["phone-frame"]["phone"]["#parents"];
      $name = implode("][", $name);
      $form_state->setErrorByName($name, "Phone type link requires a phone number.");
      return;
    }

    // Build new href element.
    $attributes["href"] = "tel:" . urlencode(Html::escape($email["phone-frame"]["phone"]));
    $form_state->setValue("attributes", $attributes);
    $form_state->setValue("href_dirty_check", $attributes['href']);
  }

  elseif ($form_state->getValue(["cob_tabs", "stuff", 2, "form", "fid"]) != "") {
    // Make sure any linkit value is removed.
    $file_key = ["cob_tabs", "stuff", 2, "form"];
    $document = $form_state->getValue($file_key);
    $document["attributes"]["title"] = urlencode(Html::escape($document["attributes"]["title"]));
    $attributes = array_merge($attributes, $document["attributes"]);
    $form_state->setValue("attributes", $attributes);

    // Convert any uploaded files from the FID values to data-entity-uuid
    // attributes and set data-entity-type to 'file'.
    $fid = $form_state->getValue(array_merge($file_key, ['fid', 0]));

    if (!empty($fid)) {
      $file = File::load($fid);
      $file_url = file_create_url($file->getFileUri());
      // Transform absolute file URLs to relative file URLs: prevent problems
      // on multisite set-ups and prevent mixed content errors.
      $file_url = file_url_transform_relative($file_url);
      $form_state->setValue(['attributes', 'href'], $file_url);
      $form_state->setValue(['attributes', 'data-entity-uuid'], $file->uuid());
      $form_state->setValue(['attributes', 'data-entity-type'], 'file');
    }
  }

  $form_state->setValue("attributes", $attributes);

}

/**
 * Ensure attributes element of variables array is an Attribute object.
 *
 * This snippet fixes the situation where a module has defined an attributes
 * element as an array and not a Drupal\core\Template\Attribute object.
 *
 * @param array $variables
 *   The current variables array as generated pre-rendering.
 * @param string $check_field
 *   The attribute field.
 */
function _bos_admin_fix_attributes(array &$variables, string $check_field = "attributes") {
  if (function_exists("_bos_core_fix_attributes")) {
    _bos_core_fix_attributes($variables, $check_field);
  }
}
