# Acquia friendly mods from https://github.com/lando/lando/issues/105
# See readme in ./build/readme.boston.md

name: boston
recipe: drupal8
#proxy:
#  nginx:
#  edge:
#    - edge.acquia.lndo.site

config:
  php: '7.1'
  webroot: 'docroot'
  database: mysql:5.7
  drush: composer
  xdebug: true
  drupal: false

services:
  node:
    type: node:8.9

    run:
      # this container builds after appserver, so in order to get useful info to the
      # console, print previously executed utilities here.
      - cat ${LANDO_MOUNT}/setup/uli.log && rm -f ${LANDO_MOUNT}/setup/uli.log

    globals:
      gulp-cli: "latest"

  # Database container.
  # Set default port mapping and default database credentials.
  database:
    type: mysql
    portforward: 3307
    host: localhost
    run_as_root:
      - apt-get update -y  > ${LANDO_MOUNT}/setup/lando_db.log
      - apt-get install -y --no-install-recommends less python-pip python-setuptools >> ${LANDO_MOUNT}/setup/lando_db.log
      - pip install mycli

    creds:
      user: drupal
      password: drupal
      database: drupal

  appserver:

    run_as_root:
      - echo "\033[1;32m[lando]\033[1;33m Building; Installing Linux packages in appserver container...\033[0m"
      - echo "\033[1;32m[lando]\033[1;33m  -> Container build actions will be logged to files in ${LANDO_MOUNT}/setup\033[0m"
      # Updates apt, creates and pipes output to setup/lando.log
      - apt-get update -y  > ${LANDO_MOUNT}/setup/lando.log
      # Installs linux apps and extensions into the appserver container.
      - apt-get install -y --no-install-recommends apt-utils zip unzip bzip2 libbz2-dev libgd-dev mysql-client openssh-client vim jq cron >> ${LANDO_MOUNT}/setup/lando.log
      - docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ >> ${LANDO_MOUNT}/setup/lando.log
      # Change the permissions on the log file so that non-root user can add to log.
      - chmod 777 ${LANDO_MOUNT}/setup/lando.log >> ${LANDO_MOUNT}/setup/lando.log
      # [Optional]  Do not need the next 2 statements on stage or production servers.
      # Install a custom apache config file for on-demand containers -> limits the apache children to preserve memory.
      #     (Config loaded and enabled by Phing in setup:docker:drupal-terraform)
      - cp ${LANDO_MOUNT}/scripts/phing/files/limit-apache-children.conf /etc/apache2/conf-available/ >> ${LANDO_MOUNT}/setup/lando.log
      - ip route | awk 'NR==1 {printf $3}' | xargs echo "xdebug.remote_host=" >>/usr/local/etc/php/conf.d/boston.xdebug.ini
      - service apache2 reload >> ${LANDO_MOUNT}/setup/lando.log

    run:
      - echo "\033[1;32m[lando]\033[1;33m Installing Drupal and dependencies in appserver & database containers ...\033[0m"
      # Install Phing so we can use it to run balance of build scripts.
      # Note: we want to build this from the home folder so it does not install composer.json/lock just yet.
      - echo "\033[1;32m[lando]\033[1;33m Composer is installing phing ...\033[0m"
      - echo "composer require phing/phing:2.* --no-suggest --no-scripts -q" > ${LANDO_MOUNT}/setup/composer.log
      - cd ~ && composer require phing/phing:2.* --no-suggest --no-scripts -q >> ${LANDO_MOUNT}/setup/composer.log
      # Next command hands off to Phing to complete the initial setup.
      - echo "\033[1;32m[lando]\033[1;33m Now handing over to phing to build Drupal (\033[0;32mphing tasks annotated green\033[1;33m)...\033[0m\n"
      - echo "\033[0;32mBuild Task > setup:docker:drupal-local\033[0m\n"
      - cd $LANDO_MOUNT && ~/vendor/phing/phing/bin/phing -S -f ${LANDO_MOUNT}/build.xml build:info >> ${LANDO_MOUNT}/setup/uli.log
      - echo "\033[1;32m[lando]\033[1;33m Build Finished; useful Drupal administration information;\033[0m" >> ${LANDO_MOUNT}/setup/uli.log
      - cd $LANDO_MOUNT && ~/vendor/phing/phing/bin/phing -f ${LANDO_MOUNT}/build.xml setup:docker:drupal-local
      # Next command creates a link to enable a cli alias for phing. (Assumes Phing is in the repo's composer.json/lock file)
      - if [ ! -e  /usr/local/bin/phing ]; then ln -s ${LANDO_MOUNT}/vendor/phing/phing/bin/phing /usr/local/bin/ >> ${LANDO_MOUNT}/setup/lando.log; fi
      # Phing commands to complete the initial setup.  Output redirect so it can be printed at the end.
      - cd $LANDO_MOUNT && phing -S -f ${LANDO_MOUNT}/build.xml update:user:setadminpwd >> ${LANDO_MOUNT}/setup/uli.log
      - cd $LANDO_MOUNT && phing -S -f ${LANDO_MOUNT}/build.xml update:user:loginadmin >> ${LANDO_MOUNT}/setup/uli.log
#      - chmod 777 ${LANDO_MOUNT}/setup/*.log
      # Now setup the node container.
      - echo "\033[1;32m[lando]\033[1;33m  Phing has finished building Drupal.\033[0m\n"
      - echo "\033[1;32m[lando]\033[1;33m Verify linux node library/extensions in node container...\033[0m"

    overrides:
      services:
        environment:
          LANDO_INFO: LANDO_INFO
          PHP_IDE_CONFIG: 'serverName=lando'

    config:
      conf: xdebug.ini

  # set up a Varnish edge
#  edge:
#    type: varnish:4.1
#    backends:
#      - appserver
#    ssl: true
#
#  cache:
#    type: memcached:2.2

tooling:
  phpunit:
    service: appserver
    description: "Run PHP Unit tests: lando phpunit"

  drush:
    service: appserver
    description: "Run drush commands in app container: lando drush <command>"
    cmd:
    - /app/vendor/bin/drush

  drupal:
    service: appserver
    description: "Run drupal-console commands in app container: lando drupal <command>"
    cmd:
    - drupal

  npm:
    service: node
    description: "Run npm commands in node container: lando npm <command>"

  node:
    service: node
    description: "Run node commands in node container: lando node <command>"

  gulp:
    service: node
    description: "Run node:gulp commands in node container: lando gulp <command>"

  phing:
    service: appserver
    description: "Run Phing tasks in app container: lando phing <task>"
    cmd:
      - phing

  mycli:
    service: database
    description: "Open mycli prompt in db container: lando mycli"
    cmd: "mycli -udrupal -pdrupal"


  # Add in routes to the varnish cli tools
#  varnishadm:
#    service: edge
#    user: root
#  varnishstat:
#    service: edge
#    user: root
#  varnishlog:
#    service: edge
#    user: root

events:
  post-start:
    - echo "\033[1;32m[lando]\033[0m Docker containers are now started."
    - cd $LANDO_MOUNT && $LANDO_MOUNT/scripts/doit/branding.sh
    - if [ ! -d $LANDO_MOUNT/setup ]; then mkdir $LANDO_MOUNT/setup; fi
